
LAB03_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb8  08005bb8  000070a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb8  08005bb8  00006bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc0  08005bc0  000070a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08005bc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200000a4  08005c6c  000070a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08005c6c  00007444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dea6  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ac  00000000  00000000  00014f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00017028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000865  00000000  00000000  00017b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b12  00000000  00000000  00018385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcb8  00000000  00000000  0003de97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb4a5  00000000  00000000  0004bb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136ff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  00137038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0013a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a4 	.word	0x200000a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a5c 	.word	0x08005a5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a8 	.word	0x200000a8
 800021c:	08005a5c 	.word	0x08005a5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fedf 	bl	8001376 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f852 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f966 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f932 	bl	8000828 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005c4:	f000 f898 	bl	80006f8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f8e0 	bl	800078c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  UARTDMAConfig();
 80005cc:	f000 fc48 	bl	8000e60 <UARTDMAConfig>

    /* USER CODE BEGIN 3 */


	static uint32_t BTMX_TimeStamp = 0;
	if(HAL_GetTick() > BTMX_TimeStamp)
 80005d0:	f000 ff36 	bl	8001440 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <main+0x98>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d907      	bls.n	80005ee <main+0x3e>
	{
	    BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 80005de:	f000 ff2f 	bl	8001440 <HAL_GetTick>
 80005e2:	4603      	mov	r3, r0
 80005e4:	3319      	adds	r3, #25
 80005e6:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <main+0x98>)
 80005e8:	6013      	str	r3, [r2, #0]
	  	ButtonMatrixRead();
 80005ea:	f000 fa1b 	bl	8000a24 <ButtonMatrixRead>
	}
	b = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); //start button
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	4816      	ldr	r0, [pc, #88]	@ (800064c <main+0x9c>)
 80005f4:	f001 fcf4 	bl	8001fe0 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0xa0>)
 80005fe:	601a      	str	r2, [r3, #0]
	if(b == 1 && mode == 0)
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <main+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d115      	bne.n	8000634 <main+0x84>
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <main+0xa4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <main+0x84>
	{
	  	secretNumber = rand()%9; // Generate a random number between 0 and 9
 8000610:	f004 fa46 	bl	8004aa0 <rand>
 8000614:	4601      	mov	r1, r0
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <main+0xa8>)
 8000618:	fb83 2301 	smull	r2, r3, r3, r1
 800061c:	105a      	asrs	r2, r3, #1
 800061e:	17cb      	asrs	r3, r1, #31
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4413      	add	r3, r2
 8000628:	1aca      	subs	r2, r1, r3
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <main+0xac>)
 800062c:	601a      	str	r2, [r3, #0]
	  	mode = 1;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <main+0xa4>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <main+0xa4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1c7      	bne.n	80005cc <main+0x1c>
	{

	  	CheckNumber();
 800063c:	f000 fa70 	bl	8000b20 <CheckNumber>
	  	CheckGuess();
 8000640:	f000 fafe 	bl	8000c40 <CheckGuess>
  {
 8000644:	e7c2      	b.n	80005cc <main+0x1c>
 8000646:	bf00      	nop
 8000648:	200002e8 	.word	0x200002e8
 800064c:	48000800 	.word	0x48000800
 8000650:	200002b8 	.word	0x200002b8
 8000654:	200002bc 	.word	0x200002bc
 8000658:	38e38e39 	.word	0x38e38e39
 800065c:	200002b0 	.word	0x200002b0

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2238      	movs	r2, #56	@ 0x38
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fb59 	bl	8004d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000682:	2000      	movs	r0, #0
 8000684:	f001 fd00 	bl	8002088 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2340      	movs	r3, #64	@ 0x40
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006a2:	2355      	movs	r3, #85	@ 0x55
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd9a 	bl	80021f0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006c2:	f000 fbdb 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f898 	bl	8002814 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ea:	f000 fbc7 	bl	8000e7c <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	@ 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000700:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073a:	4812      	ldr	r0, [pc, #72]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	f002 fcd4 	bl	80030e8 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 fb99 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 800074e:	f004 f8dd 	bl	800490c <HAL_UARTEx_SetTxFifoThreshold>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000758:	f000 fb90 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	f004 f912 	bl	8004988 <HAL_UARTEx_SetRxFifoThreshold>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800076a:	f000 fb87 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f004 f893 	bl	800489a <HAL_UARTEx_DisableFifoMode>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800077a:	f000 fb7f 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000c0 	.word	0x200000c0
 8000788:	40008000 	.word	0x40008000

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 8000792:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <MX_USART1_UART_Init+0x98>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007b4:	220c      	movs	r2, #12
 80007b6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4812      	ldr	r0, [pc, #72]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007d8:	f002 fc86 	bl	80030e8 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80007e2:	f000 fb4b 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007ea:	f004 f88f 	bl	800490c <HAL_UARTEx_SetTxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80007f4:	f000 fb42 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 80007fc:	f004 f8c4 	bl	8004988 <HAL_UARTEx_SetRxFifoThreshold>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000806:	f000 fb39 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 800080c:	f004 f845 	bl	800489a <HAL_UARTEx_DisableFifoMode>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000816:	f000 fb31 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000154 	.word	0x20000154
 8000824:	40013800 	.word	0x40013800

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_DMA_Init+0x60>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_DMA_Init+0x60>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6493      	str	r3, [r2, #72]	@ 0x48
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_DMA_Init+0x60>)
 800083c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_DMA_Init+0x60>)
 8000848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <MX_DMA_Init+0x60>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6493      	str	r3, [r2, #72]	@ 0x48
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_DMA_Init+0x60>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	200b      	movs	r0, #11
 8000864:	f000 fed3 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000868:	200b      	movs	r0, #11
 800086a:	f000 feea 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200c      	movs	r0, #12
 8000874:	f000 fecb 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000878:	200c      	movs	r0, #12
 800087a:	f000 fee2 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b57      	ldr	r3, [pc, #348]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a56      	ldr	r2, [pc, #344]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b54      	ldr	r3, [pc, #336]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a50      	ldr	r2, [pc, #320]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b4e      	ldr	r3, [pc, #312]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a4a      	ldr	r2, [pc, #296]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b48      	ldr	r3, [pc, #288]	@ (8000a18 <MX_GPIO_Init+0x18c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2112      	movs	r1, #18
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f001 fb81 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000916:	f001 fb7b 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f240 4131 	movw	r1, #1073	@ 0x431
 8000920:	483e      	ldr	r0, [pc, #248]	@ (8000a1c <MX_GPIO_Init+0x190>)
 8000922:	f001 fb75 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4838      	ldr	r0, [pc, #224]	@ (8000a20 <MX_GPIO_Init+0x194>)
 800093e:	f001 f9cd 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000942:	2303      	movs	r3, #3
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4832      	ldr	r0, [pc, #200]	@ (8000a20 <MX_GPIO_Init+0x194>)
 8000956:	f001 f9c1 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 800095a:	2332      	movs	r3, #50	@ 0x32
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f001 f9b2 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000978:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f001 f9a4 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_GPIO_Init+0x190>)
 80009ac:	f001 f996 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80009b0:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b6:	2311      	movs	r3, #17
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_GPIO_Init+0x190>)
 80009ca:	f001 f987 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0x194>)
 80009e2:	f001 f97b 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e6:	2340      	movs	r3, #64	@ 0x40
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <MX_GPIO_Init+0x190>)
 80009fa:	f001 f96f 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2028      	movs	r0, #40	@ 0x28
 8000a04:	f000 fe03 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a08:	2028      	movs	r0, #40	@ 0x28
 8000a0a:	f000 fe1a 	bl	8001642 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800

08000a24 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	static uint8_t X=0;
	for(int i=0; i<4; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e037      	b.n	8000aa0 <ButtonMatrixRead+0x7c>
	{
	if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 8000a30:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <ButtonMatrixRead+0xe8>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000a38:	4934      	ldr	r1, [pc, #208]	@ (8000b0c <ButtonMatrixRead+0xe8>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4610      	mov	r0, r2
 8000a46:	f001 facb 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <ButtonMatrixRead+0x50>
	{
		ButtonState |= 1 << (i + (X * 4));
 8000a50:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	009a      	lsls	r2, r3, #2
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <ButtonMatrixRead+0xf0>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <ButtonMatrixRead+0xf0>)
 8000a70:	801a      	strh	r2, [r3, #0]
 8000a72:	e012      	b.n	8000a9a <ButtonMatrixRead+0x76>
	}
	else
	{
		ButtonState &= ~(1 << (i + (X * 4)));
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	009a      	lsls	r2, r3, #2
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <ButtonMatrixRead+0xf0>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <ButtonMatrixRead+0xf0>)
 8000a98:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<4; i++)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	ddc4      	ble.n	8000a30 <ButtonMatrixRead+0xc>
	}
	}
	//set currentL to Hi-z (open drain)
	HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <ButtonMatrixRead+0xf4>)
 8000aae:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4a18      	ldr	r2, [pc, #96]	@ (8000b18 <ButtonMatrixRead+0xf4>)
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	889b      	ldrh	r3, [r3, #4]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f001 faa5 	bl	8002010 <HAL_GPIO_WritePin>
	//set nextL to low
	uint8_t nextX = (X + 1) %3;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <ButtonMatrixRead+0xf8>)
 8000ace:	fb83 3102 	smull	r3, r1, r3, r2
 8000ad2:	17d3      	asrs	r3, r2, #31
 8000ad4:	1ac9      	subs	r1, r1, r3
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	440b      	add	r3, r1
 8000adc:	1ad1      	subs	r1, r2, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <ButtonMatrixRead+0xf4>)
 8000ae6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <ButtonMatrixRead+0xf4>)
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	889b      	ldrh	r3, [r3, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	f001 fa8a 	bl	8002010 <HAL_GPIO_WritePin>
	X = nextX;
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <ButtonMatrixRead+0xec>)
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	7013      	strb	r3, [r2, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	200002ec 	.word	0x200002ec
 8000b14:	200002ac 	.word	0x200002ac
 8000b18:	20000024 	.word	0x20000024
 8000b1c:	55555556 	.word	0x55555556

08000b20 <CheckNumber>:
void CheckNumber(){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	if(ButtonState == 8)
 8000b24:	4b42      	ldr	r3, [pc, #264]	@ (8000c30 <CheckNumber+0x110>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d106      	bne.n	8000b3a <CheckNumber+0x1a>
		{
			Number = 0;
 8000b2c:	4b41      	ldr	r3, [pc, #260]	@ (8000c34 <CheckNumber+0x114>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000b32:	4b41      	ldr	r3, [pc, #260]	@ (8000c38 <CheckNumber+0x118>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e064      	b.n	8000c04 <CheckNumber+0xe4>
		}
		else if(ButtonState == 4)
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <CheckNumber+0x110>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d106      	bne.n	8000b50 <CheckNumber+0x30>
		{
			Number = 1;
 8000b42:	4b3c      	ldr	r3, [pc, #240]	@ (8000c34 <CheckNumber+0x114>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000b48:	4b3b      	ldr	r3, [pc, #236]	@ (8000c38 <CheckNumber+0x118>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e059      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 64)
 8000b50:	4b37      	ldr	r3, [pc, #220]	@ (8000c30 <CheckNumber+0x110>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	2b40      	cmp	r3, #64	@ 0x40
 8000b56:	d106      	bne.n	8000b66 <CheckNumber+0x46>
		{
			Number = 2;
 8000b58:	4b36      	ldr	r3, [pc, #216]	@ (8000c34 <CheckNumber+0x114>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000b5e:	4b36      	ldr	r3, [pc, #216]	@ (8000c38 <CheckNumber+0x118>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e04e      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 1024)
 8000b66:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <CheckNumber+0x110>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b6e:	d106      	bne.n	8000b7e <CheckNumber+0x5e>
		{
			Number = 3;
 8000b70:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <CheckNumber+0x114>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <CheckNumber+0x118>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e042      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 2)
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <CheckNumber+0x110>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d106      	bne.n	8000b94 <CheckNumber+0x74>
	    {
			Number = 4;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <CheckNumber+0x114>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <CheckNumber+0x118>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e037      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 32)
 8000b94:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <CheckNumber+0x110>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d106      	bne.n	8000baa <CheckNumber+0x8a>
		{
			Number = 5;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <CheckNumber+0x114>)
 8000b9e:	2205      	movs	r2, #5
 8000ba0:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <CheckNumber+0x118>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e02c      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 512)
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <CheckNumber+0x110>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bb2:	d106      	bne.n	8000bc2 <CheckNumber+0xa2>
		{
			Number = 6;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <CheckNumber+0x114>)
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <CheckNumber+0x118>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e020      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 1)
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <CheckNumber+0x110>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d106      	bne.n	8000bd8 <CheckNumber+0xb8>
		{
			Number = 7;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <CheckNumber+0x114>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <CheckNumber+0x118>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e015      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 16)
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <CheckNumber+0x110>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	2b10      	cmp	r3, #16
 8000bde:	d106      	bne.n	8000bee <CheckNumber+0xce>
		{
			Number = 8;
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <CheckNumber+0x114>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <CheckNumber+0x118>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e00a      	b.n	8000c04 <CheckNumber+0xe4>

		}
		else if(ButtonState == 256)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <CheckNumber+0x110>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bf6:	d105      	bne.n	8000c04 <CheckNumber+0xe4>
		{
			Number = 9;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <CheckNumber+0x114>)
 8000bfa:	2209      	movs	r2, #9
 8000bfc:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <CheckNumber+0x118>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

		}
	if(state == 1)
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <CheckNumber+0x118>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d10b      	bne.n	8000c24 <CheckNumber+0x104>
	{
		if(ButtonState == 0)
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <CheckNumber+0x110>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <CheckNumber+0x104>
			{
				guessNumber = Number;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <CheckNumber+0x114>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <CheckNumber+0x11c>)
 8000c1c:	601a      	str	r2, [r3, #0]
				state = 0;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <CheckNumber+0x118>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
			}
	}
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200002ac 	.word	0x200002ac
 8000c34:	200002b4 	.word	0x200002b4
 8000c38:	200002c0 	.word	0x200002c0
 8000c3c:	200002d0 	.word	0x200002d0

08000c40 <CheckGuess>:
void CheckGuess(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if(guessCount == 3){
 8000c44:	4b76      	ldr	r3, [pc, #472]	@ (8000e20 <CheckGuess+0x1e0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d128      	bne.n	8000c9e <CheckGuess+0x5e>
		  n = 0;
 8000c4c:	4b75      	ldr	r3, [pc, #468]	@ (8000e24 <CheckGuess+0x1e4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount-3]);
 8000c52:	4b73      	ldr	r3, [pc, #460]	@ (8000e20 <CheckGuess+0x1e0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b03      	subs	r3, #3
 8000c58:	4a73      	ldr	r2, [pc, #460]	@ (8000e28 <CheckGuess+0x1e8>)
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	2102      	movs	r1, #2
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c68:	f001 f9d2 	bl	8002010 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, LED[guessCount-2]);
 8000c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000e20 <CheckGuess+0x1e0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b02      	subs	r3, #2
 8000c72:	4a6d      	ldr	r2, [pc, #436]	@ (8000e28 <CheckGuess+0x1e8>)
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c82:	f001 f9c5 	bl	8002010 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED[guessCount-1]);
 8000c86:	4b66      	ldr	r3, [pc, #408]	@ (8000e20 <CheckGuess+0x1e0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a66      	ldr	r2, [pc, #408]	@ (8000e28 <CheckGuess+0x1e8>)
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	2101      	movs	r1, #1
 8000c98:	4864      	ldr	r0, [pc, #400]	@ (8000e2c <CheckGuess+0x1ec>)
 8000c9a:	f001 f9b9 	bl	8002010 <HAL_GPIO_WritePin>
//	if(guessCount > -1 && guessCount < 3){
//		LED[guessCount+1] = 1;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount+1]);
//	}

	if(ButtonState == 128){
 8000c9e:	4b64      	ldr	r3, [pc, #400]	@ (8000e30 <CheckGuess+0x1f0>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	2b80      	cmp	r3, #128	@ 0x80
 8000ca4:	d105      	bne.n	8000cb2 <CheckGuess+0x72>
		Button_state_ok = 1;
 8000ca6:	4b63      	ldr	r3, [pc, #396]	@ (8000e34 <CheckGuess+0x1f4>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
		Trn_state = 0;
 8000cac:	4b62      	ldr	r3, [pc, #392]	@ (8000e38 <CheckGuess+0x1f8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]

	}
	if(Button_state_ok == 1 && ButtonState == 0){
 8000cb2:	4b60      	ldr	r3, [pc, #384]	@ (8000e34 <CheckGuess+0x1f4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	f040 80af 	bne.w	8000e1a <CheckGuess+0x1da>
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8000e30 <CheckGuess+0x1f0>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 80aa 	bne.w	8000e1a <CheckGuess+0x1da>

		if(secretNumber==guessNumber){
 8000cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e3c <CheckGuess+0x1fc>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b5d      	ldr	r3, [pc, #372]	@ (8000e40 <CheckGuess+0x200>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d11b      	bne.n	8000d0a <CheckGuess+0xca>
			HAL_UART_Transmit(&hlpuart1, "Correct!\n\r", strlen("Correct!\n\r"),5);
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	495b      	ldr	r1, [pc, #364]	@ (8000e44 <CheckGuess+0x204>)
 8000cd8:	485b      	ldr	r0, [pc, #364]	@ (8000e48 <CheckGuess+0x208>)
 8000cda:	f002 fa55 	bl	8003188 <HAL_UART_Transmit>

			secretNumber = rand()%9;
 8000cde:	f003 fedf 	bl	8004aa0 <rand>
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	4b59      	ldr	r3, [pc, #356]	@ (8000e4c <CheckGuess+0x20c>)
 8000ce6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cea:	105a      	asrs	r2, r3, #1
 8000cec:	17cb      	asrs	r3, r1, #31
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	1aca      	subs	r2, r1, r3
 8000cf8:	4b50      	ldr	r3, [pc, #320]	@ (8000e3c <CheckGuess+0x1fc>)
 8000cfa:	601a      	str	r2, [r3, #0]
			Button_state_ok = 0;
 8000cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e34 <CheckGuess+0x1f4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
			guessNumber = 0;
 8000d02:	4b4f      	ldr	r3, [pc, #316]	@ (8000e40 <CheckGuess+0x200>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
			Button = 1; //clear
			Button_state_clr = 0;
		}
	}
}
	}
 8000d08:	e087      	b.n	8000e1a <CheckGuess+0x1da>
		}else if(secretNumber!=guessNumber){
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e3c <CheckGuess+0x1fc>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e40 <CheckGuess+0x200>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f000 8081 	beq.w	8000e1a <CheckGuess+0x1da>
			if(Trn_state == 0){
 8000d18:	4b47      	ldr	r3, [pc, #284]	@ (8000e38 <CheckGuess+0x1f8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d13f      	bne.n	8000da0 <CheckGuess+0x160>
				if(secretNumber > guessNumber)
 8000d20:	4b46      	ldr	r3, [pc, #280]	@ (8000e3c <CheckGuess+0x1fc>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b46      	ldr	r3, [pc, #280]	@ (8000e40 <CheckGuess+0x200>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dd19      	ble.n	8000d60 <CheckGuess+0x120>
					Trn_state = 1;
 8000d2c:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <CheckGuess+0x1f8>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
					guessCount--;
 8000d32:	4b3b      	ldr	r3, [pc, #236]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a39      	ldr	r2, [pc, #228]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d3a:	6013      	str	r3, [r2, #0]
					Button_state_ok = 0;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e34 <CheckGuess+0x1f4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
					guessNumber = 0;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	@ (8000e40 <CheckGuess+0x200>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
					LED[guessCount] = 1;
 8000d48:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <CheckGuess+0x1e8>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					HAL_UART_Transmit(&hlpuart1, "Too high!\n\r", strlen("Too high!\n\r"),5);
 8000d54:	2305      	movs	r3, #5
 8000d56:	220b      	movs	r2, #11
 8000d58:	493d      	ldr	r1, [pc, #244]	@ (8000e50 <CheckGuess+0x210>)
 8000d5a:	483b      	ldr	r0, [pc, #236]	@ (8000e48 <CheckGuess+0x208>)
 8000d5c:	f002 fa14 	bl	8003188 <HAL_UART_Transmit>
				if(secretNumber < guessNumber)
 8000d60:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <CheckGuess+0x1fc>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <CheckGuess+0x200>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	da19      	bge.n	8000da0 <CheckGuess+0x160>
					Trn_state = 1;
 8000d6c:	4b32      	ldr	r3, [pc, #200]	@ (8000e38 <CheckGuess+0x1f8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
					guessCount--;
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a29      	ldr	r2, [pc, #164]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d7a:	6013      	str	r3, [r2, #0]
					Button_state_ok = 0;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <CheckGuess+0x1f4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
					guessNumber = 0;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <CheckGuess+0x200>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
					LED[guessCount] = 1;
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <CheckGuess+0x1e0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <CheckGuess+0x1e8>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					HAL_UART_Transmit(&hlpuart1, "Too low!\n\r", strlen("Too low!\n\r"),5);
 8000d94:	2305      	movs	r3, #5
 8000d96:	220a      	movs	r2, #10
 8000d98:	492e      	ldr	r1, [pc, #184]	@ (8000e54 <CheckGuess+0x214>)
 8000d9a:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <CheckGuess+0x208>)
 8000d9c:	f002 f9f4 	bl	8003188 <HAL_UART_Transmit>
			if(guessCount == 2){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount]);}
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <CheckGuess+0x1e0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d10b      	bne.n	8000dc0 <CheckGuess+0x180>
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <CheckGuess+0x1e0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <CheckGuess+0x1e8>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2102      	movs	r1, #2
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbc:	f001 f928 	bl	8002010 <HAL_GPIO_WritePin>
			if(guessCount == 1){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, LED[guessCount]);}
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <CheckGuess+0x1e0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10b      	bne.n	8000de0 <CheckGuess+0x1a0>
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <CheckGuess+0x1e0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a16      	ldr	r2, [pc, #88]	@ (8000e28 <CheckGuess+0x1e8>)
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f001 f918 	bl	8002010 <HAL_GPIO_WritePin>
			if(guessCount == 0)
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <CheckGuess+0x1e0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10d      	bne.n	8000e04 <CheckGuess+0x1c4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED[guessCount]);
 8000de8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <CheckGuess+0x1e0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <CheckGuess+0x1e8>)
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	2101      	movs	r1, #1
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <CheckGuess+0x1ec>)
 8000dfa:	f001 f909 	bl	8002010 <HAL_GPIO_WritePin>
				guessCount = 3;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <CheckGuess+0x1e0>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	601a      	str	r2, [r3, #0]
	if(ButtonState == 2048){
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <CheckGuess+0x1f0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e0c:	d105      	bne.n	8000e1a <CheckGuess+0x1da>
			Button = 1; //clear
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <CheckGuess+0x218>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
			Button_state_clr = 0;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <CheckGuess+0x21c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
	}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200002a8 	.word	0x200002a8
 8000e28:	200002d4 	.word	0x200002d4
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	200002ac 	.word	0x200002ac
 8000e34:	200002c8 	.word	0x200002c8
 8000e38:	200002e4 	.word	0x200002e4
 8000e3c:	200002b0 	.word	0x200002b0
 8000e40:	200002d0 	.word	0x200002d0
 8000e44:	08005a74 	.word	0x08005a74
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	38e38e39 	.word	0x38e38e39
 8000e50:	08005a80 	.word	0x08005a80
 8000e54:	08005a8c 	.word	0x08005a8c
 8000e58:	200002c4 	.word	0x200002c4
 8000e5c:	200002cc 	.word	0x200002cc

08000e60 <UARTDMAConfig>:
void UARTDMAConfig()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	4903      	ldr	r1, [pc, #12]	@ (8000e74 <UARTDMAConfig+0x14>)
 8000e68:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <UARTDMAConfig+0x18>)
 8000e6a:	f002 fa1b 	bl	80032a4 <HAL_UART_Receive_DMA>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200002e0 	.word	0x200002e0
 8000e78:	200000c0 	.word	0x200000c0

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <Error_Handler+0x8>

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ebe:	f001 f987 	bl	80021d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0a0      	sub	sp, #128	@ 0x80
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	2254      	movs	r2, #84	@ 0x54
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 ff18 	bl	8004d26 <memset>
  if(huart->Instance==LPUART1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6b      	ldr	r2, [pc, #428]	@ (80010a8 <HAL_UART_MspInit+0x1d8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d137      	bne.n	8000f70 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f00:	2320      	movs	r3, #32
 8000f02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fe9d 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f18:	f7ff ffb0 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f1c:	4b63      	ldr	r3, [pc, #396]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f20:	4a62      	ldr	r2, [pc, #392]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f28:	4b60      	ldr	r3, [pc, #384]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b5d      	ldr	r3, [pc, #372]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f38:	4a5c      	ldr	r2, [pc, #368]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f40:	4b5a      	ldr	r3, [pc, #360]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6a:	f000 feb7 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f6e:	e096      	b.n	800109e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	@ (80010b0 <HAL_UART_MspInit+0x1e0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 8091 	bne.w	800109e <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fe5f 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000f94:	f7ff ff72 	bl	8000e7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f98:	4b44      	ldr	r3, [pc, #272]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	4a43      	ldr	r2, [pc, #268]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa4:	4b41      	ldr	r3, [pc, #260]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <HAL_UART_MspInit+0x1dc>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fc8:	2330      	movs	r3, #48	@ 0x30
 8000fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4834      	ldr	r0, [pc, #208]	@ (80010b4 <HAL_UART_MspInit+0x1e4>)
 8000fe4:	f000 fe7a 	bl	8001cdc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000fe8:	4b33      	ldr	r3, [pc, #204]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8000fea:	4a34      	ldr	r2, [pc, #208]	@ (80010bc <HAL_UART_MspInit+0x1ec>)
 8000fec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fee:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8000ff0:	2218      	movs	r2, #24
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001014:	2220      	movs	r2, #32
 8001016:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800101e:	4826      	ldr	r0, [pc, #152]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001020:	f000 fb2a 	bl	8001678 <HAL_DMA_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800102a:	f7ff ff27 	bl	8000e7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001036:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <HAL_UART_MspInit+0x1e8>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <HAL_UART_MspInit+0x1f4>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001044:	2219      	movs	r2, #25
 8001046:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 800104a:	2210      	movs	r2, #16
 800104c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001072:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001074:	f000 fb00 	bl	8001678 <HAL_DMA_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 800107e:	f7ff fefd 	bl	8000e7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 8001086:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_UART_MspInit+0x1f0>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2025      	movs	r0, #37	@ 0x25
 8001094:	f000 fabb 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001098:	2025      	movs	r0, #37	@ 0x25
 800109a:	f000 fad2 	bl	8001642 <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3780      	adds	r7, #128	@ 0x80
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40008000 	.word	0x40008000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40013800 	.word	0x40013800
 80010b4:	48000800 	.word	0x48000800
 80010b8:	200001e8 	.word	0x200001e8
 80010bc:	40020008 	.word	0x40020008
 80010c0:	20000248 	.word	0x20000248
 80010c4:	4002001c 	.word	0x4002001c

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f97d 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <DMA1_Channel1_IRQHandler+0x10>)
 800112e:	f000 fc86 	bl	8001a3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001e8 	.word	0x200001e8

0800113c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <DMA1_Channel2_IRQHandler+0x10>)
 8001142:	f000 fc7c 	bl	8001a3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000248 	.word	0x20000248

08001150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <USART1_IRQHandler+0x10>)
 8001156:	f002 f8f1 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000154 	.word	0x20000154

08001164 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001168:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800116c:	f000 ff68 	bl	8002040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_kill>:

int _kill(int pid, int sig)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118e:	f003 fe19 	bl	8004dc4 <__errno>
 8001192:	4603      	mov	r3, r0
 8001194:	2216      	movs	r2, #22
 8001196:	601a      	str	r2, [r3, #0]
  return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <_exit+0x12>

080011ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4601      	mov	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001254:	605a      	str	r2, [r3, #4]
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f003 fd7e 	bl	8004dc4 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20020000 	.word	0x20020000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200002f0 	.word	0x200002f0
 80012fc:	20000448 	.word	0x20000448

08001300 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001326:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f003 fd3d 	bl	8004dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff f92b 	bl	80005b0 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   r0, =_estack
 800135c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001368:	08005bc8 	.word	0x08005bc8
  ldr r2, =_sbss
 800136c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001370:	20000444 	.word	0x20000444

08001374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_2_IRQHandler>

08001376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f939 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f80e 	bl	80013a8 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e001      	b.n	800139c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001398:	f7ff fd76 	bl	8000e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139c:	79fb      	ldrb	r3, [r7, #7]

}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <HAL_InitTick+0x68>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d022      	beq.n	8001402 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_InitTick+0x6c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f944 	bl	800165e <HAL_SYSTICK_Config>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d809      	bhi.n	80013f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e2:	2200      	movs	r2, #0
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f000 f910 	bl	800160e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <HAL_InitTick+0x70>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e007      	b.n	8001406 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000044 	.word	0x20000044
 8001414:	2000003c 	.word	0x2000003c
 8001418:	20000040 	.word	0x20000040

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a03      	ldr	r2, [pc, #12]	@ (8001438 <HAL_IncTick+0x1c>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	200002f4 	.word	0x200002f4
 800143c:	20000044 	.word	0x20000044

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200002f4 	.word	0x200002f4

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	@ (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff29 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff40 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff33 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa4 	bl	80015b4 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e08d      	b.n	80017a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_DMA_Init+0x138>)
 8001692:	429a      	cmp	r2, r3
 8001694:	d80f      	bhi.n	80016b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b45      	ldr	r3, [pc, #276]	@ (80017b4 <HAL_DMA_Init+0x13c>)
 800169e:	4413      	add	r3, r2
 80016a0:	4a45      	ldr	r2, [pc, #276]	@ (80017b8 <HAL_DMA_Init+0x140>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	009a      	lsls	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a42      	ldr	r2, [pc, #264]	@ (80017bc <HAL_DMA_Init+0x144>)
 80016b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80016b4:	e00e      	b.n	80016d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b40      	ldr	r3, [pc, #256]	@ (80017c0 <HAL_DMA_Init+0x148>)
 80016be:	4413      	add	r3, r2
 80016c0:	4a3d      	ldr	r2, [pc, #244]	@ (80017b8 <HAL_DMA_Init+0x140>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <HAL_DMA_Init+0x14c>)
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80016ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fa76 	bl	8001c18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001734:	d102      	bne.n	800173c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001750:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d010      	beq.n	800177c <HAL_DMA_Init+0x104>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d80c      	bhi.n	800177c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fa96 	bl	8001c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	e008      	b.n	800178e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020407 	.word	0x40020407
 80017b4:	bffdfff8 	.word	0xbffdfff8
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	40020000 	.word	0x40020000
 80017c0:	bffdfbf8 	.word	0xbffdfbf8
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_DMA_Start_IT+0x20>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e066      	b.n	80018b6 <HAL_DMA_Start_IT+0xee>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d155      	bne.n	80018a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f9bb 	bl	8001b9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 020e 	orr.w	r2, r2, #14
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00f      	b.n	8001860 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0204 	bic.w	r2, r2, #4
 800184e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 020a 	orr.w	r2, r2, #10
 800185e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800187c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001894:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e005      	b.n	80018b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
 80018b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d005      	beq.n	80018e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2204      	movs	r2, #4
 80018da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e037      	b.n	8001952 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 020e 	bic.w	r2, r2, #14
 80018f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001900:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800192e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00c      	beq.n	8001952 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001946:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001950:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d00d      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e047      	b.n	8001a34 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 020e 	bic.w	r2, r2, #14
 80019b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
    }
  }
  return status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2204      	movs	r2, #4
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d026      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x7a>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d107      	bne.n	8001a92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0204 	bic.w	r2, r2, #4
 8001a90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f003 021f 	and.w	r2, r3, #31
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d071      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ab6:	e06c      	b.n	8001b92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d02e      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d029      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020a 	bic.w	r2, r2, #10
 8001af2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	2102      	movs	r1, #2
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d038      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b28:	e033      	b.n	8001b92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2208      	movs	r2, #8
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d02a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d025      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 020e 	bic.w	r2, r2, #14
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
}
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bb2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bc4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f003 021f 	and.w	r2, r3, #31
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d108      	bne.n	8001bfc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bfa:	e007      	b.n	8001c0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d802      	bhi.n	8001c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e001      	b.n	8001c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3b08      	subs	r3, #8
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	009a      	lsls	r2, r3, #2
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40020407 	.word	0x40020407
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020820 	.word	0x40020820
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	40020880 	.word	0x40020880

08001c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	1000823f 	.word	0x1000823f
 8001cd8:	40020940 	.word	0x40020940

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cea:	e15a      	b.n	8001fa2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 814c 	beq.w	8001f9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80a6 	beq.w	8001f9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e54:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5c:	4b58      	ldr	r3, [pc, #352]	@ (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e68:	4a56      	ldr	r2, [pc, #344]	@ (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e92:	d01f      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d019      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1f0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a49      	ldr	r2, [pc, #292]	@ (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	e00a      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	e008      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e004      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee6:	4937      	ldr	r1, [pc, #220]	@ (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef4:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f18:	4a30      	ldr	r2, [pc, #192]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f42:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f96:	4a11      	ldr	r2, [pc, #68]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f47f ae9d 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	48000400 	.word	0x48000400
 8001fcc:	48000800 	.word	0x48000800
 8001fd0:	48000c00 	.word	0x48000c00
 8001fd4:	48001000 	.word	0x48001000
 8001fd8:	48001400 	.word	0x48001400
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800202c:	e002      	b.n	8002034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f806 	bl	8002070 <HAL_GPIO_EXTI_Callback>
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d141      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002096:	4b4b      	ldr	r3, [pc, #300]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d131      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a4:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020aa:	4a46      	ldr	r2, [pc, #280]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b4:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020bc:	4a41      	ldr	r2, [pc, #260]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c4:	4b40      	ldr	r3, [pc, #256]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2232      	movs	r2, #50	@ 0x32
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a3f      	ldr	r2, [pc, #252]	@ (80021cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	3301      	adds	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020da:	e002      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3b01      	subs	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d102      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f2      	bne.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f6:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d158      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e057      	b.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002114:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002118:	e04d      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002120:	d141      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002122:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212e:	d131      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	4a23      	ldr	r2, [pc, #140]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002148:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2232      	movs	r2, #50	@ 0x32
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a1c      	ldr	r2, [pc, #112]	@ (80021cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002166:	e002      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d102      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f2      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218e:	d112      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e011      	b.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021a4:	e007      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40007000 	.word	0x40007000
 80021c8:	2000003c 	.word	0x2000003c
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e2fe      	b.n	8002800 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220e:	4b97      	ldr	r3, [pc, #604]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002218:	4b94      	ldr	r3, [pc, #592]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0x3e>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d002      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b8d      	ldr	r3, [pc, #564]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e2d9      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a84      	ldr	r2, [pc, #528]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b7f      	ldr	r3, [pc, #508]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7e      	ldr	r2, [pc, #504]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b7c      	ldr	r3, [pc, #496]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7b      	ldr	r2, [pc, #492]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b78      	ldr	r3, [pc, #480]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a77      	ldr	r2, [pc, #476]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b75      	ldr	r3, [pc, #468]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a74      	ldr	r2, [pc, #464]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f8ca 	bl	8001440 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff f8c6 	bl	8001440 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e29e      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c2:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff f8b6 	bl	8001440 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff f8b2 	bl	8001440 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e28a      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ea:	4b60      	ldr	r3, [pc, #384]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002306:	4b59      	ldr	r3, [pc, #356]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002310:	4b56      	ldr	r3, [pc, #344]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d102      	bne.n	8002326 <HAL_RCC_OscConfig+0x136>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d002      	beq.n	800232c <HAL_RCC_OscConfig+0x13c>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11f      	bne.n	800236c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	4b4f      	ldr	r3, [pc, #316]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x154>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e25d      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b49      	ldr	r3, [pc, #292]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	4946      	ldr	r1, [pc, #280]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002358:	4b45      	ldr	r3, [pc, #276]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f823 	bl	80013a8 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d043      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e249      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b3d      	ldr	r3, [pc, #244]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3c      	ldr	r2, [pc, #240]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff f85e 	bl	8001440 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff f85a 	bl	8001440 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e232      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239a:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	492d      	ldr	r1, [pc, #180]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 80023ba:	e01a      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80023c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f83a 	bl	8001440 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff f836 	bl	8001440 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e20e      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1e0>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d041      	beq.n	8002482 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01c      	beq.n	8002440 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240c:	4a17      	ldr	r2, [pc, #92]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7ff f813 	bl	8001440 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff f80f 	bl	8001440 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1e7      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ef      	beq.n	800241e <HAL_RCC_OscConfig+0x22e>
 800243e:	e020      	b.n	8002482 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fff6 	bl	8001440 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002456:	e00d      	b.n	8002474 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe fff2 	bl	8001440 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d906      	bls.n	8002474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1ca      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002474:	4b8c      	ldr	r3, [pc, #560]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ea      	bne.n	8002458 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a6 	beq.w	80025dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002494:	4b84      	ldr	r3, [pc, #528]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2b4>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	4a7e      	ldr	r2, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b6:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	4b79      	ldr	r3, [pc, #484]	@ (80026ac <HAL_RCC_OscConfig+0x4bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d2:	4b76      	ldr	r3, [pc, #472]	@ (80026ac <HAL_RCC_OscConfig+0x4bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	@ (80026ac <HAL_RCC_OscConfig+0x4bc>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe ffaf 	bl	8001440 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe ffab 	bl	8001440 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e183      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	4b6c      	ldr	r3, [pc, #432]	@ (80026ac <HAL_RCC_OscConfig+0x4bc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_RCC_OscConfig+0x32e>
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a65      	ldr	r2, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251c:	e024      	b.n	8002568 <HAL_RCC_OscConfig+0x378>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d110      	bne.n	8002548 <HAL_RCC_OscConfig+0x358>
 8002526:	4b60      	ldr	r3, [pc, #384]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252c:	4a5e      	ldr	r2, [pc, #376]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002536:	4b5c      	ldr	r3, [pc, #368]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253c:	4a5a      	ldr	r2, [pc, #360]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002546:	e00f      	b.n	8002568 <HAL_RCC_OscConfig+0x378>
 8002548:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	4a56      	ldr	r2, [pc, #344]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe ff66 	bl	8001440 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe ff62 	bl	8001440 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e138      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ed      	beq.n	8002578 <HAL_RCC_OscConfig+0x388>
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe ff4f 	bl	8001440 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe ff4b 	bl	8001440 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e121      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025bc:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ed      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d0:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	4a34      	ldr	r2, [pc, #208]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03c      	beq.n	8002662 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025f6:	4a2c      	ldr	r2, [pc, #176]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe ff1e 	bl	8001440 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002608:	f7fe ff1a 	bl	8001440 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0f2      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800261c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCC_OscConfig+0x418>
 8002628:	e01b      	b.n	8002662 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262a:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800262c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002630:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe ff01 	bl	8001440 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002642:	f7fe fefd 	bl	8001440 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0d5      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80c9 	beq.w	80027fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266c:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b0c      	cmp	r3, #12
 8002676:	f000 8083 	beq.w	8002780 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d15e      	bne.n	8002740 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fed7 	bl	8001440 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	e00c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fed3 	bl	8001440 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d905      	bls.n	80026b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0ab      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b0:	4b55      	ldr	r3, [pc, #340]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ec      	bne.n	8002696 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026bc:	4b52      	ldr	r3, [pc, #328]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	4b52      	ldr	r3, [pc, #328]	@ (800280c <HAL_RCC_OscConfig+0x61c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6a11      	ldr	r1, [r2, #32]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026cc:	3a01      	subs	r2, #1
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026d6:	0212      	lsls	r2, r2, #8
 80026d8:	4311      	orrs	r1, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026de:	0852      	lsrs	r2, r2, #1
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0552      	lsls	r2, r2, #21
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026ea:	0852      	lsrs	r2, r2, #1
 80026ec:	3a01      	subs	r2, #1
 80026ee:	0652      	lsls	r2, r2, #25
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026f6:	06d2      	lsls	r2, r2, #27
 80026f8:	430a      	orrs	r2, r1
 80026fa:	4943      	ldr	r1, [pc, #268]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a40      	ldr	r2, [pc, #256]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800270c:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a3d      	ldr	r2, [pc, #244]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002716:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fe92 	bl	8001440 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fe8e 	bl	8001440 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e066      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	4b35      	ldr	r3, [pc, #212]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x530>
 800273e:	e05e      	b.n	80027fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a30      	ldr	r2, [pc, #192]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fe78 	bl	8001440 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fe74 	bl	8001440 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e04c      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002766:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002772:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4924      	ldr	r1, [pc, #144]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 8002778:	4b25      	ldr	r3, [pc, #148]	@ (8002810 <HAL_RCC_OscConfig+0x620>)
 800277a:	4013      	ands	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
 800277e:	e03e      	b.n	80027fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e039      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_OscConfig+0x618>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d12c      	bne.n	80027fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	3b01      	subs	r3, #1
 80027ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d123      	bne.n	80027fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d11b      	bne.n	80027fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d113      	bne.n	80027fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	019f800c 	.word	0x019f800c
 8002810:	feeefffc 	.word	0xfeeefffc

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e11e      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b91      	ldr	r3, [pc, #580]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d910      	bls.n	800285c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b8e      	ldr	r3, [pc, #568]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	498c      	ldr	r1, [pc, #560]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e106      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d073      	beq.n	8002950 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d129      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0f4      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002880:	f000 f99e 	bl	8002bc0 <RCC_GetSysClockFreqFromPLLSource>
 8002884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a7c      	ldr	r2, [pc, #496]	@ (8002a7c <HAL_RCC_ClockConfig+0x268>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d93f      	bls.n	800290e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800288e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d033      	beq.n	800290e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12f      	bne.n	800290e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ae:	4b72      	ldr	r3, [pc, #456]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028b6:	4a70      	ldr	r2, [pc, #448]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e024      	b.n	800290e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0c6      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028dc:	4b66      	ldr	r3, [pc, #408]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0be      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028ec:	f000 f8ce 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4a61      	ldr	r2, [pc, #388]	@ (8002a7c <HAL_RCC_ClockConfig+0x268>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d909      	bls.n	800290e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002902:	4a5d      	ldr	r2, [pc, #372]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002908:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4957      	ldr	r1, [pc, #348]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe fd8e 	bl	8001440 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7fe fd8a 	bl	8001440 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e095      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d023      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a42      	ldr	r2, [pc, #264]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 800296e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002972:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002980:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002988:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 800298a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800298e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4936      	ldr	r1, [pc, #216]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b80      	cmp	r3, #128	@ 0x80
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029aa:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 80029b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d21d      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 020f 	bic.w	r2, r3, #15
 80029cc:	4929      	ldr	r1, [pc, #164]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fd34 	bl	8001440 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe fd30 	bl	8001440 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e03b      	b.n	8002a6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1ed      	bne.n	80029dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4917      	ldr	r1, [pc, #92]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490f      	ldr	r1, [pc, #60]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3e:	f000 f825 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490c      	ldr	r1, [pc, #48]	@ (8002a80 <HAL_RCC_ClockConfig+0x26c>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x270>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <HAL_RCC_ClockConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fca0 	bl	80013a8 <HAL_InitTick>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	04c4b400 	.word	0x04c4b400
 8002a80:	08005a98 	.word	0x08005a98
 8002a84:	2000003c 	.word	0x2000003c
 8002a88:	20000040 	.word	0x20000040

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a92:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e047      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002aa4:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab0:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e03e      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d136      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d10c      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aea:	68d2      	ldr	r2, [r2, #12]
 8002aec:	0a12      	lsrs	r2, r2, #8
 8002aee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002afa:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	0a12      	lsrs	r2, r2, #8
 8002b08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0e5b      	lsrs	r3, r3, #25
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e001      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b34:	693b      	ldr	r3, [r7, #16]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	016e3600 	.word	0x016e3600

08002b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	2000003c 	.word	0x2000003c

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4904      	ldr	r1, [pc, #16]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08005aa8 	.word	0x08005aa8

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b98:	f7ff ffda 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0adb      	lsrs	r3, r3, #11
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08005aa8 	.word	0x08005aa8

08002bc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d10c      	bne.n	8002bfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be4:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bee:	68d2      	ldr	r2, [r2, #12]
 8002bf0:	0a12      	lsrs	r2, r2, #8
 8002bf2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
    break;
 8002bfc:	e00c      	b.n	8002c18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	0a12      	lsrs	r2, r2, #8
 8002c0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    break;
 8002c16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0e5b      	lsrs	r3, r3, #25
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c32:	687b      	ldr	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40021000 	.word	0x40021000
 8002c44:	016e3600 	.word	0x016e3600
 8002c48:	00f42400 	.word	0x00f42400

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8098 	beq.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b40      	ldr	r3, [pc, #256]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c86:	4b3d      	ldr	r3, [pc, #244]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c96:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a39      	ldr	r2, [pc, #228]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fbcd 	bl	8001440 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca8:	e009      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fbc9 	bl	8001440 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d902      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	74fb      	strb	r3, [r7, #19]
        break;
 8002cbc:	e005      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ef      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d159      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01e      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d019      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cec:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d18:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fb89 	bl	8001440 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d30:	e00b      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fb85 	bl	8001440 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d902      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	74fb      	strb	r3, [r7, #19]
            break;
 8002d48:	e006      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ec      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6c:	4903      	ldr	r1, [pc, #12]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d74:	e008      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	74bb      	strb	r3, [r7, #18]
 8002d7a:	e005      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d88:	7c7b      	ldrb	r3, [r7, #17]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4ba7      	ldr	r3, [pc, #668]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	4aa6      	ldr	r2, [pc, #664]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da6:	4ba1      	ldr	r3, [pc, #644]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	499d      	ldr	r1, [pc, #628]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc8:	4b98      	ldr	r3, [pc, #608]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	f023 020c 	bic.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4995      	ldr	r1, [pc, #596]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dea:	4b90      	ldr	r3, [pc, #576]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	498c      	ldr	r1, [pc, #560]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0c:	4b87      	ldr	r3, [pc, #540]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	4984      	ldr	r1, [pc, #528]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	497b      	ldr	r1, [pc, #492]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4973      	ldr	r1, [pc, #460]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e72:	4b6e      	ldr	r3, [pc, #440]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	496a      	ldr	r1, [pc, #424]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e94:	4b65      	ldr	r3, [pc, #404]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4962      	ldr	r1, [pc, #392]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	4959      	ldr	r1, [pc, #356]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ed8:	4b54      	ldr	r3, [pc, #336]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	4951      	ldr	r1, [pc, #324]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4948      	ldr	r1, [pc, #288]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1c:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4940      	ldr	r1, [pc, #256]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f54:	4b35      	ldr	r3, [pc, #212]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	4932      	ldr	r1, [pc, #200]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a2c      	ldr	r2, [pc, #176]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f8c:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9a:	4924      	ldr	r1, [pc, #144]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b1f      	ldr	r3, [pc, #124]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd2:	4916      	ldr	r1, [pc, #88]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a10      	ldr	r2, [pc, #64]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d019      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4908      	ldr	r1, [pc, #32]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800301a:	d109      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a02      	ldr	r2, [pc, #8]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
 8003028:	e002      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800303c:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	4926      	ldr	r1, [pc, #152]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800305a:	d105      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003066:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003082:	4918      	ldr	r1, [pc, #96]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003092:	d105      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030ac:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	490a      	ldr	r1, [pc, #40]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ca:	d105      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e042      	b.n	8003180 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd fedf 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2224      	movs	r2, #36	@ 0x24
 8003116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 ff56 	bl	8003fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fc57 	bl	80039ec <UART_SetConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01b      	b.n	8003180 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ffd5 	bl	8004128 <UART_CheckIdleState>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d17b      	bne.n	800329a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_UART_Transmit+0x26>
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e074      	b.n	800329c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2221      	movs	r2, #33	@ 0x21
 80031be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031c2:	f7fe f93d 	bl	8001440 <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e0:	d108      	bne.n	80031f4 <HAL_UART_Transmit+0x6c>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	e003      	b.n	80031fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031fc:	e030      	b.n	8003260 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2180      	movs	r1, #128	@ 0x80
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f001 f837 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e03d      	b.n	800329c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3302      	adds	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e007      	b.n	800324e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3301      	adds	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1c8      	bne.n	80031fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	2140      	movs	r1, #64	@ 0x40
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f001 f800 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e006      	b.n	800329c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	@ 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d137      	bne.n	800332c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_UART_Receive_DMA+0x24>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e030      	b.n	800332e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_UART_Receive_DMA+0x94>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01f      	beq.n	800331c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	613b      	str	r3, [r7, #16]
   return(result);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	69f9      	ldr	r1, [r7, #28]
 800330e:	6a3a      	ldr	r2, [r7, #32]
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	61bb      	str	r3, [r7, #24]
   return(result);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e6      	bne.n	80032ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	461a      	mov	r2, r3
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f001 f818 	bl	8004358 <UART_Start_Receive_DMA>
 8003328:	4603      	mov	r3, r0
 800332a:	e000      	b.n	800332e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3728      	adds	r7, #40	@ 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40008000 	.word	0x40008000

0800333c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	@ 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800336a:	4013      	ands	r3, r2
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11b      	bne.n	80033b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 82e3 	beq.w	800396c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
      }
      return;
 80033ae:	e2dd      	b.n	800396c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8123 	beq.w	8003600 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80033ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80033be:	4b8d      	ldr	r3, [pc, #564]	@ (80035f4 <HAL_UART_IRQHandler+0x2b8>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80033c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033ca:	4b8b      	ldr	r3, [pc, #556]	@ (80035f8 <HAL_UART_IRQHandler+0x2bc>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8116 	beq.w	8003600 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d011      	beq.n	8003404 <HAL_UART_IRQHandler+0xc8>
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d011      	beq.n	8003434 <HAL_UART_IRQHandler+0xf8>
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2202      	movs	r2, #2
 8003422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d011      	beq.n	8003464 <HAL_UART_IRQHandler+0x128>
 8003440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d017      	beq.n	80034a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800347c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003480:	4b5c      	ldr	r3, [pc, #368]	@ (80035f4 <HAL_UART_IRQHandler+0x2b8>)
 8003482:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	f043 0208 	orr.w	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <HAL_UART_IRQHandler+0x196>
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00c      	beq.n	80034d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8249 	beq.w	8003970 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d005      	beq.n	8003536 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800352a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d054      	beq.n	80035e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fff5 	bl	8004526 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d146      	bne.n	80035d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800357a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800358e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1d9      	bne.n	800354a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a6:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <HAL_UART_IRQHandler+0x2c0>)
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f9dd 	bl	8001970 <HAL_DMA_Abort_IT>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d019      	beq.n	80035f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80035ca:	4610      	mov	r0, r2
 80035cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	e00f      	b.n	80035f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9f5 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	e00b      	b.n	80035f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9f1 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035de:	e007      	b.n	80035f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f9ed 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80035ee:	e1bf      	b.n	8003970 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	bf00      	nop
    return;
 80035f2:	e1bd      	b.n	8003970 <HAL_UART_IRQHandler+0x634>
 80035f4:	10000001 	.word	0x10000001
 80035f8:	04000120 	.word	0x04000120
 80035fc:	080047dd 	.word	0x080047dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 8153 	bne.w	80038b0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 814c 	beq.w	80038b0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8145 	beq.w	80038b0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2210      	movs	r2, #16
 800362c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003638:	2b40      	cmp	r3, #64	@ 0x40
 800363a:	f040 80bb 	bne.w	80037b4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800364c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 818f 	beq.w	8003974 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800365c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003660:	429a      	cmp	r2, r3
 8003662:	f080 8187 	bcs.w	8003974 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800366c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 8087 	bne.w	8003792 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800369c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1da      	bne.n	8003684 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e1      	bne.n	80036ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3308      	adds	r3, #8
 8003710:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800371a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800372e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003730:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003734:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800373c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800375e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003760:	f023 0310 	bic.w	r3, r3, #16
 8003764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003772:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003774:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e4      	bne.n	8003750 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe f896 	bl	80018be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f911 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037b2:	e0df      	b.n	8003974 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80d1 	beq.w	8003978 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80037d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80cc 	beq.w	8003978 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003802:	647b      	str	r3, [r7, #68]	@ 0x44
 8003804:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e4      	bne.n	80037e0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	623b      	str	r3, [r7, #32]
   return(result);
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3308      	adds	r3, #8
 800383a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800383e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e1      	bne.n	8003816 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	60fb      	str	r3, [r7, #12]
   return(result);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	617b      	str	r3, [r7, #20]
   return(result);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e4      	bne.n	8003866 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f893 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038ae:	e063      	b.n	8003978 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_UART_IRQHandler+0x59e>
 80038bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 ffc3 	bl	800485e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038d8:	e051      	b.n	800397e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d014      	beq.n	8003910 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03a      	beq.n	800397c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    }
    return;
 800390e:	e035      	b.n	800397c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_UART_IRQHandler+0x5f4>
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 ff6d 	bl	8004808 <UART_EndTransmit_IT>
    return;
 800392e:	e026      	b.n	800397e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_UART_IRQHandler+0x614>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 ff9c 	bl	8004886 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800394e:	e016      	b.n	800397e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <HAL_UART_IRQHandler+0x642>
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003960:	2b00      	cmp	r3, #0
 8003962:	da0c      	bge.n	800397e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 ff84 	bl	8004872 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800396a:	e008      	b.n	800397e <HAL_UART_IRQHandler+0x642>
      return;
 800396c:	bf00      	nop
 800396e:	e006      	b.n	800397e <HAL_UART_IRQHandler+0x642>
    return;
 8003970:	bf00      	nop
 8003972:	e004      	b.n	800397e <HAL_UART_IRQHandler+0x642>
      return;
 8003974:	bf00      	nop
 8003976:	e002      	b.n	800397e <HAL_UART_IRQHandler+0x642>
      return;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_UART_IRQHandler+0x642>
    return;
 800397c:	bf00      	nop
  }
}
 800397e:	37e8      	adds	r7, #232	@ 0xe8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f0:	b08c      	sub	sp, #48	@ 0x30
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4baa      	ldr	r3, [pc, #680]	@ (8003cc4 <UART_SetConfig+0x2d8>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a9f      	ldr	r2, [pc, #636]	@ (8003cc8 <UART_SetConfig+0x2dc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a54:	4313      	orrs	r3, r2
 8003a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003a62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	f023 010f 	bic.w	r1, r3, #15
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a90      	ldr	r2, [pc, #576]	@ (8003ccc <UART_SetConfig+0x2e0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d125      	bne.n	8003adc <UART_SetConfig+0xf0>
 8003a90:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d81a      	bhi.n	8003ad4 <UART_SetConfig+0xe8>
 8003a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <UART_SetConfig+0xb8>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ac5 	.word	0x08003ac5
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aba:	e116      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003abc:	2302      	movs	r3, #2
 8003abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac2:	e112      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aca:	e10e      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003acc:	2308      	movs	r3, #8
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad2:	e10a      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ada:	e106      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd4 <UART_SetConfig+0x2e8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d138      	bne.n	8003b58 <UART_SetConfig+0x16c>
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d82d      	bhi.n	8003b50 <UART_SetConfig+0x164>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <UART_SetConfig+0x110>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b51 	.word	0x08003b51
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b39 	.word	0x08003b39
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b49 	.word	0x08003b49
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e0d8      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e0d4      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b40:	2304      	movs	r3, #4
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b46:	e0d0      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b4e:	e0cc      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b50:	2310      	movs	r3, #16
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b56:	e0c8      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd8 <UART_SetConfig+0x2ec>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d125      	bne.n	8003bae <UART_SetConfig+0x1c2>
 8003b62:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b6c:	2b30      	cmp	r3, #48	@ 0x30
 8003b6e:	d016      	beq.n	8003b9e <UART_SetConfig+0x1b2>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d818      	bhi.n	8003ba6 <UART_SetConfig+0x1ba>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d00a      	beq.n	8003b8e <UART_SetConfig+0x1a2>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d814      	bhi.n	8003ba6 <UART_SetConfig+0x1ba>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <UART_SetConfig+0x19a>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d008      	beq.n	8003b96 <UART_SetConfig+0x1aa>
 8003b84:	e00f      	b.n	8003ba6 <UART_SetConfig+0x1ba>
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8c:	e0ad      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b94:	e0a9      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b96:	2304      	movs	r3, #4
 8003b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9c:	e0a5      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba4:	e0a1      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bac:	e09d      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <UART_SetConfig+0x2f0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d125      	bne.n	8003c04 <UART_SetConfig+0x218>
 8003bb8:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bc4:	d016      	beq.n	8003bf4 <UART_SetConfig+0x208>
 8003bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bc8:	d818      	bhi.n	8003bfc <UART_SetConfig+0x210>
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d00a      	beq.n	8003be4 <UART_SetConfig+0x1f8>
 8003bce:	2b80      	cmp	r3, #128	@ 0x80
 8003bd0:	d814      	bhi.n	8003bfc <UART_SetConfig+0x210>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x1f0>
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	d008      	beq.n	8003bec <UART_SetConfig+0x200>
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x210>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e082      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e07e      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e07a      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	e076      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c02:	e072      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <UART_SetConfig+0x2f4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12a      	bne.n	8003c64 <UART_SetConfig+0x278>
 8003c0e:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1c:	d01a      	beq.n	8003c54 <UART_SetConfig+0x268>
 8003c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c22:	d81b      	bhi.n	8003c5c <UART_SetConfig+0x270>
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c28:	d00c      	beq.n	8003c44 <UART_SetConfig+0x258>
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2e:	d815      	bhi.n	8003c5c <UART_SetConfig+0x270>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <UART_SetConfig+0x250>
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c38:	d008      	beq.n	8003c4c <UART_SetConfig+0x260>
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x270>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c42:	e052      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4a:	e04e      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c52:	e04a      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5a:	e046      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c62:	e042      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <UART_SetConfig+0x2dc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d13a      	bne.n	8003ce4 <UART_SetConfig+0x2f8>
 8003c6e:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <UART_SetConfig+0x2e4>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c7c:	d01a      	beq.n	8003cb4 <UART_SetConfig+0x2c8>
 8003c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0x2d0>
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c88:	d00c      	beq.n	8003ca4 <UART_SetConfig+0x2b8>
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8e:	d815      	bhi.n	8003cbc <UART_SetConfig+0x2d0>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <UART_SetConfig+0x2b0>
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d008      	beq.n	8003cac <UART_SetConfig+0x2c0>
 8003c9a:	e00f      	b.n	8003cbc <UART_SetConfig+0x2d0>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e022      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e01e      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	e01a      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cba:	e016      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc2:	e012      	b.n	8003cea <UART_SetConfig+0x2fe>
 8003cc4:	cfff69f3 	.word	0xcfff69f3
 8003cc8:	40008000 	.word	0x40008000
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40004c00 	.word	0x40004c00
 8003ce0:	40005000 	.word	0x40005000
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4aae      	ldr	r2, [pc, #696]	@ (8003fa8 <UART_SetConfig+0x5bc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	f040 8097 	bne.w	8003e24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d823      	bhi.n	8003d46 <UART_SetConfig+0x35a>
 8003cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <UART_SetConfig+0x318>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d37 	.word	0x08003d37
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d47 	.word	0x08003d47
 8003d24:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe ff1e 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d2e:	e010      	b.n	8003d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b9e      	ldr	r3, [pc, #632]	@ (8003fac <UART_SetConfig+0x5c0>)
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d34:	e00d      	b.n	8003d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe fea9 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8003d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d3c:	e009      	b.n	8003d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d44:	e005      	b.n	8003d52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8130 	beq.w	8003fba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	4a94      	ldr	r2, [pc, #592]	@ (8003fb0 <UART_SetConfig+0x5c4>)
 8003d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d305      	bcc.n	8003d8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d903      	bls.n	8003d92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d90:	e113      	b.n	8003fba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	2200      	movs	r2, #0
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	60fa      	str	r2, [r7, #12]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	4a84      	ldr	r2, [pc, #528]	@ (8003fb0 <UART_SetConfig+0x5c4>)
 8003da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db4:	f7fc fa84 	bl	80002c0 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	020b      	lsls	r3, r1, #8
 8003dca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dce:	0202      	lsls	r2, r0, #8
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	6849      	ldr	r1, [r1, #4]
 8003dd4:	0849      	lsrs	r1, r1, #1
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	4605      	mov	r5, r0
 8003ddc:	eb12 0804 	adds.w	r8, r2, r4
 8003de0:	eb43 0905 	adc.w	r9, r3, r5
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	469a      	mov	sl, r3
 8003dec:	4693      	mov	fp, r2
 8003dee:	4652      	mov	r2, sl
 8003df0:	465b      	mov	r3, fp
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc fa63 	bl	80002c0 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4613      	mov	r3, r2
 8003e00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e08:	d308      	bcc.n	8003e1c <UART_SetConfig+0x430>
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e10:	d204      	bcs.n	8003e1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a3a      	ldr	r2, [r7, #32]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	e0ce      	b.n	8003fba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e22:	e0ca      	b.n	8003fba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2c:	d166      	bne.n	8003efc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d827      	bhi.n	8003e86 <UART_SetConfig+0x49a>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <UART_SetConfig+0x450>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fe82 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e66:	e014      	b.n	8003e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe fe94 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e6e:	e010      	b.n	8003e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b4e      	ldr	r3, [pc, #312]	@ (8003fac <UART_SetConfig+0x5c0>)
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e74:	e00d      	b.n	8003e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fe fe09 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8003e7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e7c:	e009      	b.n	8003e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e84:	e005      	b.n	8003e92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8090 	beq.w	8003fba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	4a44      	ldr	r2, [pc, #272]	@ (8003fb0 <UART_SetConfig+0x5c4>)
 8003ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eac:	005a      	lsls	r2, r3, #1
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	441a      	add	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d916      	bls.n	8003ef4 <UART_SetConfig+0x508>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ecc:	d212      	bcs.n	8003ef4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f023 030f 	bic.w	r3, r3, #15
 8003ed6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	8bfb      	ldrh	r3, [r7, #30]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	8bfa      	ldrh	r2, [r7, #30]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	e062      	b.n	8003fba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003efa:	e05e      	b.n	8003fba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003efc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d828      	bhi.n	8003f56 <UART_SetConfig+0x56a>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <UART_SetConfig+0x520>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7fe fe1a 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f36:	e014      	b.n	8003f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fe2c 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f3e:	e010      	b.n	8003f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <UART_SetConfig+0x5c0>)
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f44:	e00d      	b.n	8003f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe fda1 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f4c:	e009      	b.n	8003f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f54:	e005      	b.n	8003f62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f60:	bf00      	nop
    }

    if (pclk != 0U)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d028      	beq.n	8003fba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <UART_SetConfig+0x5c4>)
 8003f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	441a      	add	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d910      	bls.n	8003fb4 <UART_SetConfig+0x5c8>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d20c      	bcs.n	8003fb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x5ce>
 8003fa6:	bf00      	nop
 8003fa8:	40008000 	.word	0x40008000
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	08005ab0 	.word	0x08005ab0
      }
      else
      {
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3730      	adds	r7, #48	@ 0x30
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e2:	d10a      	bne.n	80040fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b098      	sub	sp, #96	@ 0x60
 800412c:	af02      	add	r7, sp, #8
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004138:	f7fd f982 	bl	8001440 <HAL_GetTick>
 800413c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d12f      	bne.n	80041ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800414c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f88e 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d022      	beq.n	80041ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417a:	653b      	str	r3, [r7, #80]	@ 0x50
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e063      	b.n	8004274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d149      	bne.n	800424e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	2200      	movs	r2, #0
 80041c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f857 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03c      	beq.n	800424e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	623b      	str	r3, [r7, #32]
   return(result);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	60fb      	str	r3, [r7, #12]
   return(result);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004226:	61fa      	str	r2, [r7, #28]
 8004228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	69b9      	ldr	r1, [r7, #24]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	617b      	str	r3, [r7, #20]
   return(result);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e012      	b.n	8004274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3758      	adds	r7, #88	@ 0x58
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	e04f      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d04b      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fd f8d3 	bl	8001440 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e04e      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d037      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b80      	cmp	r3, #128	@ 0x80
 80042c2:	d034      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b40      	cmp	r3, #64	@ 0x40
 80042c8:	d031      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d110      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f920 	bl	8004526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2208      	movs	r2, #8
 80042ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e029      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d111      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f906 	bl	8004526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e00f      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d0a0      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b096      	sub	sp, #88	@ 0x58
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	@ 0x22
 8004380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02d      	beq.n	80043ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004394:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <UART_Start_Receive_DMA+0x140>)
 8004396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439e:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <UART_Start_Receive_DMA+0x144>)
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a8:	4a3d      	ldr	r2, [pc, #244]	@ (80044a0 <UART_Start_Receive_DMA+0x148>)
 80043aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b2:	2200      	movs	r2, #0
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3324      	adds	r3, #36	@ 0x24
 80043c2:	4619      	mov	r1, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	461a      	mov	r2, r3
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	f7fd f9fc 	bl	80017c8 <HAL_DMA_Start_IT>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2210      	movs	r2, #16
 80043da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e051      	b.n	800448e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d018      	beq.n	8004424 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004412:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800441e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004444:	637a      	str	r2, [r7, #52]	@ 0x34
 8004446:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800444a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	613b      	str	r3, [r7, #16]
   return(result);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004478:	623a      	str	r2, [r7, #32]
 800447a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	61bb      	str	r3, [r7, #24]
   return(result);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3758      	adds	r7, #88	@ 0x58
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	080045f3 	.word	0x080045f3
 800449c:	0800471f 	.word	0x0800471f
 80044a0:	0800475d 	.word	0x0800475d

080044a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b08f      	sub	sp, #60	@ 0x3c
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fe:	61ba      	str	r2, [r7, #24]
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800451a:	bf00      	nop
 800451c:	373c      	adds	r7, #60	@ 0x3c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004526:	b480      	push	{r7}
 8004528:	b095      	sub	sp, #84	@ 0x54
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	643b      	str	r3, [r7, #64]	@ 0x40
 800454e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e6      	bne.n	800452e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e3      	bne.n	8004560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d118      	bne.n	80045d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f023 0310 	bic.w	r3, r3, #16
 80045b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	613b      	str	r3, [r7, #16]
   return(result);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045e6:	bf00      	nop
 80045e8:	3754      	adds	r7, #84	@ 0x54
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b09c      	sub	sp, #112	@ 0x70
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d171      	bne.n	80046f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800460e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004610:	2200      	movs	r2, #0
 8004612:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004634:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004636:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800463a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004668:	647a      	str	r2, [r7, #68]	@ 0x44
 800466a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800466e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	623b      	str	r3, [r7, #32]
   return(result);
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004692:	663b      	str	r3, [r7, #96]	@ 0x60
 8004694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800469c:	633a      	str	r2, [r7, #48]	@ 0x30
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b2:	2220      	movs	r2, #32
 80046b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d118      	bne.n	80046f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	69b9      	ldr	r1, [r7, #24]
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	617b      	str	r3, [r7, #20]
   return(result);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f4:	2200      	movs	r2, #0
 80046f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004706:	4619      	mov	r1, r3
 8004708:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800470a:	f7ff f963 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800470e:	e002      	b.n	8004716 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004710:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004712:	f7ff f941 	bl	8003998 <HAL_UART_RxCpltCallback>
}
 8004716:	bf00      	nop
 8004718:	3770      	adds	r7, #112	@ 0x70
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d109      	bne.n	800474e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff f944 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800474c:	e002      	b.n	8004754 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff f92c 	bl	80039ac <HAL_UART_RxHalfCpltCallback>
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004778:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b80      	cmp	r3, #128	@ 0x80
 8004786:	d109      	bne.n	800479c <UART_DMAError+0x40>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b21      	cmp	r3, #33	@ 0x21
 800478c:	d106      	bne.n	800479c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff fe84 	bl	80044a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b40      	cmp	r3, #64	@ 0x40
 80047a8:	d109      	bne.n	80047be <UART_DMAError+0x62>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b22      	cmp	r3, #34	@ 0x22
 80047ae:	d106      	bne.n	80047be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80047b8:	6978      	ldr	r0, [r7, #20]
 80047ba:	f7ff feb4 	bl	8004526 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff f8f6 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff f8e0 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	60bb      	str	r3, [r7, #8]
   return(result);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6979      	ldr	r1, [r7, #20]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff f897 	bl	8003984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004856:	bf00      	nop
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e027      	b.n	8004900 <HAL_UARTEx_DisableFifoMode+0x66>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	@ 0x24
 80048bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e02d      	b.n	8004980 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f84f 	bl	8004a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e02d      	b.n	80049fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	@ 0x24
 80049ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f811 	bl	8004a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d108      	bne.n	8004a26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a24:	e031      	b.n	8004a8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a26:	2308      	movs	r3, #8
 8004a28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	0f5b      	lsrs	r3, r3, #29
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4e:	7bbb      	ldrb	r3, [r7, #14]
 8004a50:	7b3a      	ldrb	r2, [r7, #12]
 8004a52:	4911      	ldr	r1, [pc, #68]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x94>)
 8004a54:	5c8a      	ldrb	r2, [r1, r2]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a5a:	7b3a      	ldrb	r2, [r7, #12]
 8004a5c:	490f      	ldr	r1, [pc, #60]	@ (8004a9c <UARTEx_SetNbDataToProcess+0x98>)
 8004a5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	7b7a      	ldrb	r2, [r7, #13]
 8004a70:	4909      	ldr	r1, [pc, #36]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x94>)
 8004a72:	5c8a      	ldrb	r2, [r1, r2]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a78:	7b7a      	ldrb	r2, [r7, #13]
 8004a7a:	4908      	ldr	r1, [pc, #32]	@ (8004a9c <UARTEx_SetNbDataToProcess+0x98>)
 8004a7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	08005ac8 	.word	0x08005ac8
 8004a9c:	08005ad0 	.word	0x08005ad0

08004aa0 <rand>:
 8004aa0:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <rand+0x5c>)
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	681c      	ldr	r4, [r3, #0]
 8004aa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004aa8:	b9b3      	cbnz	r3, 8004ad8 <rand+0x38>
 8004aaa:	2018      	movs	r0, #24
 8004aac:	f000 fa20 	bl	8004ef0 <malloc>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ab4:	b920      	cbnz	r0, 8004ac0 <rand+0x20>
 8004ab6:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <rand+0x60>)
 8004ab8:	4812      	ldr	r0, [pc, #72]	@ (8004b04 <rand+0x64>)
 8004aba:	2152      	movs	r1, #82	@ 0x52
 8004abc:	f000 f9b0 	bl	8004e20 <__assert_func>
 8004ac0:	4911      	ldr	r1, [pc, #68]	@ (8004b08 <rand+0x68>)
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <rand+0x6c>)
 8004ac4:	e9c0 1300 	strd	r1, r3, [r0]
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <rand+0x70>)
 8004aca:	6083      	str	r3, [r0, #8]
 8004acc:	230b      	movs	r3, #11
 8004ace:	8183      	strh	r3, [r0, #12]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ad8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ada:	480e      	ldr	r0, [pc, #56]	@ (8004b14 <rand+0x74>)
 8004adc:	690b      	ldr	r3, [r1, #16]
 8004ade:	694c      	ldr	r4, [r1, #20]
 8004ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <rand+0x78>)
 8004ae2:	4358      	muls	r0, r3
 8004ae4:	fb02 0004 	mla	r0, r2, r4, r0
 8004ae8:	fba3 3202 	umull	r3, r2, r3, r2
 8004aec:	3301      	adds	r3, #1
 8004aee:	eb40 0002 	adc.w	r0, r0, r2
 8004af2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004af6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	20000054 	.word	0x20000054
 8004b00:	08005ad8 	.word	0x08005ad8
 8004b04:	08005aef 	.word	0x08005aef
 8004b08:	abcd330e 	.word	0xabcd330e
 8004b0c:	e66d1234 	.word	0xe66d1234
 8004b10:	0005deec 	.word	0x0005deec
 8004b14:	5851f42d 	.word	0x5851f42d
 8004b18:	4c957f2d 	.word	0x4c957f2d

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	@ 0x5c
 8004b3a:	f000 f8f4 	bl	8004d26 <memset>
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <std+0x58>)
 8004b40:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <std+0x5c>)
 8004b44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b46:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <std+0x60>)
 8004b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x64>)
 8004b4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <std+0x68>)
 8004b50:	6224      	str	r4, [r4, #32]
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d006      	beq.n	8004b64 <std+0x48>
 8004b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b5a:	4294      	cmp	r4, r2
 8004b5c:	d002      	beq.n	8004b64 <std+0x48>
 8004b5e:	33d0      	adds	r3, #208	@ 0xd0
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d105      	bne.n	8004b70 <std+0x54>
 8004b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f000 b954 	b.w	8004e18 <__retarget_lock_init_recursive>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	08004ca1 	.word	0x08004ca1
 8004b78:	08004cc3 	.word	0x08004cc3
 8004b7c:	08004cfb 	.word	0x08004cfb
 8004b80:	08004d1f 	.word	0x08004d1f
 8004b84:	200002f8 	.word	0x200002f8

08004b88 <stdio_exit_handler>:
 8004b88:	4a02      	ldr	r2, [pc, #8]	@ (8004b94 <stdio_exit_handler+0xc>)
 8004b8a:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <stdio_exit_handler+0x10>)
 8004b8c:	4803      	ldr	r0, [pc, #12]	@ (8004b9c <stdio_exit_handler+0x14>)
 8004b8e:	f000 b869 	b.w	8004c64 <_fwalk_sglue>
 8004b92:	bf00      	nop
 8004b94:	20000048 	.word	0x20000048
 8004b98:	08005165 	.word	0x08005165
 8004b9c:	20000058 	.word	0x20000058

08004ba0 <cleanup_stdio>:
 8004ba0:	6841      	ldr	r1, [r0, #4]
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <cleanup_stdio+0x34>)
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d001      	beq.n	8004bb0 <cleanup_stdio+0x10>
 8004bac:	f000 fada 	bl	8005164 <_fflush_r>
 8004bb0:	68a1      	ldr	r1, [r4, #8]
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <cleanup_stdio+0x38>)
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <cleanup_stdio+0x1e>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fad3 	bl	8005164 <_fflush_r>
 8004bbe:	68e1      	ldr	r1, [r4, #12]
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <cleanup_stdio+0x3c>)
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d004      	beq.n	8004bd0 <cleanup_stdio+0x30>
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f000 baca 	b.w	8005164 <_fflush_r>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200002f8 	.word	0x200002f8
 8004bd8:	20000360 	.word	0x20000360
 8004bdc:	200003c8 	.word	0x200003c8

08004be0 <global_stdio_init.part.0>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <global_stdio_init.part.0+0x30>)
 8004be4:	4c0b      	ldr	r4, [pc, #44]	@ (8004c14 <global_stdio_init.part.0+0x34>)
 8004be6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c18 <global_stdio_init.part.0+0x38>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4620      	mov	r0, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	2104      	movs	r1, #4
 8004bf0:	f7ff ff94 	bl	8004b1c <std>
 8004bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2109      	movs	r1, #9
 8004bfc:	f7ff ff8e 	bl	8004b1c <std>
 8004c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c04:	2202      	movs	r2, #2
 8004c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	f7ff bf86 	b.w	8004b1c <std>
 8004c10:	20000430 	.word	0x20000430
 8004c14:	200002f8 	.word	0x200002f8
 8004c18:	08004b89 	.word	0x08004b89

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 b8fc 	b.w	8004e1a <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000439 	.word	0x20000439

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 b8f7 	b.w	8004e1c <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000439 	.word	0x20000439

08004c34 <__sinit>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	f7ff fff0 	bl	8004c1c <__sfp_lock_acquire>
 8004c3c:	6a23      	ldr	r3, [r4, #32]
 8004c3e:	b11b      	cbz	r3, 8004c48 <__sinit+0x14>
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f7ff bff0 	b.w	8004c28 <__sfp_lock_release>
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__sinit+0x28>)
 8004c4a:	6223      	str	r3, [r4, #32]
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <__sinit+0x2c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f5      	bne.n	8004c40 <__sinit+0xc>
 8004c54:	f7ff ffc4 	bl	8004be0 <global_stdio_init.part.0>
 8004c58:	e7f2      	b.n	8004c40 <__sinit+0xc>
 8004c5a:	bf00      	nop
 8004c5c:	08004ba1 	.word	0x08004ba1
 8004c60:	20000430 	.word	0x20000430

08004c64 <_fwalk_sglue>:
 8004c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c68:	4607      	mov	r7, r0
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c74:	f1b9 0901 	subs.w	r9, r9, #1
 8004c78:	d505      	bpl.n	8004c86 <_fwalk_sglue+0x22>
 8004c7a:	6824      	ldr	r4, [r4, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d1f7      	bne.n	8004c70 <_fwalk_sglue+0xc>
 8004c80:	4630      	mov	r0, r6
 8004c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d907      	bls.n	8004c9c <_fwalk_sglue+0x38>
 8004c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c90:	3301      	adds	r3, #1
 8004c92:	d003      	beq.n	8004c9c <_fwalk_sglue+0x38>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	4306      	orrs	r6, r0
 8004c9c:	3568      	adds	r5, #104	@ 0x68
 8004c9e:	e7e9      	b.n	8004c74 <_fwalk_sglue+0x10>

08004ca0 <__sread>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	f000 f868 	bl	8004d7c <_read_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	bfab      	itete	ge
 8004cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb4:	181b      	addge	r3, r3, r0
 8004cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cba:	bfac      	ite	ge
 8004cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cbe:	81a3      	strhlt	r3, [r4, #12]
 8004cc0:	bd10      	pop	{r4, pc}

08004cc2 <__swrite>:
 8004cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	05db      	lsls	r3, r3, #23
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	d505      	bpl.n	8004ce0 <__swrite+0x1e>
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	2302      	movs	r3, #2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f000 f83c 	bl	8004d58 <_lseek_r>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	4632      	mov	r2, r6
 8004cee:	463b      	mov	r3, r7
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	f000 b853 	b.w	8004da0 <_write_r>

08004cfa <__sseek>:
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 f829 	bl	8004d58 <_lseek_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	bf15      	itete	ne
 8004d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d16:	81a3      	strheq	r3, [r4, #12]
 8004d18:	bf18      	it	ne
 8004d1a:	81a3      	strhne	r3, [r4, #12]
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <__sclose>:
 8004d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d22:	f000 b809 	b.w	8004d38 <_close_r>

08004d26 <memset>:
 8004d26:	4402      	add	r2, r0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d100      	bne.n	8004d30 <memset+0xa>
 8004d2e:	4770      	bx	lr
 8004d30:	f803 1b01 	strb.w	r1, [r3], #1
 8004d34:	e7f9      	b.n	8004d2a <memset+0x4>
	...

08004d38 <_close_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d06      	ldr	r5, [pc, #24]	@ (8004d54 <_close_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	602b      	str	r3, [r5, #0]
 8004d44:	f7fc fa72 	bl	800122c <_close>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_close_r+0x1a>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_close_r+0x1a>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20000434 	.word	0x20000434

08004d58 <_lseek_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d07      	ldr	r5, [pc, #28]	@ (8004d78 <_lseek_r+0x20>)
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	602a      	str	r2, [r5, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7fc fa87 	bl	800127a <_lseek>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_lseek_r+0x1e>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_lseek_r+0x1e>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000434 	.word	0x20000434

08004d7c <_read_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d07      	ldr	r5, [pc, #28]	@ (8004d9c <_read_r+0x20>)
 8004d80:	4604      	mov	r4, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fc fa15 	bl	80011ba <_read>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_read_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_read_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000434 	.word	0x20000434

08004da0 <_write_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	@ (8004dc0 <_write_r+0x20>)
 8004da4:	4604      	mov	r4, r0
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fc fa20 	bl	80011f4 <_write>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_write_r+0x1e>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_write_r+0x1e>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000434 	.word	0x20000434

08004dc4 <__errno>:
 8004dc4:	4b01      	ldr	r3, [pc, #4]	@ (8004dcc <__errno+0x8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000054 	.word	0x20000054

08004dd0 <__libc_init_array>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8004e08 <__libc_init_array+0x38>)
 8004dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8004e0c <__libc_init_array+0x3c>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	d109      	bne.n	8004df4 <__libc_init_array+0x24>
 8004de0:	4d0b      	ldr	r5, [pc, #44]	@ (8004e10 <__libc_init_array+0x40>)
 8004de2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e14 <__libc_init_array+0x44>)
 8004de4:	f000 fe3a 	bl	8005a5c <_init>
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	2600      	movs	r6, #0
 8004dee:	42a6      	cmp	r6, r4
 8004df0:	d105      	bne.n	8004dfe <__libc_init_array+0x2e>
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df8:	4798      	blx	r3
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7ee      	b.n	8004ddc <__libc_init_array+0xc>
 8004dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e02:	4798      	blx	r3
 8004e04:	3601      	adds	r6, #1
 8004e06:	e7f2      	b.n	8004dee <__libc_init_array+0x1e>
 8004e08:	08005bc0 	.word	0x08005bc0
 8004e0c:	08005bc0 	.word	0x08005bc0
 8004e10:	08005bc0 	.word	0x08005bc0
 8004e14:	08005bc4 	.word	0x08005bc4

08004e18 <__retarget_lock_init_recursive>:
 8004e18:	4770      	bx	lr

08004e1a <__retarget_lock_acquire_recursive>:
 8004e1a:	4770      	bx	lr

08004e1c <__retarget_lock_release_recursive>:
 8004e1c:	4770      	bx	lr
	...

08004e20 <__assert_func>:
 8004e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e22:	4614      	mov	r4, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <__assert_func+0x2c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	68d8      	ldr	r0, [r3, #12]
 8004e2e:	b954      	cbnz	r4, 8004e46 <__assert_func+0x26>
 8004e30:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <__assert_func+0x30>)
 8004e32:	461c      	mov	r4, r3
 8004e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e38:	9100      	str	r1, [sp, #0]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	4905      	ldr	r1, [pc, #20]	@ (8004e54 <__assert_func+0x34>)
 8004e3e:	f000 f9b9 	bl	80051b4 <fiprintf>
 8004e42:	f000 f9d9 	bl	80051f8 <abort>
 8004e46:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <__assert_func+0x38>)
 8004e48:	e7f4      	b.n	8004e34 <__assert_func+0x14>
 8004e4a:	bf00      	nop
 8004e4c:	20000054 	.word	0x20000054
 8004e50:	08005b82 	.word	0x08005b82
 8004e54:	08005b54 	.word	0x08005b54
 8004e58:	08005b47 	.word	0x08005b47

08004e5c <_free_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d041      	beq.n	8004ee8 <_free_r+0x8c>
 8004e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e68:	1f0c      	subs	r4, r1, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfb8      	it	lt
 8004e6e:	18e4      	addlt	r4, r4, r3
 8004e70:	f000 f8e8 	bl	8005044 <__malloc_lock>
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <_free_r+0x90>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	b933      	cbnz	r3, 8004e88 <_free_r+0x2c>
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	6014      	str	r4, [r2, #0]
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e84:	f000 b8e4 	b.w	8005050 <__malloc_unlock>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x42>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	e7ed      	b.n	8004e7a <_free_r+0x1e>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x4c>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x42>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1850      	adds	r0, r2, r1
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x6c>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	1850      	adds	r0, r2, r1
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1e0      	bne.n	8004e7e <_free_r+0x22>
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4408      	add	r0, r1
 8004ec4:	6010      	str	r0, [r2, #0]
 8004ec6:	e7da      	b.n	8004e7e <_free_r+0x22>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x74>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	e7d6      	b.n	8004e7e <_free_r+0x22>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7ca      	b.n	8004e7e <_free_r+0x22>
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	bf00      	nop
 8004eec:	20000440 	.word	0x20000440

08004ef0 <malloc>:
 8004ef0:	4b02      	ldr	r3, [pc, #8]	@ (8004efc <malloc+0xc>)
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f000 b825 	b.w	8004f44 <_malloc_r>
 8004efa:	bf00      	nop
 8004efc:	20000054 	.word	0x20000054

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 f964 	bl	80051d8 <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f95f 	bl	80051d8 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f950 	bl	80051d8 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	2000043c 	.word	0x2000043c

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 f91a 	bl	80051d8 <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	20000440 	.word	0x20000440

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bee8 	b.w	8004e1a <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	20000438 	.word	0x20000438

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff bee3 	b.w	8004e1c <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	20000438 	.word	0x20000438

0800505c <__sflush_r>:
 800505c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005064:	0716      	lsls	r6, r2, #28
 8005066:	4605      	mov	r5, r0
 8005068:	460c      	mov	r4, r1
 800506a:	d454      	bmi.n	8005116 <__sflush_r+0xba>
 800506c:	684b      	ldr	r3, [r1, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dc02      	bgt.n	8005078 <__sflush_r+0x1c>
 8005072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	dd48      	ble.n	800510a <__sflush_r+0xae>
 8005078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800507a:	2e00      	cmp	r6, #0
 800507c:	d045      	beq.n	800510a <__sflush_r+0xae>
 800507e:	2300      	movs	r3, #0
 8005080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005084:	682f      	ldr	r7, [r5, #0]
 8005086:	6a21      	ldr	r1, [r4, #32]
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	d030      	beq.n	80050ee <__sflush_r+0x92>
 800508c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	0759      	lsls	r1, r3, #29
 8005092:	d505      	bpl.n	80050a0 <__sflush_r+0x44>
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800509a:	b10b      	cbz	r3, 80050a0 <__sflush_r+0x44>
 800509c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050a4:	6a21      	ldr	r1, [r4, #32]
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b0      	blx	r6
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	d106      	bne.n	80050be <__sflush_r+0x62>
 80050b0:	6829      	ldr	r1, [r5, #0]
 80050b2:	291d      	cmp	r1, #29
 80050b4:	d82b      	bhi.n	800510e <__sflush_r+0xb2>
 80050b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <__sflush_r+0x104>)
 80050b8:	410a      	asrs	r2, r1
 80050ba:	07d6      	lsls	r6, r2, #31
 80050bc:	d427      	bmi.n	800510e <__sflush_r+0xb2>
 80050be:	2200      	movs	r2, #0
 80050c0:	6062      	str	r2, [r4, #4]
 80050c2:	04d9      	lsls	r1, r3, #19
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	d504      	bpl.n	80050d4 <__sflush_r+0x78>
 80050ca:	1c42      	adds	r2, r0, #1
 80050cc:	d101      	bne.n	80050d2 <__sflush_r+0x76>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	b903      	cbnz	r3, 80050d4 <__sflush_r+0x78>
 80050d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80050d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d6:	602f      	str	r7, [r5, #0]
 80050d8:	b1b9      	cbz	r1, 800510a <__sflush_r+0xae>
 80050da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050de:	4299      	cmp	r1, r3
 80050e0:	d002      	beq.n	80050e8 <__sflush_r+0x8c>
 80050e2:	4628      	mov	r0, r5
 80050e4:	f7ff feba 	bl	8004e5c <_free_r>
 80050e8:	2300      	movs	r3, #0
 80050ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ec:	e00d      	b.n	800510a <__sflush_r+0xae>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	4602      	mov	r2, r0
 80050f6:	1c50      	adds	r0, r2, #1
 80050f8:	d1c9      	bne.n	800508e <__sflush_r+0x32>
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0c6      	beq.n	800508e <__sflush_r+0x32>
 8005100:	2b1d      	cmp	r3, #29
 8005102:	d001      	beq.n	8005108 <__sflush_r+0xac>
 8005104:	2b16      	cmp	r3, #22
 8005106:	d11e      	bne.n	8005146 <__sflush_r+0xea>
 8005108:	602f      	str	r7, [r5, #0]
 800510a:	2000      	movs	r0, #0
 800510c:	e022      	b.n	8005154 <__sflush_r+0xf8>
 800510e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005112:	b21b      	sxth	r3, r3
 8005114:	e01b      	b.n	800514e <__sflush_r+0xf2>
 8005116:	690f      	ldr	r7, [r1, #16]
 8005118:	2f00      	cmp	r7, #0
 800511a:	d0f6      	beq.n	800510a <__sflush_r+0xae>
 800511c:	0793      	lsls	r3, r2, #30
 800511e:	680e      	ldr	r6, [r1, #0]
 8005120:	bf08      	it	eq
 8005122:	694b      	ldreq	r3, [r1, #20]
 8005124:	600f      	str	r7, [r1, #0]
 8005126:	bf18      	it	ne
 8005128:	2300      	movne	r3, #0
 800512a:	eba6 0807 	sub.w	r8, r6, r7
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	f1b8 0f00 	cmp.w	r8, #0
 8005134:	dde9      	ble.n	800510a <__sflush_r+0xae>
 8005136:	6a21      	ldr	r1, [r4, #32]
 8005138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800513a:	4643      	mov	r3, r8
 800513c:	463a      	mov	r2, r7
 800513e:	4628      	mov	r0, r5
 8005140:	47b0      	blx	r6
 8005142:	2800      	cmp	r0, #0
 8005144:	dc08      	bgt.n	8005158 <__sflush_r+0xfc>
 8005146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005158:	4407      	add	r7, r0
 800515a:	eba8 0800 	sub.w	r8, r8, r0
 800515e:	e7e7      	b.n	8005130 <__sflush_r+0xd4>
 8005160:	dfbffffe 	.word	0xdfbffffe

08005164 <_fflush_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	690b      	ldr	r3, [r1, #16]
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	b913      	cbnz	r3, 8005174 <_fflush_r+0x10>
 800516e:	2500      	movs	r5, #0
 8005170:	4628      	mov	r0, r5
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	b118      	cbz	r0, 800517e <_fflush_r+0x1a>
 8005176:	6a03      	ldr	r3, [r0, #32]
 8005178:	b90b      	cbnz	r3, 800517e <_fflush_r+0x1a>
 800517a:	f7ff fd5b 	bl	8004c34 <__sinit>
 800517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f3      	beq.n	800516e <_fflush_r+0xa>
 8005186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005188:	07d0      	lsls	r0, r2, #31
 800518a:	d404      	bmi.n	8005196 <_fflush_r+0x32>
 800518c:	0599      	lsls	r1, r3, #22
 800518e:	d402      	bmi.n	8005196 <_fflush_r+0x32>
 8005190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005192:	f7ff fe42 	bl	8004e1a <__retarget_lock_acquire_recursive>
 8005196:	4628      	mov	r0, r5
 8005198:	4621      	mov	r1, r4
 800519a:	f7ff ff5f 	bl	800505c <__sflush_r>
 800519e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051a0:	07da      	lsls	r2, r3, #31
 80051a2:	4605      	mov	r5, r0
 80051a4:	d4e4      	bmi.n	8005170 <_fflush_r+0xc>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	059b      	lsls	r3, r3, #22
 80051aa:	d4e1      	bmi.n	8005170 <_fflush_r+0xc>
 80051ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ae:	f7ff fe35 	bl	8004e1c <__retarget_lock_release_recursive>
 80051b2:	e7dd      	b.n	8005170 <_fflush_r+0xc>

080051b4 <fiprintf>:
 80051b4:	b40e      	push	{r1, r2, r3}
 80051b6:	b503      	push	{r0, r1, lr}
 80051b8:	4601      	mov	r1, r0
 80051ba:	ab03      	add	r3, sp, #12
 80051bc:	4805      	ldr	r0, [pc, #20]	@ (80051d4 <fiprintf+0x20>)
 80051be:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	f000 f847 	bl	8005258 <_vfiprintf_r>
 80051ca:	b002      	add	sp, #8
 80051cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d0:	b003      	add	sp, #12
 80051d2:	4770      	bx	lr
 80051d4:	20000054 	.word	0x20000054

080051d8 <_sbrk_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4d06      	ldr	r5, [pc, #24]	@ (80051f4 <_sbrk_r+0x1c>)
 80051dc:	2300      	movs	r3, #0
 80051de:	4604      	mov	r4, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	602b      	str	r3, [r5, #0]
 80051e4:	f7fc f856 	bl	8001294 <_sbrk>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_sbrk_r+0x1a>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_sbrk_r+0x1a>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	20000434 	.word	0x20000434

080051f8 <abort>:
 80051f8:	b508      	push	{r3, lr}
 80051fa:	2006      	movs	r0, #6
 80051fc:	f000 fb8e 	bl	800591c <raise>
 8005200:	2001      	movs	r0, #1
 8005202:	f7fb ffcf 	bl	80011a4 <_exit>

08005206 <__sfputc_r>:
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	3b01      	subs	r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	b410      	push	{r4}
 800520e:	6093      	str	r3, [r2, #8]
 8005210:	da08      	bge.n	8005224 <__sfputc_r+0x1e>
 8005212:	6994      	ldr	r4, [r2, #24]
 8005214:	42a3      	cmp	r3, r4
 8005216:	db01      	blt.n	800521c <__sfputc_r+0x16>
 8005218:	290a      	cmp	r1, #10
 800521a:	d103      	bne.n	8005224 <__sfputc_r+0x1e>
 800521c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005220:	f000 bac0 	b.w	80057a4 <__swbuf_r>
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	1c58      	adds	r0, r3, #1
 8005228:	6010      	str	r0, [r2, #0]
 800522a:	7019      	strb	r1, [r3, #0]
 800522c:	4608      	mov	r0, r1
 800522e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005232:	4770      	bx	lr

08005234 <__sfputs_r>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	4614      	mov	r4, r2
 800523c:	18d5      	adds	r5, r2, r3
 800523e:	42ac      	cmp	r4, r5
 8005240:	d101      	bne.n	8005246 <__sfputs_r+0x12>
 8005242:	2000      	movs	r0, #0
 8005244:	e007      	b.n	8005256 <__sfputs_r+0x22>
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	463a      	mov	r2, r7
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff ffda 	bl	8005206 <__sfputc_r>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d1f3      	bne.n	800523e <__sfputs_r+0xa>
 8005256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005258 <_vfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460d      	mov	r5, r1
 800525e:	b09d      	sub	sp, #116	@ 0x74
 8005260:	4614      	mov	r4, r2
 8005262:	4698      	mov	r8, r3
 8005264:	4606      	mov	r6, r0
 8005266:	b118      	cbz	r0, 8005270 <_vfiprintf_r+0x18>
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b90b      	cbnz	r3, 8005270 <_vfiprintf_r+0x18>
 800526c:	f7ff fce2 	bl	8004c34 <__sinit>
 8005270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d405      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	059a      	lsls	r2, r3, #22
 800527a:	d402      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 800527c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800527e:	f7ff fdcc 	bl	8004e1a <__retarget_lock_acquire_recursive>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	d501      	bpl.n	800528c <_vfiprintf_r+0x34>
 8005288:	692b      	ldr	r3, [r5, #16]
 800528a:	b99b      	cbnz	r3, 80052b4 <_vfiprintf_r+0x5c>
 800528c:	4629      	mov	r1, r5
 800528e:	4630      	mov	r0, r6
 8005290:	f000 fac6 	bl	8005820 <__swsetup_r>
 8005294:	b170      	cbz	r0, 80052b4 <_vfiprintf_r+0x5c>
 8005296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005298:	07dc      	lsls	r4, r3, #31
 800529a:	d504      	bpl.n	80052a6 <_vfiprintf_r+0x4e>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	0598      	lsls	r0, r3, #22
 80052aa:	d4f7      	bmi.n	800529c <_vfiprintf_r+0x44>
 80052ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ae:	f7ff fdb5 	bl	8004e1c <__retarget_lock_release_recursive>
 80052b2:	e7f3      	b.n	800529c <_vfiprintf_r+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b8:	2320      	movs	r3, #32
 80052ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052be:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c2:	2330      	movs	r3, #48	@ 0x30
 80052c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005474 <_vfiprintf_r+0x21c>
 80052c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052cc:	f04f 0901 	mov.w	r9, #1
 80052d0:	4623      	mov	r3, r4
 80052d2:	469a      	mov	sl, r3
 80052d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d8:	b10a      	cbz	r2, 80052de <_vfiprintf_r+0x86>
 80052da:	2a25      	cmp	r2, #37	@ 0x25
 80052dc:	d1f9      	bne.n	80052d2 <_vfiprintf_r+0x7a>
 80052de:	ebba 0b04 	subs.w	fp, sl, r4
 80052e2:	d00b      	beq.n	80052fc <_vfiprintf_r+0xa4>
 80052e4:	465b      	mov	r3, fp
 80052e6:	4622      	mov	r2, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff ffa2 	bl	8005234 <__sfputs_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	f000 80a7 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052f8:	445a      	add	r2, fp
 80052fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80052fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809f 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800531c:	931a      	str	r3, [sp, #104]	@ 0x68
 800531e:	4654      	mov	r4, sl
 8005320:	2205      	movs	r2, #5
 8005322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005326:	4853      	ldr	r0, [pc, #332]	@ (8005474 <_vfiprintf_r+0x21c>)
 8005328:	f7fa ff7a 	bl	8000220 <memchr>
 800532c:	9a04      	ldr	r2, [sp, #16]
 800532e:	b9d8      	cbnz	r0, 8005368 <_vfiprintf_r+0x110>
 8005330:	06d1      	lsls	r1, r2, #27
 8005332:	bf44      	itt	mi
 8005334:	2320      	movmi	r3, #32
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533a:	0713      	lsls	r3, r2, #28
 800533c:	bf44      	itt	mi
 800533e:	232b      	movmi	r3, #43	@ 0x2b
 8005340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005344:	f89a 3000 	ldrb.w	r3, [sl]
 8005348:	2b2a      	cmp	r3, #42	@ 0x2a
 800534a:	d015      	beq.n	8005378 <_vfiprintf_r+0x120>
 800534c:	9a07      	ldr	r2, [sp, #28]
 800534e:	4654      	mov	r4, sl
 8005350:	2000      	movs	r0, #0
 8005352:	f04f 0c0a 	mov.w	ip, #10
 8005356:	4621      	mov	r1, r4
 8005358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535c:	3b30      	subs	r3, #48	@ 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d94b      	bls.n	80053fa <_vfiprintf_r+0x1a2>
 8005362:	b1b0      	cbz	r0, 8005392 <_vfiprintf_r+0x13a>
 8005364:	9207      	str	r2, [sp, #28]
 8005366:	e014      	b.n	8005392 <_vfiprintf_r+0x13a>
 8005368:	eba0 0308 	sub.w	r3, r0, r8
 800536c:	fa09 f303 	lsl.w	r3, r9, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	46a2      	mov	sl, r4
 8005376:	e7d2      	b.n	800531e <_vfiprintf_r+0xc6>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfbb      	ittet	lt
 8005384:	425b      	neglt	r3, r3
 8005386:	f042 0202 	orrlt.w	r2, r2, #2
 800538a:	9307      	strge	r3, [sp, #28]
 800538c:	9307      	strlt	r3, [sp, #28]
 800538e:	bfb8      	it	lt
 8005390:	9204      	strlt	r2, [sp, #16]
 8005392:	7823      	ldrb	r3, [r4, #0]
 8005394:	2b2e      	cmp	r3, #46	@ 0x2e
 8005396:	d10a      	bne.n	80053ae <_vfiprintf_r+0x156>
 8005398:	7863      	ldrb	r3, [r4, #1]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d132      	bne.n	8005404 <_vfiprintf_r+0x1ac>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	1d1a      	adds	r2, r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	9203      	str	r2, [sp, #12]
 80053a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053aa:	3402      	adds	r4, #2
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005484 <_vfiprintf_r+0x22c>
 80053b2:	7821      	ldrb	r1, [r4, #0]
 80053b4:	2203      	movs	r2, #3
 80053b6:	4650      	mov	r0, sl
 80053b8:	f7fa ff32 	bl	8000220 <memchr>
 80053bc:	b138      	cbz	r0, 80053ce <_vfiprintf_r+0x176>
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	eba0 000a 	sub.w	r0, r0, sl
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	4082      	lsls	r2, r0
 80053c8:	4313      	orrs	r3, r2
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	4829      	ldr	r0, [pc, #164]	@ (8005478 <_vfiprintf_r+0x220>)
 80053d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053d8:	2206      	movs	r2, #6
 80053da:	f7fa ff21 	bl	8000220 <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d03f      	beq.n	8005462 <_vfiprintf_r+0x20a>
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <_vfiprintf_r+0x224>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_vfiprintf_r+0x1d6>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f4:	443b      	add	r3, r7
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	e76a      	b.n	80052d0 <_vfiprintf_r+0x78>
 80053fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fe:	460c      	mov	r4, r1
 8005400:	2001      	movs	r0, #1
 8005402:	e7a8      	b.n	8005356 <_vfiprintf_r+0xfe>
 8005404:	2300      	movs	r3, #0
 8005406:	3401      	adds	r4, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	@ 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_vfiprintf_r+0x1cc>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c6      	beq.n	80053ae <_vfiprintf_r+0x156>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c4      	b.n	80053ae <_vfiprintf_r+0x156>
 8005424:	fb0c 2101 	mla	r1, ip, r1, r2
 8005428:	4604      	mov	r4, r0
 800542a:	2301      	movs	r3, #1
 800542c:	e7f0      	b.n	8005410 <_vfiprintf_r+0x1b8>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <_vfiprintf_r+0x228>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4630      	mov	r0, r6
 800543a:	f3af 8000 	nop.w
 800543e:	4607      	mov	r7, r0
 8005440:	1c78      	adds	r0, r7, #1
 8005442:	d1d6      	bne.n	80053f2 <_vfiprintf_r+0x19a>
 8005444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005446:	07d9      	lsls	r1, r3, #31
 8005448:	d405      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d402      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 8005450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005452:	f7ff fce3 	bl	8004e1c <__retarget_lock_release_recursive>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	065b      	lsls	r3, r3, #25
 800545a:	f53f af1f 	bmi.w	800529c <_vfiprintf_r+0x44>
 800545e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005460:	e71e      	b.n	80052a0 <_vfiprintf_r+0x48>
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462a      	mov	r2, r5
 8005468:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <_vfiprintf_r+0x228>)
 800546a:	a904      	add	r1, sp, #16
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f879 	bl	8005564 <_printf_i>
 8005472:	e7e4      	b.n	800543e <_vfiprintf_r+0x1e6>
 8005474:	08005b83 	.word	0x08005b83
 8005478:	08005b8d 	.word	0x08005b8d
 800547c:	00000000 	.word	0x00000000
 8005480:	08005235 	.word	0x08005235
 8005484:	08005b89 	.word	0x08005b89

08005488 <_printf_common>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	4616      	mov	r6, r2
 800548e:	4698      	mov	r8, r3
 8005490:	688a      	ldr	r2, [r1, #8]
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005498:	4293      	cmp	r3, r2
 800549a:	bfb8      	it	lt
 800549c:	4613      	movlt	r3, r2
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a4:	4607      	mov	r7, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b10a      	cbz	r2, 80054ae <_printf_common+0x26>
 80054aa:	3301      	adds	r3, #1
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	6833      	ldrmi	r3, [r6, #0]
 80054b6:	3302      	addmi	r3, #2
 80054b8:	6033      	strmi	r3, [r6, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d106      	bne.n	80054d0 <_printf_common+0x48>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	6832      	ldr	r2, [r6, #0]
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dc26      	bgt.n	800551e <_printf_common+0x96>
 80054d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	3b00      	subs	r3, #0
 80054d8:	bf18      	it	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	0692      	lsls	r2, r2, #26
 80054de:	d42b      	bmi.n	8005538 <_printf_common+0xb0>
 80054e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e4:	4641      	mov	r1, r8
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c8      	blx	r9
 80054ea:	3001      	adds	r0, #1
 80054ec:	d01e      	beq.n	800552c <_printf_common+0xa4>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf02      	ittt	eq
 80054fa:	68e5      	ldreq	r5, [r4, #12]
 80054fc:	6833      	ldreq	r3, [r6, #0]
 80054fe:	1aed      	subeq	r5, r5, r3
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	bf0c      	ite	eq
 8005504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005508:	2500      	movne	r5, #0
 800550a:	4293      	cmp	r3, r2
 800550c:	bfc4      	itt	gt
 800550e:	1a9b      	subgt	r3, r3, r2
 8005510:	18ed      	addgt	r5, r5, r3
 8005512:	2600      	movs	r6, #0
 8005514:	341a      	adds	r4, #26
 8005516:	42b5      	cmp	r5, r6
 8005518:	d11a      	bne.n	8005550 <_printf_common+0xc8>
 800551a:	2000      	movs	r0, #0
 800551c:	e008      	b.n	8005530 <_printf_common+0xa8>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4641      	mov	r1, r8
 8005524:	4638      	mov	r0, r7
 8005526:	47c8      	blx	r9
 8005528:	3001      	adds	r0, #1
 800552a:	d103      	bne.n	8005534 <_printf_common+0xac>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005534:	3501      	adds	r5, #1
 8005536:	e7c6      	b.n	80054c6 <_printf_common+0x3e>
 8005538:	18e1      	adds	r1, r4, r3
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	2030      	movs	r0, #48	@ 0x30
 800553e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005542:	4422      	add	r2, r4
 8005544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800554c:	3302      	adds	r3, #2
 800554e:	e7c7      	b.n	80054e0 <_printf_common+0x58>
 8005550:	2301      	movs	r3, #1
 8005552:	4622      	mov	r2, r4
 8005554:	4641      	mov	r1, r8
 8005556:	4638      	mov	r0, r7
 8005558:	47c8      	blx	r9
 800555a:	3001      	adds	r0, #1
 800555c:	d0e6      	beq.n	800552c <_printf_common+0xa4>
 800555e:	3601      	adds	r6, #1
 8005560:	e7d9      	b.n	8005516 <_printf_common+0x8e>
	...

08005564 <_printf_i>:
 8005564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	7e0f      	ldrb	r7, [r1, #24]
 800556a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800556c:	2f78      	cmp	r7, #120	@ 0x78
 800556e:	4691      	mov	r9, r2
 8005570:	4680      	mov	r8, r0
 8005572:	460c      	mov	r4, r1
 8005574:	469a      	mov	sl, r3
 8005576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557a:	d807      	bhi.n	800558c <_printf_i+0x28>
 800557c:	2f62      	cmp	r7, #98	@ 0x62
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x32>
 8005580:	2f00      	cmp	r7, #0
 8005582:	f000 80d2 	beq.w	800572a <_printf_i+0x1c6>
 8005586:	2f58      	cmp	r7, #88	@ 0x58
 8005588:	f000 80b9 	beq.w	80056fe <_printf_i+0x19a>
 800558c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005594:	e03a      	b.n	800560c <_printf_i+0xa8>
 8005596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559a:	2b15      	cmp	r3, #21
 800559c:	d8f6      	bhi.n	800558c <_printf_i+0x28>
 800559e:	a101      	add	r1, pc, #4	@ (adr r1, 80055a4 <_printf_i+0x40>)
 80055a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	08005611 	.word	0x08005611
 80055ac:	0800558d 	.word	0x0800558d
 80055b0:	0800558d 	.word	0x0800558d
 80055b4:	0800558d 	.word	0x0800558d
 80055b8:	0800558d 	.word	0x0800558d
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800558d 	.word	0x0800558d
 80055c4:	0800558d 	.word	0x0800558d
 80055c8:	0800558d 	.word	0x0800558d
 80055cc:	0800558d 	.word	0x0800558d
 80055d0:	08005711 	.word	0x08005711
 80055d4:	0800563b 	.word	0x0800563b
 80055d8:	080056cb 	.word	0x080056cb
 80055dc:	0800558d 	.word	0x0800558d
 80055e0:	0800558d 	.word	0x0800558d
 80055e4:	08005733 	.word	0x08005733
 80055e8:	0800558d 	.word	0x0800558d
 80055ec:	0800563b 	.word	0x0800563b
 80055f0:	0800558d 	.word	0x0800558d
 80055f4:	0800558d 	.word	0x0800558d
 80055f8:	080056d3 	.word	0x080056d3
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800560c:	2301      	movs	r3, #1
 800560e:	e09d      	b.n	800574c <_printf_i+0x1e8>
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	6031      	str	r1, [r6, #0]
 8005618:	0606      	lsls	r6, r0, #24
 800561a:	d501      	bpl.n	8005620 <_printf_i+0xbc>
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	e003      	b.n	8005628 <_printf_i+0xc4>
 8005620:	0645      	lsls	r5, r0, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0xb8>
 8005624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005628:	2d00      	cmp	r5, #0
 800562a:	da03      	bge.n	8005634 <_printf_i+0xd0>
 800562c:	232d      	movs	r3, #45	@ 0x2d
 800562e:	426d      	negs	r5, r5
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005634:	4859      	ldr	r0, [pc, #356]	@ (800579c <_printf_i+0x238>)
 8005636:	230a      	movs	r3, #10
 8005638:	e011      	b.n	800565e <_printf_i+0xfa>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	0608      	lsls	r0, r1, #24
 8005640:	f853 5b04 	ldr.w	r5, [r3], #4
 8005644:	d402      	bmi.n	800564c <_printf_i+0xe8>
 8005646:	0649      	lsls	r1, r1, #25
 8005648:	bf48      	it	mi
 800564a:	b2ad      	uxthmi	r5, r5
 800564c:	2f6f      	cmp	r7, #111	@ 0x6f
 800564e:	4853      	ldr	r0, [pc, #332]	@ (800579c <_printf_i+0x238>)
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	bf14      	ite	ne
 8005654:	230a      	movne	r3, #10
 8005656:	2308      	moveq	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565e:	6866      	ldr	r6, [r4, #4]
 8005660:	60a6      	str	r6, [r4, #8]
 8005662:	2e00      	cmp	r6, #0
 8005664:	bfa2      	ittt	ge
 8005666:	6821      	ldrge	r1, [r4, #0]
 8005668:	f021 0104 	bicge.w	r1, r1, #4
 800566c:	6021      	strge	r1, [r4, #0]
 800566e:	b90d      	cbnz	r5, 8005674 <_printf_i+0x110>
 8005670:	2e00      	cmp	r6, #0
 8005672:	d04b      	beq.n	800570c <_printf_i+0x1a8>
 8005674:	4616      	mov	r6, r2
 8005676:	fbb5 f1f3 	udiv	r1, r5, r3
 800567a:	fb03 5711 	mls	r7, r3, r1, r5
 800567e:	5dc7      	ldrb	r7, [r0, r7]
 8005680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005684:	462f      	mov	r7, r5
 8005686:	42bb      	cmp	r3, r7
 8005688:	460d      	mov	r5, r1
 800568a:	d9f4      	bls.n	8005676 <_printf_i+0x112>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d10b      	bne.n	80056a8 <_printf_i+0x144>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07df      	lsls	r7, r3, #31
 8005694:	d508      	bpl.n	80056a8 <_printf_i+0x144>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6861      	ldr	r1, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	bfde      	ittt	le
 800569e:	2330      	movle	r3, #48	@ 0x30
 80056a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056a8:	1b92      	subs	r2, r2, r6
 80056aa:	6122      	str	r2, [r4, #16]
 80056ac:	f8cd a000 	str.w	sl, [sp]
 80056b0:	464b      	mov	r3, r9
 80056b2:	aa03      	add	r2, sp, #12
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fee6 	bl	8005488 <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	d14a      	bne.n	8005756 <_printf_i+0x1f2>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	b004      	add	sp, #16
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f043 0320 	orr.w	r3, r3, #32
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	4833      	ldr	r0, [pc, #204]	@ (80057a0 <_printf_i+0x23c>)
 80056d4:	2778      	movs	r7, #120	@ 0x78
 80056d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	6831      	ldr	r1, [r6, #0]
 80056de:	061f      	lsls	r7, r3, #24
 80056e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e4:	d402      	bmi.n	80056ec <_printf_i+0x188>
 80056e6:	065f      	lsls	r7, r3, #25
 80056e8:	bf48      	it	mi
 80056ea:	b2ad      	uxthmi	r5, r5
 80056ec:	6031      	str	r1, [r6, #0]
 80056ee:	07d9      	lsls	r1, r3, #31
 80056f0:	bf44      	itt	mi
 80056f2:	f043 0320 	orrmi.w	r3, r3, #32
 80056f6:	6023      	strmi	r3, [r4, #0]
 80056f8:	b11d      	cbz	r5, 8005702 <_printf_i+0x19e>
 80056fa:	2310      	movs	r3, #16
 80056fc:	e7ac      	b.n	8005658 <_printf_i+0xf4>
 80056fe:	4827      	ldr	r0, [pc, #156]	@ (800579c <_printf_i+0x238>)
 8005700:	e7e9      	b.n	80056d6 <_printf_i+0x172>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f023 0320 	bic.w	r3, r3, #32
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	e7f6      	b.n	80056fa <_printf_i+0x196>
 800570c:	4616      	mov	r6, r2
 800570e:	e7bd      	b.n	800568c <_printf_i+0x128>
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	6961      	ldr	r1, [r4, #20]
 8005716:	1d18      	adds	r0, r3, #4
 8005718:	6030      	str	r0, [r6, #0]
 800571a:	062e      	lsls	r6, r5, #24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	d501      	bpl.n	8005724 <_printf_i+0x1c0>
 8005720:	6019      	str	r1, [r3, #0]
 8005722:	e002      	b.n	800572a <_printf_i+0x1c6>
 8005724:	0668      	lsls	r0, r5, #25
 8005726:	d5fb      	bpl.n	8005720 <_printf_i+0x1bc>
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	4616      	mov	r6, r2
 8005730:	e7bc      	b.n	80056ac <_printf_i+0x148>
 8005732:	6833      	ldr	r3, [r6, #0]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	6032      	str	r2, [r6, #0]
 8005738:	681e      	ldr	r6, [r3, #0]
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	2100      	movs	r1, #0
 800573e:	4630      	mov	r0, r6
 8005740:	f7fa fd6e 	bl	8000220 <memchr>
 8005744:	b108      	cbz	r0, 800574a <_printf_i+0x1e6>
 8005746:	1b80      	subs	r0, r0, r6
 8005748:	6060      	str	r0, [r4, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005754:	e7aa      	b.n	80056ac <_printf_i+0x148>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	4632      	mov	r2, r6
 800575a:	4649      	mov	r1, r9
 800575c:	4640      	mov	r0, r8
 800575e:	47d0      	blx	sl
 8005760:	3001      	adds	r0, #1
 8005762:	d0ad      	beq.n	80056c0 <_printf_i+0x15c>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	d413      	bmi.n	8005792 <_printf_i+0x22e>
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	4298      	cmp	r0, r3
 8005770:	bfb8      	it	lt
 8005772:	4618      	movlt	r0, r3
 8005774:	e7a6      	b.n	80056c4 <_printf_i+0x160>
 8005776:	2301      	movs	r3, #1
 8005778:	4632      	mov	r2, r6
 800577a:	4649      	mov	r1, r9
 800577c:	4640      	mov	r0, r8
 800577e:	47d0      	blx	sl
 8005780:	3001      	adds	r0, #1
 8005782:	d09d      	beq.n	80056c0 <_printf_i+0x15c>
 8005784:	3501      	adds	r5, #1
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	9903      	ldr	r1, [sp, #12]
 800578a:	1a5b      	subs	r3, r3, r1
 800578c:	42ab      	cmp	r3, r5
 800578e:	dcf2      	bgt.n	8005776 <_printf_i+0x212>
 8005790:	e7eb      	b.n	800576a <_printf_i+0x206>
 8005792:	2500      	movs	r5, #0
 8005794:	f104 0619 	add.w	r6, r4, #25
 8005798:	e7f5      	b.n	8005786 <_printf_i+0x222>
 800579a:	bf00      	nop
 800579c:	08005b94 	.word	0x08005b94
 80057a0:	08005ba5 	.word	0x08005ba5

080057a4 <__swbuf_r>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	460e      	mov	r6, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	4605      	mov	r5, r0
 80057ac:	b118      	cbz	r0, 80057b6 <__swbuf_r+0x12>
 80057ae:	6a03      	ldr	r3, [r0, #32]
 80057b0:	b90b      	cbnz	r3, 80057b6 <__swbuf_r+0x12>
 80057b2:	f7ff fa3f 	bl	8004c34 <__sinit>
 80057b6:	69a3      	ldr	r3, [r4, #24]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	071a      	lsls	r2, r3, #28
 80057be:	d501      	bpl.n	80057c4 <__swbuf_r+0x20>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b943      	cbnz	r3, 80057d6 <__swbuf_r+0x32>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f82a 	bl	8005820 <__swsetup_r>
 80057cc:	b118      	cbz	r0, 80057d6 <__swbuf_r+0x32>
 80057ce:	f04f 37ff 	mov.w	r7, #4294967295
 80057d2:	4638      	mov	r0, r7
 80057d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	1a98      	subs	r0, r3, r2
 80057dc:	6963      	ldr	r3, [r4, #20]
 80057de:	b2f6      	uxtb	r6, r6
 80057e0:	4283      	cmp	r3, r0
 80057e2:	4637      	mov	r7, r6
 80057e4:	dc05      	bgt.n	80057f2 <__swbuf_r+0x4e>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7ff fcbb 	bl	8005164 <_fflush_r>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d1ed      	bne.n	80057ce <__swbuf_r+0x2a>
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	701e      	strb	r6, [r3, #0]
 8005800:	6962      	ldr	r2, [r4, #20]
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	429a      	cmp	r2, r3
 8005806:	d004      	beq.n	8005812 <__swbuf_r+0x6e>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d5e1      	bpl.n	80057d2 <__swbuf_r+0x2e>
 800580e:	2e0a      	cmp	r6, #10
 8005810:	d1df      	bne.n	80057d2 <__swbuf_r+0x2e>
 8005812:	4621      	mov	r1, r4
 8005814:	4628      	mov	r0, r5
 8005816:	f7ff fca5 	bl	8005164 <_fflush_r>
 800581a:	2800      	cmp	r0, #0
 800581c:	d0d9      	beq.n	80057d2 <__swbuf_r+0x2e>
 800581e:	e7d6      	b.n	80057ce <__swbuf_r+0x2a>

08005820 <__swsetup_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <__swsetup_r+0xa8>)
 8005824:	4605      	mov	r5, r0
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	460c      	mov	r4, r1
 800582a:	b118      	cbz	r0, 8005834 <__swsetup_r+0x14>
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b90b      	cbnz	r3, 8005834 <__swsetup_r+0x14>
 8005830:	f7ff fa00 	bl	8004c34 <__sinit>
 8005834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005838:	0719      	lsls	r1, r3, #28
 800583a:	d422      	bmi.n	8005882 <__swsetup_r+0x62>
 800583c:	06da      	lsls	r2, r3, #27
 800583e:	d407      	bmi.n	8005850 <__swsetup_r+0x30>
 8005840:	2209      	movs	r2, #9
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	f04f 30ff 	mov.w	r0, #4294967295
 800584e:	e033      	b.n	80058b8 <__swsetup_r+0x98>
 8005850:	0758      	lsls	r0, r3, #29
 8005852:	d512      	bpl.n	800587a <__swsetup_r+0x5a>
 8005854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005856:	b141      	cbz	r1, 800586a <__swsetup_r+0x4a>
 8005858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <__swsetup_r+0x46>
 8005860:	4628      	mov	r0, r5
 8005862:	f7ff fafb 	bl	8004e5c <_free_r>
 8005866:	2300      	movs	r3, #0
 8005868:	6363      	str	r3, [r4, #52]	@ 0x34
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	2300      	movs	r3, #0
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	b94b      	cbnz	r3, 800589a <__swsetup_r+0x7a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d003      	beq.n	800589a <__swsetup_r+0x7a>
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 f883 	bl	80059a0 <__smakebuf_r>
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	f013 0201 	ands.w	r2, r3, #1
 80058a2:	d00a      	beq.n	80058ba <__swsetup_r+0x9a>
 80058a4:	2200      	movs	r2, #0
 80058a6:	60a2      	str	r2, [r4, #8]
 80058a8:	6962      	ldr	r2, [r4, #20]
 80058aa:	4252      	negs	r2, r2
 80058ac:	61a2      	str	r2, [r4, #24]
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	b942      	cbnz	r2, 80058c4 <__swsetup_r+0xa4>
 80058b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058b6:	d1c5      	bne.n	8005844 <__swsetup_r+0x24>
 80058b8:	bd38      	pop	{r3, r4, r5, pc}
 80058ba:	0799      	lsls	r1, r3, #30
 80058bc:	bf58      	it	pl
 80058be:	6962      	ldrpl	r2, [r4, #20]
 80058c0:	60a2      	str	r2, [r4, #8]
 80058c2:	e7f4      	b.n	80058ae <__swsetup_r+0x8e>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7f7      	b.n	80058b8 <__swsetup_r+0x98>
 80058c8:	20000054 	.word	0x20000054

080058cc <_raise_r>:
 80058cc:	291f      	cmp	r1, #31
 80058ce:	b538      	push	{r3, r4, r5, lr}
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	d904      	bls.n	80058e0 <_raise_r+0x14>
 80058d6:	2316      	movs	r3, #22
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80058e2:	b112      	cbz	r2, 80058ea <_raise_r+0x1e>
 80058e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058e8:	b94b      	cbnz	r3, 80058fe <_raise_r+0x32>
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f830 	bl	8005950 <_getpid_r>
 80058f0:	4622      	mov	r2, r4
 80058f2:	4601      	mov	r1, r0
 80058f4:	4628      	mov	r0, r5
 80058f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058fa:	f000 b817 	b.w	800592c <_kill_r>
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d00a      	beq.n	8005918 <_raise_r+0x4c>
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	d103      	bne.n	800590e <_raise_r+0x42>
 8005906:	2316      	movs	r3, #22
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	2001      	movs	r0, #1
 800590c:	e7e7      	b.n	80058de <_raise_r+0x12>
 800590e:	2100      	movs	r1, #0
 8005910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005914:	4620      	mov	r0, r4
 8005916:	4798      	blx	r3
 8005918:	2000      	movs	r0, #0
 800591a:	e7e0      	b.n	80058de <_raise_r+0x12>

0800591c <raise>:
 800591c:	4b02      	ldr	r3, [pc, #8]	@ (8005928 <raise+0xc>)
 800591e:	4601      	mov	r1, r0
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f7ff bfd3 	b.w	80058cc <_raise_r>
 8005926:	bf00      	nop
 8005928:	20000054 	.word	0x20000054

0800592c <_kill_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	@ (800594c <_kill_r+0x20>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	f7fb fc23 	bl	8001184 <_kill>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d102      	bne.n	8005948 <_kill_r+0x1c>
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	b103      	cbz	r3, 8005948 <_kill_r+0x1c>
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	20000434 	.word	0x20000434

08005950 <_getpid_r>:
 8005950:	f7fb bc10 	b.w	8001174 <_getpid>

08005954 <__swhatbuf_r>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	460c      	mov	r4, r1
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	2900      	cmp	r1, #0
 800595e:	b096      	sub	sp, #88	@ 0x58
 8005960:	4615      	mov	r5, r2
 8005962:	461e      	mov	r6, r3
 8005964:	da0d      	bge.n	8005982 <__swhatbuf_r+0x2e>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	bf14      	ite	ne
 8005972:	2340      	movne	r3, #64	@ 0x40
 8005974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005978:	2000      	movs	r0, #0
 800597a:	6031      	str	r1, [r6, #0]
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	b016      	add	sp, #88	@ 0x58
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	466a      	mov	r2, sp
 8005984:	f000 f848 	bl	8005a18 <_fstat_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	dbec      	blt.n	8005966 <__swhatbuf_r+0x12>
 800598c:	9901      	ldr	r1, [sp, #4]
 800598e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005996:	4259      	negs	r1, r3
 8005998:	4159      	adcs	r1, r3
 800599a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800599e:	e7eb      	b.n	8005978 <__swhatbuf_r+0x24>

080059a0 <__smakebuf_r>:
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a4:	079d      	lsls	r5, r3, #30
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	d507      	bpl.n	80059bc <__smakebuf_r+0x1c>
 80059ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	2301      	movs	r3, #1
 80059b6:	6163      	str	r3, [r4, #20]
 80059b8:	b003      	add	sp, #12
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059bc:	ab01      	add	r3, sp, #4
 80059be:	466a      	mov	r2, sp
 80059c0:	f7ff ffc8 	bl	8005954 <__swhatbuf_r>
 80059c4:	9f00      	ldr	r7, [sp, #0]
 80059c6:	4605      	mov	r5, r0
 80059c8:	4639      	mov	r1, r7
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff faba 	bl	8004f44 <_malloc_r>
 80059d0:	b948      	cbnz	r0, 80059e6 <__smakebuf_r+0x46>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	059a      	lsls	r2, r3, #22
 80059d8:	d4ee      	bmi.n	80059b8 <__smakebuf_r+0x18>
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0302 	orr.w	r3, r3, #2
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	e7e2      	b.n	80059ac <__smakebuf_r+0xc>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	6020      	str	r0, [r4, #0]
 80059ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059f6:	b15b      	cbz	r3, 8005a10 <__smakebuf_r+0x70>
 80059f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f81d 	bl	8005a3c <_isatty_r>
 8005a02:	b128      	cbz	r0, 8005a10 <__smakebuf_r+0x70>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	431d      	orrs	r5, r3
 8005a14:	81a5      	strh	r5, [r4, #12]
 8005a16:	e7cf      	b.n	80059b8 <__smakebuf_r+0x18>

08005a18 <_fstat_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_fstat_r+0x20>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f7fb fc0d 	bl	8001244 <_fstat>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d102      	bne.n	8005a34 <_fstat_r+0x1c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b103      	cbz	r3, 8005a34 <_fstat_r+0x1c>
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	20000434 	.word	0x20000434

08005a3c <_isatty_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_isatty_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb fc0c 	bl	8001264 <_isatty>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_isatty_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_isatty_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000434 	.word	0x20000434

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
