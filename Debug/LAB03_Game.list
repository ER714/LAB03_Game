
LAB03_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d98  08007d98  000090a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007d98  08007d98  00008d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da0  08007da0  000090a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da0  08007da0  00008da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007da4  08007da4  00008da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08007da8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200000a8  08007e50  000090a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08007e50  00009624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c0  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002586  00000000  00000000  0001a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0001ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b14  00000000  00000000  0001dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026407  00000000  00000000  0001e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012591  00000000  00000000  00044b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee519  00000000  00000000  00057114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014562d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  00145670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00149a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007c30 	.word	0x08007c30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000ac 	.word	0x200000ac
 800021c:	08007c30 	.word	0x08007c30

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 f967 	bl	8001886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f860 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9d4 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f980 	bl	80008c4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005c4:	f000 f8e6 	bl	8000794 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f92e 	bl	8000828 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005cc:	f000 f8a2 	bl	8000714 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(300);
 80005d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005d4:	f001 f9c8 	bl	8001968 <HAL_Delay>
  UARTDMAConfig();
 80005d8:	f000 fcf4 	bl	8000fc4 <UARTDMAConfig>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	EEPROMWriteExample();
 80005dc:	f000 fd00 	bl	8000fe0 <EEPROMWriteExample>
	EEPROMReadExample(eepromDataReadBack, 3);
 80005e0:	2103      	movs	r1, #3
 80005e2:	481f      	ldr	r0, [pc, #124]	@ (8000660 <main+0xb0>)
 80005e4:	f000 fd20 	bl	8001028 <EEPROMReadExample>
	static uint32_t BTMX_TimeStamp = 0;
	if(HAL_GetTick() > BTMX_TimeStamp)
 80005e8:	f001 f9b2 	bl	8001950 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <main+0xb4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d907      	bls.n	8000606 <main+0x56>
	{
	    BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 80005f6:	f001 f9ab 	bl	8001950 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	3319      	adds	r3, #25
 80005fe:	4a19      	ldr	r2, [pc, #100]	@ (8000664 <main+0xb4>)
 8000600:	6013      	str	r3, [r2, #0]
	  	ButtonMatrixRead();
 8000602:	f000 fa7d 	bl	8000b00 <ButtonMatrixRead>
	}
	b = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); //start button
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	4817      	ldr	r0, [pc, #92]	@ (8000668 <main+0xb8>)
 800060c:	f001 ffa0 	bl	8002550 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <main+0xbc>)
 8000616:	601a      	str	r2, [r3, #0]
	if(b == 1 && mode == 0)
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <main+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d115      	bne.n	800064c <main+0x9c>
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <main+0xc0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d111      	bne.n	800064c <main+0x9c>
	{
	  	secretNumber = rand()%9; // Generate a random number between 0 and 9
 8000628:	f006 fb24 	bl	8006c74 <rand>
 800062c:	4601      	mov	r1, r0
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <main+0xc4>)
 8000630:	fb83 2301 	smull	r2, r3, r3, r1
 8000634:	105a      	asrs	r2, r3, #1
 8000636:	17cb      	asrs	r3, r1, #31
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	4413      	add	r3, r2
 8000640:	1aca      	subs	r2, r1, r3
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <main+0xc8>)
 8000644:	601a      	str	r2, [r3, #0]
	  	mode = 1;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <main+0xc0>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <main+0xc0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d1c3      	bne.n	80005dc <main+0x2c>
	{

	  	CheckNumber();
 8000654:	f000 faf0 	bl	8000c38 <CheckNumber>
	  	CheckGuess();
 8000658:	f000 fb7e 	bl	8000d58 <CheckGuess>
  {
 800065c:	e7be      	b.n	80005dc <main+0x2c>
 800065e:	bf00      	nop
 8000660:	200004c4 	.word	0x200004c4
 8000664:	200004c8 	.word	0x200004c8
 8000668:	48000800 	.word	0x48000800
 800066c:	20000490 	.word	0x20000490
 8000670:	20000494 	.word	0x20000494
 8000674:	38e38e39 	.word	0x38e38e39
 8000678:	20000488 	.word	0x20000488

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2238      	movs	r2, #56	@ 0x38
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fc35 	bl	8006efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800069e:	2000      	movs	r0, #0
 80006a0:	f003 fddc 	bl	800425c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006be:	2355      	movs	r3, #85	@ 0x55
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fe76 	bl	80043c4 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006de:	f000 fcc9 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2104      	movs	r1, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f974 	bl	80049e8 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000706:	f000 fcb5 	bl	8001074 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_I2C1_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_I2C1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <MX_I2C1_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_I2C1_Init+0x74>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000750:	f001 ff51 	bl	80025f6 <HAL_I2C_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075a:	f000 fc8b 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000762:	f003 fce3 	bl	800412c <HAL_I2CEx_ConfigAnalogFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 fc82 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000774:	f003 fd25 	bl	80041c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 fc79 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000c4 	.word	0x200000c4
 800078c:	40005400 	.word	0x40005400
 8000790:	30a0a7fb 	.word	0x30a0a7fb

08000794 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	4a22      	ldr	r2, [pc, #136]	@ (8000824 <MX_LPUART1_UART_Init+0x90>)
 800079c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	220c      	movs	r2, #12
 80007be:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007d8:	4811      	ldr	r0, [pc, #68]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	f004 fd6f 	bl	80052bc <HAL_UART_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 80007e4:	f000 fc46 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	f006 f978 	bl	8006ae0 <HAL_UARTEx_SetTxFifoThreshold>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LPUART1_UART_Init+0x66>
  {
    Error_Handler();
 80007f6:	f000 fc3d 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 80007fe:	f006 f9ad 	bl	8006b5c <HAL_UARTEx_SetRxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_LPUART1_UART_Init+0x78>
  {
    Error_Handler();
 8000808:	f000 fc34 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_LPUART1_UART_Init+0x8c>)
 800080e:	f006 f92e 	bl	8006a6e <HAL_UARTEx_DisableFifoMode>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_LPUART1_UART_Init+0x88>
  {
    Error_Handler();
 8000818:	f000 fc2c 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001d8 	.word	0x200001d8
 8000824:	40008000 	.word	0x40008000

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 800082e:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <MX_USART1_UART_Init+0x98>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000842:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000846:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000850:	220c      	movs	r2, #12
 8000852:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4812      	ldr	r0, [pc, #72]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000874:	f004 fd22 	bl	80052bc <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800087e:	f000 fbf9 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	480d      	ldr	r0, [pc, #52]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000886:	f006 f92b 	bl	8006ae0 <HAL_UARTEx_SetTxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000890:	f000 fbf0 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 8000898:	f006 f960 	bl	8006b5c <HAL_UARTEx_SetRxFifoThreshold>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80008a2:	f000 fbe7 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART1_UART_Init+0x94>)
 80008a8:	f006 f8e1 	bl	8006a6e <HAL_UARTEx_DisableFifoMode>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 fbdf 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000026c 	.word	0x2000026c
 80008c0:	40013800 	.word	0x40013800

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ca:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ce:	4a25      	ldr	r2, [pc, #148]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008d6:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_DMA_Init+0xa0>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200b      	movs	r0, #11
 8000900:	f001 f92f 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000904:	200b      	movs	r0, #11
 8000906:	f001 f946 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200c      	movs	r0, #12
 8000910:	f001 f927 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000914:	200c      	movs	r0, #12
 8000916:	f001 f93e 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200d      	movs	r0, #13
 8000920:	f001 f91f 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000924:	200d      	movs	r0, #13
 8000926:	f001 f936 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f001 f917 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000934:	200e      	movs	r0, #14
 8000936:	f001 f92e 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200f      	movs	r0, #15
 8000940:	f001 f90f 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000944:	200f      	movs	r0, #15
 8000946:	f001 f926 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2010      	movs	r0, #16
 8000950:	f001 f907 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000954:	2010      	movs	r0, #16
 8000956:	f001 f91e 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b5d      	ldr	r3, [pc, #372]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a5c      	ldr	r2, [pc, #368]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b5a      	ldr	r3, [pc, #360]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b57      	ldr	r3, [pc, #348]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a56      	ldr	r2, [pc, #344]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b54      	ldr	r3, [pc, #336]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b51      	ldr	r3, [pc, #324]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a50      	ldr	r2, [pc, #320]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b4e      	ldr	r3, [pc, #312]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b4b      	ldr	r3, [pc, #300]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a4a      	ldr	r2, [pc, #296]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b48      	ldr	r3, [pc, #288]	@ (8000af4 <MX_GPIO_Init+0x18c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2112      	movs	r1, #18
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e6:	f001 fdcb 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f001 fdc5 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f240 4131 	movw	r1, #1073	@ 0x431
 80009fc:	483e      	ldr	r0, [pc, #248]	@ (8000af8 <MX_GPIO_Init+0x190>)
 80009fe:	f001 fdbf 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4838      	ldr	r0, [pc, #224]	@ (8000afc <MX_GPIO_Init+0x194>)
 8000a1a:	f001 fc17 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4832      	ldr	r0, [pc, #200]	@ (8000afc <MX_GPIO_Init+0x194>)
 8000a32:	f001 fc0b 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000a36:	2332      	movs	r3, #50	@ 0x32
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f001 fbfc 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000a54:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f001 fbee 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	481c      	ldr	r0, [pc, #112]	@ (8000af8 <MX_GPIO_Init+0x190>)
 8000a88:	f001 fbe0 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000a8c:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a92:	2311      	movs	r3, #17
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	@ (8000af8 <MX_GPIO_Init+0x190>)
 8000aa6:	f001 fbd1 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480f      	ldr	r0, [pc, #60]	@ (8000afc <MX_GPIO_Init+0x194>)
 8000abe:	f001 fbc5 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_GPIO_Init+0x190>)
 8000ad6:	f001 fbb9 	bl	800224c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2028      	movs	r0, #40	@ 0x28
 8000ae0:	f001 f83f 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae4:	2028      	movs	r0, #40	@ 0x28
 8000ae6:	f001 f856 	bl	8001b96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000800 	.word	0x48000800

08000b00 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	static uint8_t X=0;
	for(int i=0; i<4; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e037      	b.n	8000b7c <ButtonMatrixRead+0x7c>
	{
	if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 8000b0c:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <ButtonMatrixRead+0xe8>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000b14:	4934      	ldr	r1, [pc, #208]	@ (8000be8 <ButtonMatrixRead+0xe8>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	440b      	add	r3, r1
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4610      	mov	r0, r2
 8000b22:	f001 fd15 	bl	8002550 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <ButtonMatrixRead+0x50>
	{
		ButtonState |= 1 << (i + (X * 4));
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	009a      	lsls	r2, r3, #2
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	2201      	movs	r2, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <ButtonMatrixRead+0xf0>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <ButtonMatrixRead+0xf0>)
 8000b4c:	801a      	strh	r2, [r3, #0]
 8000b4e:	e012      	b.n	8000b76 <ButtonMatrixRead+0x76>
	}
	else
	{
		ButtonState &= ~(1 << (i + (X * 4)));
 8000b50:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <ButtonMatrixRead+0xf0>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <ButtonMatrixRead+0xf0>)
 8000b74:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<4; i++)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	ddc4      	ble.n	8000b0c <ButtonMatrixRead+0xc>
	}
	}
	//set currentL to Hi-z (open drain)
	HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <ButtonMatrixRead+0xf4>)
 8000b8a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <ButtonMatrixRead+0xf4>)
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4413      	add	r3, r2
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f001 fcef 	bl	8002580 <HAL_GPIO_WritePin>
	//set nextL to low
	uint8_t nextX = (X + 1) %3;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <ButtonMatrixRead+0xf8>)
 8000baa:	fb83 3102 	smull	r3, r1, r3, r2
 8000bae:	17d3      	asrs	r3, r2, #31
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	440b      	add	r3, r1
 8000bb8:	1ad1      	subs	r1, r2, r3
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <ButtonMatrixRead+0xf4>)
 8000bc2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <ButtonMatrixRead+0xf4>)
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	889b      	ldrh	r3, [r3, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f001 fcd4 	bl	8002580 <HAL_GPIO_WritePin>
	X = nextX;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <ButtonMatrixRead+0xec>)
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	7013      	strb	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000004 	.word	0x20000004
 8000bec:	200004cc 	.word	0x200004cc
 8000bf0:	20000484 	.word	0x20000484
 8000bf4:	20000024 	.word	0x20000024
 8000bf8:	55555556 	.word	0x55555556

08000bfc <RandomNumber>:
void RandomNumber(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	rand(HAL_GetTick());
 8000c00:	f000 fea6 	bl	8001950 <HAL_GetTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 f834 	bl	8006c74 <rand>
	secretNumber = rand()%9;
 8000c0c:	f006 f832 	bl	8006c74 <rand>
 8000c10:	4601      	mov	r1, r0
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <RandomNumber+0x34>)
 8000c14:	fb83 2301 	smull	r2, r3, r3, r1
 8000c18:	105a      	asrs	r2, r3, #1
 8000c1a:	17cb      	asrs	r3, r1, #31
 8000c1c:	1ad2      	subs	r2, r2, r3
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	4413      	add	r3, r2
 8000c24:	1aca      	subs	r2, r1, r3
 8000c26:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <RandomNumber+0x38>)
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	38e38e39 	.word	0x38e38e39
 8000c34:	20000488 	.word	0x20000488

08000c38 <CheckNumber>:
void CheckNumber(){
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	if(ButtonState == 8)
 8000c3c:	4b42      	ldr	r3, [pc, #264]	@ (8000d48 <CheckNumber+0x110>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d106      	bne.n	8000c52 <CheckNumber+0x1a>
		{
			Number = 0;
 8000c44:	4b41      	ldr	r3, [pc, #260]	@ (8000d4c <CheckNumber+0x114>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <CheckNumber+0x118>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e064      	b.n	8000d1c <CheckNumber+0xe4>
		}
		else if(ButtonState == 4)
 8000c52:	4b3d      	ldr	r3, [pc, #244]	@ (8000d48 <CheckNumber+0x110>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d106      	bne.n	8000c68 <CheckNumber+0x30>
		{
			Number = 1;
 8000c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d4c <CheckNumber+0x114>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000c60:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <CheckNumber+0x118>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e059      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 64)
 8000c68:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <CheckNumber+0x110>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	2b40      	cmp	r3, #64	@ 0x40
 8000c6e:	d106      	bne.n	8000c7e <CheckNumber+0x46>
		{
			Number = 2;
 8000c70:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <CheckNumber+0x114>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000c76:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <CheckNumber+0x118>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e04e      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 1024)
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <CheckNumber+0x110>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c86:	d106      	bne.n	8000c96 <CheckNumber+0x5e>
		{
			Number = 3;
 8000c88:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <CheckNumber+0x114>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	@ (8000d50 <CheckNumber+0x118>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e042      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 2)
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <CheckNumber+0x110>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d106      	bne.n	8000cac <CheckNumber+0x74>
	    {
			Number = 4;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <CheckNumber+0x114>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <CheckNumber+0x118>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	e037      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 32)
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <CheckNumber+0x110>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	2b20      	cmp	r3, #32
 8000cb2:	d106      	bne.n	8000cc2 <CheckNumber+0x8a>
		{
			Number = 5;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <CheckNumber+0x114>)
 8000cb6:	2205      	movs	r2, #5
 8000cb8:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000cba:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <CheckNumber+0x118>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e02c      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 512)
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <CheckNumber+0x110>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cca:	d106      	bne.n	8000cda <CheckNumber+0xa2>
		{
			Number = 6;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <CheckNumber+0x114>)
 8000cce:	2206      	movs	r2, #6
 8000cd0:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <CheckNumber+0x118>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e020      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 1)
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <CheckNumber+0x110>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d106      	bne.n	8000cf0 <CheckNumber+0xb8>
		{
			Number = 7;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <CheckNumber+0x114>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <CheckNumber+0x118>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e015      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 16)
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <CheckNumber+0x110>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b10      	cmp	r3, #16
 8000cf6:	d106      	bne.n	8000d06 <CheckNumber+0xce>
		{
			Number = 8;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <CheckNumber+0x114>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <CheckNumber+0x118>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e00a      	b.n	8000d1c <CheckNumber+0xe4>

		}
		else if(ButtonState == 256)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <CheckNumber+0x110>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d0e:	d105      	bne.n	8000d1c <CheckNumber+0xe4>
		{
			Number = 9;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <CheckNumber+0x114>)
 8000d12:	2209      	movs	r2, #9
 8000d14:	801a      	strh	r2, [r3, #0]
			state = 1;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <CheckNumber+0x118>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

		}
	if(state == 1)
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <CheckNumber+0x118>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10b      	bne.n	8000d3c <CheckNumber+0x104>
	{
		if(ButtonState == 0)
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <CheckNumber+0x110>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d107      	bne.n	8000d3c <CheckNumber+0x104>
			{
				guessNumber = Number;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <CheckNumber+0x114>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <CheckNumber+0x11c>)
 8000d34:	601a      	str	r2, [r3, #0]
				state = 0;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <CheckNumber+0x118>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
			}
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000484 	.word	0x20000484
 8000d4c:	2000048c 	.word	0x2000048c
 8000d50:	20000498 	.word	0x20000498
 8000d54:	200004a8 	.word	0x200004a8

08000d58 <CheckGuess>:
void CheckGuess(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	if(guessCount == 3){
 8000d5c:	4b87      	ldr	r3, [pc, #540]	@ (8000f7c <CheckGuess+0x224>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d128      	bne.n	8000db6 <CheckGuess+0x5e>
		  n = 0;
 8000d64:	4b86      	ldr	r3, [pc, #536]	@ (8000f80 <CheckGuess+0x228>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount-3]);
 8000d6a:	4b84      	ldr	r3, [pc, #528]	@ (8000f7c <CheckGuess+0x224>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3b03      	subs	r3, #3
 8000d70:	4a84      	ldr	r2, [pc, #528]	@ (8000f84 <CheckGuess+0x22c>)
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f001 fbfe 	bl	8002580 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, LED[guessCount-2]);
 8000d84:	4b7d      	ldr	r3, [pc, #500]	@ (8000f7c <CheckGuess+0x224>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b02      	subs	r3, #2
 8000d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f84 <CheckGuess+0x22c>)
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	2110      	movs	r1, #16
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f001 fbf1 	bl	8002580 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED[guessCount-1]);
 8000d9e:	4b77      	ldr	r3, [pc, #476]	@ (8000f7c <CheckGuess+0x224>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a77      	ldr	r2, [pc, #476]	@ (8000f84 <CheckGuess+0x22c>)
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	2101      	movs	r1, #1
 8000db0:	4875      	ldr	r0, [pc, #468]	@ (8000f88 <CheckGuess+0x230>)
 8000db2:	f001 fbe5 	bl	8002580 <HAL_GPIO_WritePin>
	}
	if(RxBuffer[0] == 'r'){
 8000db6:	4b75      	ldr	r3, [pc, #468]	@ (8000f8c <CheckGuess+0x234>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b72      	cmp	r3, #114	@ 0x72
 8000dbc:	d11c      	bne.n	8000df8 <CheckGuess+0xa0>
		guessCount = 3;
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8000f7c <CheckGuess+0x224>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	601a      	str	r2, [r3, #0]
		LED[0] = 0;
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <CheckGuess+0x22c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
		LED[1] = 0;
 8000dca:	4b6e      	ldr	r3, [pc, #440]	@ (8000f84 <CheckGuess+0x22c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
		LED[2] = 0;
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8000f84 <CheckGuess+0x22c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
		RxBuffer[0] = 0;
 8000dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f8c <CheckGuess+0x234>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, "Reset!\n\r", strlen("Reset!\n\r"),5);
 8000ddc:	2305      	movs	r3, #5
 8000dde:	2208      	movs	r2, #8
 8000de0:	496b      	ldr	r1, [pc, #428]	@ (8000f90 <CheckGuess+0x238>)
 8000de2:	486c      	ldr	r0, [pc, #432]	@ (8000f94 <CheckGuess+0x23c>)
 8000de4:	f004 faba 	bl	800535c <HAL_UART_Transmit>
		RandomNumber();
 8000de8:	f7ff ff08 	bl	8000bfc <RandomNumber>
		guessNumber = 0;
 8000dec:	4b6a      	ldr	r3, [pc, #424]	@ (8000f98 <CheckGuess+0x240>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
		guessCount = 3;
 8000df2:	4b62      	ldr	r3, [pc, #392]	@ (8000f7c <CheckGuess+0x224>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	601a      	str	r2, [r3, #0]
//	if(guessCount > -1 && guessCount < 3){
//		LED[guessCount+1] = 1;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount+1]);
//	}

	if(ButtonState == 128){
 8000df8:	4b68      	ldr	r3, [pc, #416]	@ (8000f9c <CheckGuess+0x244>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2b80      	cmp	r3, #128	@ 0x80
 8000dfe:	d105      	bne.n	8000e0c <CheckGuess+0xb4>
		Button_state_ok = 1;
 8000e00:	4b67      	ldr	r3, [pc, #412]	@ (8000fa0 <CheckGuess+0x248>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
		Trn_state = 0;
 8000e06:	4b67      	ldr	r3, [pc, #412]	@ (8000fa4 <CheckGuess+0x24c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

	}
	if(Button_state_ok == 1 && ButtonState == 0){
 8000e0c:	4b64      	ldr	r3, [pc, #400]	@ (8000fa0 <CheckGuess+0x248>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80b1 	bne.w	8000f78 <CheckGuess+0x220>
 8000e16:	4b61      	ldr	r3, [pc, #388]	@ (8000f9c <CheckGuess+0x244>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 80ac 	bne.w	8000f78 <CheckGuess+0x220>

		if(secretNumber==guessNumber){
 8000e20:	4b61      	ldr	r3, [pc, #388]	@ (8000fa8 <CheckGuess+0x250>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b5c      	ldr	r3, [pc, #368]	@ (8000f98 <CheckGuess+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d10e      	bne.n	8000e4a <CheckGuess+0xf2>
			HAL_UART_Transmit(&hlpuart1, "Correct!\n\r", strlen("Correct!\n\r"),5);
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	220a      	movs	r2, #10
 8000e30:	495e      	ldr	r1, [pc, #376]	@ (8000fac <CheckGuess+0x254>)
 8000e32:	4858      	ldr	r0, [pc, #352]	@ (8000f94 <CheckGuess+0x23c>)
 8000e34:	f004 fa92 	bl	800535c <HAL_UART_Transmit>

			RandomNumber();
 8000e38:	f7ff fee0 	bl	8000bfc <RandomNumber>
			Button_state_ok = 0;
 8000e3c:	4b58      	ldr	r3, [pc, #352]	@ (8000fa0 <CheckGuess+0x248>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
			guessNumber = 0;
 8000e42:	4b55      	ldr	r3, [pc, #340]	@ (8000f98 <CheckGuess+0x240>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
			Button = 1; //clear
			Button_state_clr = 0;
		}
	}
}
	}
 8000e48:	e096      	b.n	8000f78 <CheckGuess+0x220>
		}else if(secretNumber!=guessNumber){
 8000e4a:	4b57      	ldr	r3, [pc, #348]	@ (8000fa8 <CheckGuess+0x250>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b52      	ldr	r3, [pc, #328]	@ (8000f98 <CheckGuess+0x240>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f000 8090 	beq.w	8000f78 <CheckGuess+0x220>
			if(Trn_state == 0){
 8000e58:	4b52      	ldr	r3, [pc, #328]	@ (8000fa4 <CheckGuess+0x24c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d13f      	bne.n	8000ee0 <CheckGuess+0x188>
				if(secretNumber > guessNumber)
 8000e60:	4b51      	ldr	r3, [pc, #324]	@ (8000fa8 <CheckGuess+0x250>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b4c      	ldr	r3, [pc, #304]	@ (8000f98 <CheckGuess+0x240>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dd19      	ble.n	8000ea0 <CheckGuess+0x148>
					Trn_state = 1;
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa4 <CheckGuess+0x24c>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
					guessCount--;
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <CheckGuess+0x224>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a40      	ldr	r2, [pc, #256]	@ (8000f7c <CheckGuess+0x224>)
 8000e7a:	6013      	str	r3, [r2, #0]
					Button_state_ok = 0;
 8000e7c:	4b48      	ldr	r3, [pc, #288]	@ (8000fa0 <CheckGuess+0x248>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
					guessNumber = 0;
 8000e82:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <CheckGuess+0x240>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
					LED[guessCount] = 1;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <CheckGuess+0x224>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <CheckGuess+0x22c>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					HAL_UART_Transmit(&hlpuart1, "Too high!\n\r", strlen("Too high!\n\r"),5);
 8000e94:	2305      	movs	r3, #5
 8000e96:	220b      	movs	r2, #11
 8000e98:	4945      	ldr	r1, [pc, #276]	@ (8000fb0 <CheckGuess+0x258>)
 8000e9a:	483e      	ldr	r0, [pc, #248]	@ (8000f94 <CheckGuess+0x23c>)
 8000e9c:	f004 fa5e 	bl	800535c <HAL_UART_Transmit>
				if(secretNumber < guessNumber)
 8000ea0:	4b41      	ldr	r3, [pc, #260]	@ (8000fa8 <CheckGuess+0x250>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8000f98 <CheckGuess+0x240>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	da19      	bge.n	8000ee0 <CheckGuess+0x188>
					Trn_state = 1;
 8000eac:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa4 <CheckGuess+0x24c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
					guessCount--;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <CheckGuess+0x224>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	4a30      	ldr	r2, [pc, #192]	@ (8000f7c <CheckGuess+0x224>)
 8000eba:	6013      	str	r3, [r2, #0]
					Button_state_ok = 0;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <CheckGuess+0x248>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
					guessNumber = 0;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <CheckGuess+0x240>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
					LED[guessCount] = 1;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <CheckGuess+0x224>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f84 <CheckGuess+0x22c>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					HAL_UART_Transmit(&hlpuart1, "Too low!\n\r", strlen("Too low!\n\r"),5);
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	220a      	movs	r2, #10
 8000ed8:	4936      	ldr	r1, [pc, #216]	@ (8000fb4 <CheckGuess+0x25c>)
 8000eda:	482e      	ldr	r0, [pc, #184]	@ (8000f94 <CheckGuess+0x23c>)
 8000edc:	f004 fa3e 	bl	800535c <HAL_UART_Transmit>
			if(guessCount == 2){
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <CheckGuess+0x224>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d110      	bne.n	8000f0a <CheckGuess+0x1b2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, LED[guessCount]);
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <CheckGuess+0x224>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <CheckGuess+0x22c>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 fb40 	bl	8002580 <HAL_GPIO_WritePin>
				data[guessCount] = 0x00;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <CheckGuess+0x224>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb8 <CheckGuess+0x260>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	54d1      	strb	r1, [r2, r3]
			if(guessCount == 1){
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <CheckGuess+0x224>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d110      	bne.n	8000f34 <CheckGuess+0x1dc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, LED[guessCount]);
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <CheckGuess+0x224>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <CheckGuess+0x22c>)
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2110      	movs	r1, #16
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f001 fb2b 	bl	8002580 <HAL_GPIO_WritePin>
				data[guessCount] = 0x00;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <CheckGuess+0x224>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a22      	ldr	r2, [pc, #136]	@ (8000fb8 <CheckGuess+0x260>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
			if(guessCount == 0)
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <CheckGuess+0x224>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d112      	bne.n	8000f62 <CheckGuess+0x20a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED[guessCount]);
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <CheckGuess+0x224>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a10      	ldr	r2, [pc, #64]	@ (8000f84 <CheckGuess+0x22c>)
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <CheckGuess+0x230>)
 8000f4e:	f001 fb17 	bl	8002580 <HAL_GPIO_WritePin>
				data[guessCount] = 0x00;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <CheckGuess+0x224>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <CheckGuess+0x260>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]
				guessCount = 3;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <CheckGuess+0x224>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	601a      	str	r2, [r3, #0]
	if(ButtonState == 2048){
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <CheckGuess+0x244>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f6a:	d105      	bne.n	8000f78 <CheckGuess+0x220>
			Button = 1; //clear
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <CheckGuess+0x264>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
			Button_state_clr = 0;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <CheckGuess+0x268>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000480 	.word	0x20000480
 8000f84:	200004ac 	.word	0x200004ac
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	200004b8 	.word	0x200004b8
 8000f90:	08007c48 	.word	0x08007c48
 8000f94:	200001d8 	.word	0x200001d8
 8000f98:	200004a8 	.word	0x200004a8
 8000f9c:	20000484 	.word	0x20000484
 8000fa0:	200004a0 	.word	0x200004a0
 8000fa4:	200004bc 	.word	0x200004bc
 8000fa8:	20000488 	.word	0x20000488
 8000fac:	08007c54 	.word	0x08007c54
 8000fb0:	08007c60 	.word	0x08007c60
 8000fb4:	08007c6c 	.word	0x08007c6c
 8000fb8:	2000003c 	.word	0x2000003c
 8000fbc:	2000049c 	.word	0x2000049c
 8000fc0:	200004a4 	.word	0x200004a4

08000fc4 <UARTDMAConfig>:
void UARTDMAConfig()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4903      	ldr	r1, [pc, #12]	@ (8000fd8 <UARTDMAConfig+0x14>)
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <UARTDMAConfig+0x18>)
 8000fce:	f004 fa53 	bl	8005478 <HAL_UART_Receive_DMA>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004b8 	.word	0x200004b8
 8000fdc:	200001d8 	.word	0x200001d8

08000fe0 <EEPROMWriteExample>:
void EEPROMWriteExample()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <EEPROMWriteExample+0x3c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d012      	beq.n	8001014 <EEPROMWriteExample+0x34>
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <EEPROMWriteExample+0x40>)
 8000ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	d10c      	bne.n	8001014 <EEPROMWriteExample+0x34>
		//static uint8_t data[4] = { 0xff, 0x00, 0x55, 0xaa };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 3);
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <EEPROMWriteExample+0x44>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	222c      	movs	r2, #44	@ 0x2c
 8001006:	21a0      	movs	r1, #160	@ 0xa0
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <EEPROMWriteExample+0x40>)
 800100a:	f001 fb8f 	bl	800272c <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 800100e:	4b03      	ldr	r3, [pc, #12]	@ (800101c <EEPROMWriteExample+0x3c>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
	}
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200004c0 	.word	0x200004c0
 8001020:	200000c4 	.word	0x200000c4
 8001024:	2000003c 	.word	0x2000003c

08001028 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <EEPROMReadExample+0x44>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d012      	beq.n	8001062 <EEPROMReadExample+0x3a>
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <EEPROMReadExample+0x48>)
 800103e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b20      	cmp	r3, #32
 8001046:	d10c      	bne.n	8001062 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2302      	movs	r3, #2
 8001052:	222c      	movs	r2, #44	@ 0x2c
 8001054:	21a0      	movs	r1, #160	@ 0xa0
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <EEPROMReadExample+0x48>)
 8001058:	f001 fbf2 	bl	8002840 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <EEPROMReadExample+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	}
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200004c1 	.word	0x200004c1
 8001070:	200000c4 	.word	0x200000c4

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <Error_Handler+0x8>

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	@ 0x60
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x44>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x44>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010b6:	f003 f975 	bl	80043a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0a0      	sub	sp, #128	@ 0x80
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2254      	movs	r2, #84	@ 0x54
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 ff06 	bl	8006efa <memset>
  if(hi2c->Instance==I2C1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001270 <HAL_I2C_MspInit+0x1a8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	f040 80b6 	bne.w	8001266 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010fa:	2340      	movs	r3, #64	@ 0x40
 80010fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fe8a 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001112:	f7ff ffaf 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b57      	ldr	r3, [pc, #348]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a56      	ldr	r2, [pc, #344]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b54      	ldr	r3, [pc, #336]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b51      	ldr	r3, [pc, #324]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a50      	ldr	r2, [pc, #320]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b4e      	ldr	r3, [pc, #312]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001158:	2304      	movs	r3, #4
 800115a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001166:	f001 f871 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
 800117c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001182:	4619      	mov	r1, r3
 8001184:	483c      	ldr	r0, [pc, #240]	@ (8001278 <HAL_I2C_MspInit+0x1b0>)
 8001186:	f001 f861 	bl	800224c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	4a39      	ldr	r2, [pc, #228]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001194:	6593      	str	r3, [r2, #88]	@ 0x58
 8001196:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <HAL_I2C_MspInit+0x1ac>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 80011a2:	4b36      	ldr	r3, [pc, #216]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011a4:	4a36      	ldr	r2, [pc, #216]	@ (8001280 <HAL_I2C_MspInit+0x1b8>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80011a8:	4b34      	ldr	r3, [pc, #208]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b31      	ldr	r3, [pc, #196]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011d8:	4828      	ldr	r0, [pc, #160]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011da:	f000 fcf7 	bl	8001bcc <HAL_DMA_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80011e4:	f7ff ff46 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a24      	ldr	r2, [pc, #144]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <HAL_I2C_MspInit+0x1b4>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 80011f6:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <HAL_I2C_MspInit+0x1c0>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 80011fc:	2211      	movs	r2, #17
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001202:	2210      	movs	r2, #16
 8001204:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 800122c:	f000 fcce 	bl	8001bcc <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001236:	f7ff ff1d 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a11      	ldr	r2, [pc, #68]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 800123e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_I2C_MspInit+0x1bc>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201f      	movs	r0, #31
 800124c:	f000 fc89 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001250:	201f      	movs	r0, #31
 8001252:	f000 fca0 	bl	8001b96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2020      	movs	r0, #32
 800125c:	f000 fc81 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001260:	2020      	movs	r0, #32
 8001262:	f000 fc98 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3780      	adds	r7, #128	@ 0x80
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40005400 	.word	0x40005400
 8001274:	40021000 	.word	0x40021000
 8001278:	48000400 	.word	0x48000400
 800127c:	20000118 	.word	0x20000118
 8001280:	40020058 	.word	0x40020058
 8001284:	20000178 	.word	0x20000178
 8001288:	4002006c 	.word	0x4002006c

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0a0      	sub	sp, #128	@ 0x80
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	2254      	movs	r2, #84	@ 0x54
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fe24 	bl	8006efa <memset>
  if(huart->Instance==LPUART1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a99      	ldr	r2, [pc, #612]	@ (800151c <HAL_UART_MspInit+0x290>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f040 8093 	bne.w	80013e4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012be:	2320      	movs	r3, #32
 80012c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fda8 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012d6:	f7ff fecd 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012da:	4b91      	ldr	r3, [pc, #580]	@ (8001520 <HAL_UART_MspInit+0x294>)
 80012dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012de:	4a90      	ldr	r2, [pc, #576]	@ (8001520 <HAL_UART_MspInit+0x294>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012e6:	4b8e      	ldr	r3, [pc, #568]	@ (8001520 <HAL_UART_MspInit+0x294>)
 80012e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001520 <HAL_UART_MspInit+0x294>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a8a      	ldr	r2, [pc, #552]	@ (8001520 <HAL_UART_MspInit+0x294>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_UART_MspInit+0x294>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800130a:	230c      	movs	r3, #12
 800130c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800131a:	230c      	movs	r3, #12
 800131c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f000 ff90 	bl	800224c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800132c:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <HAL_UART_MspInit+0x298>)
 800132e:	4a7e      	ldr	r2, [pc, #504]	@ (8001528 <HAL_UART_MspInit+0x29c>)
 8001330:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001332:	4b7c      	ldr	r3, [pc, #496]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001334:	2222      	movs	r2, #34	@ 0x22
 8001336:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b7a      	ldr	r3, [pc, #488]	@ (8001524 <HAL_UART_MspInit+0x298>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b79      	ldr	r3, [pc, #484]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134a:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <HAL_UART_MspInit+0x298>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001350:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001356:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001358:	2220      	movs	r2, #32
 800135a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b71      	ldr	r3, [pc, #452]	@ (8001524 <HAL_UART_MspInit+0x298>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001362:	4870      	ldr	r0, [pc, #448]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001364:	f000 fc32 	bl	8001bcc <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800136e:	f7ff fe81 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a6b      	ldr	r2, [pc, #428]	@ (8001524 <HAL_UART_MspInit+0x298>)
 8001376:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800137a:	4a6a      	ldr	r2, [pc, #424]	@ (8001524 <HAL_UART_MspInit+0x298>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001380:	4b6a      	ldr	r3, [pc, #424]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 8001382:	4a6b      	ldr	r2, [pc, #428]	@ (8001530 <HAL_UART_MspInit+0x2a4>)
 8001384:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001386:	4b69      	ldr	r3, [pc, #420]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 8001388:	2223      	movs	r2, #35	@ 0x23
 800138a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800138c:	4b67      	ldr	r3, [pc, #412]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 800138e:	2210      	movs	r2, #16
 8001390:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b64      	ldr	r3, [pc, #400]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139e:	4b63      	ldr	r3, [pc, #396]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a4:	4b61      	ldr	r3, [pc, #388]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80013aa:	4b60      	ldr	r3, [pc, #384]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013b0:	4b5e      	ldr	r3, [pc, #376]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80013b6:	485d      	ldr	r0, [pc, #372]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013b8:	f000 fc08 	bl	8001bcc <HAL_DMA_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80013c2:	f7ff fe57 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a58      	ldr	r2, [pc, #352]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80013cc:	4a57      	ldr	r2, [pc, #348]	@ (800152c <HAL_UART_MspInit+0x2a0>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	205b      	movs	r0, #91	@ 0x5b
 80013d8:	f000 fbc3 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80013dc:	205b      	movs	r0, #91	@ 0x5b
 80013de:	f000 fbda 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013e2:	e096      	b.n	8001512 <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a52      	ldr	r2, [pc, #328]	@ (8001534 <HAL_UART_MspInit+0x2a8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f040 8091 	bne.w	8001512 <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fd0f 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001408:	f7ff fe34 	bl	8001074 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <HAL_UART_MspInit+0x294>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001410:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <HAL_UART_MspInit+0x294>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6613      	str	r3, [r2, #96]	@ 0x60
 8001418:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_UART_MspInit+0x294>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <HAL_UART_MspInit+0x294>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	4a3d      	ldr	r2, [pc, #244]	@ (8001520 <HAL_UART_MspInit+0x294>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001430:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <HAL_UART_MspInit+0x294>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800143c:	2330      	movs	r3, #48	@ 0x30
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144c:	2307      	movs	r3, #7
 800144e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001454:	4619      	mov	r1, r3
 8001456:	4838      	ldr	r0, [pc, #224]	@ (8001538 <HAL_UART_MspInit+0x2ac>)
 8001458:	f000 fef8 	bl	800224c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800145c:	4b37      	ldr	r3, [pc, #220]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 800145e:	4a38      	ldr	r2, [pc, #224]	@ (8001540 <HAL_UART_MspInit+0x2b4>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001464:	2218      	movs	r2, #24
 8001466:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001468:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b33      	ldr	r3, [pc, #204]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147a:	4b30      	ldr	r3, [pc, #192]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001480:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001488:	2220      	movs	r2, #32
 800148a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001492:	482a      	ldr	r0, [pc, #168]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 8001494:	f000 fb9a 	bl	8001bcc <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800149e:	f7ff fde9 	bl	8001074 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a25      	ldr	r2, [pc, #148]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 80014a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014aa:	4a24      	ldr	r2, [pc, #144]	@ (800153c <HAL_UART_MspInit+0x2b0>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014b2:	4a25      	ldr	r2, [pc, #148]	@ (8001548 <HAL_UART_MspInit+0x2bc>)
 80014b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014b8:	2219      	movs	r2, #25
 80014ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014be:	2210      	movs	r2, #16
 80014c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014e6:	4817      	ldr	r0, [pc, #92]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014e8:	f000 fb70 	bl	8001bcc <HAL_DMA_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80014f2:	f7ff fdbf 	bl	8001074 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_UART_MspInit+0x2b8>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2025      	movs	r0, #37	@ 0x25
 8001508:	f000 fb2b 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150c:	2025      	movs	r0, #37	@ 0x25
 800150e:	f000 fb42 	bl	8001b96 <HAL_NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3780      	adds	r7, #128	@ 0x80
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40008000 	.word	0x40008000
 8001520:	40021000 	.word	0x40021000
 8001524:	20000300 	.word	0x20000300
 8001528:	40020030 	.word	0x40020030
 800152c:	20000360 	.word	0x20000360
 8001530:	40020044 	.word	0x40020044
 8001534:	40013800 	.word	0x40013800
 8001538:	48000800 	.word	0x48000800
 800153c:	200003c0 	.word	0x200003c0
 8001540:	40020008 	.word	0x40020008
 8001544:	20000420 	.word	0x20000420
 8001548:	4002001c 	.word	0x4002001c

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a2:	f000 f9c3 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <DMA1_Channel1_IRQHandler+0x10>)
 80015b2:	f000 fcee 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003c0 	.word	0x200003c0

080015c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <DMA1_Channel2_IRQHandler+0x10>)
 80015c6:	f000 fce4 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000420 	.word	0x20000420

080015d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA1_Channel3_IRQHandler+0x10>)
 80015da:	f000 fcda 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000300 	.word	0x20000300

080015e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel4_IRQHandler+0x10>)
 80015ee:	f000 fcd0 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000360 	.word	0x20000360

080015fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <DMA1_Channel5_IRQHandler+0x10>)
 8001602:	f000 fcc6 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000118 	.word	0x20000118

08001610 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Channel6_IRQHandler+0x10>)
 8001616:	f000 fcbc 	bl	8001f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000178 	.word	0x20000178

08001624 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <I2C1_EV_IRQHandler+0x10>)
 800162a:	f001 f98f 	bl	800294c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000c4 	.word	0x200000c4

08001638 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <I2C1_ER_IRQHandler+0x10>)
 800163e:	f001 f99f 	bl	8002980 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000c4 	.word	0x200000c4

0800164c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <USART1_IRQHandler+0x10>)
 8001652:	f003 ff5d 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000026c 	.word	0x2000026c

08001660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001664:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001668:	f000 ffa2 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <LPUART1_IRQHandler+0x10>)
 8001676:	f003 ff4b 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001d8 	.word	0x200001d8

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169e:	f005 fc7b 	bl	8006f98 <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <_exit+0x12>

080016ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e00a      	b.n	80016f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016dc:	f3af 8000 	nop.w
 80016e0:	4601      	mov	r1, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <_read+0x12>
  }

  return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e009      	b.n	800172a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf1      	blt.n	8001716 <_write+0x12>
  }
  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_close>:

int _close(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001764:	605a      	str	r2, [r3, #4]
  return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_isatty>:

int _isatty(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f005 fbe0 	bl	8006f98 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	200004d0 	.word	0x200004d0
 800180c:	20000628 	.word	0x20000628

08001810 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001834:	480d      	ldr	r0, [pc, #52]	@ (800186c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001836:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopForever+0x6>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopForever+0xe>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopForever+0x16>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f005 fb9f 	bl	8006fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001866:	f7fe fea3 	bl	80005b0 <main>

0800186a <LoopForever>:

LoopForever:
    b LoopForever
 800186a:	e7fe      	b.n	800186a <LoopForever>
  ldr   r0, =_estack
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001878:	08007da8 	.word	0x08007da8
  ldr r2, =_sbss
 800187c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001880:	20000624 	.word	0x20000624

08001884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_2_IRQHandler>

08001886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f95b 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f80e 	bl	80018b8 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	e001      	b.n	80018ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018a8:	f7ff fbea 	bl	8001080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ac:	79fb      	ldrb	r3, [r7, #7]

}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_InitTick+0x68>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d022      	beq.n	8001912 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_InitTick+0x6c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <HAL_InitTick+0x68>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f966 	bl	8001bb2 <HAL_SYSTICK_Config>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	d809      	bhi.n	8001906 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f2:	2200      	movs	r2, #0
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	f000 f932 	bl	8001b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_InitTick+0x70>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e007      	b.n	8001916 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	e004      	b.n	8001916 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e001      	b.n	8001916 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000048 	.word	0x20000048
 8001924:	20000040 	.word	0x20000040
 8001928:	20000044 	.word	0x20000044

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_IncTick+0x1c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x20>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a03      	ldr	r2, [pc, #12]	@ (8001948 <HAL_IncTick+0x1c>)
 800193c:	6013      	str	r3, [r2, #0]
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	200004d4 	.word	0x200004d4
 800194c:	20000048 	.word	0x20000048

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200004d4 	.word	0x200004d4

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d004      	beq.n	800198c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_Delay+0x40>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198c:	bf00      	nop
 800198e:	f7ff ffdf 	bl	8001950 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	429a      	cmp	r2, r3
 800199c:	d8f7      	bhi.n	800198e <HAL_Delay+0x26>
  {
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000048 	.word	0x20000048

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff40 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff90 	bl	8001aa0 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5f 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff33 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa4 	bl	8001b08 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08d      	b.n	8001cfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_DMA_Init+0x138>)
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d80f      	bhi.n	8001c0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <HAL_DMA_Init+0x13c>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a45      	ldr	r2, [pc, #276]	@ (8001d0c <HAL_DMA_Init+0x140>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	009a      	lsls	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a42      	ldr	r2, [pc, #264]	@ (8001d10 <HAL_DMA_Init+0x144>)
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c08:	e00e      	b.n	8001c28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <HAL_DMA_Init+0x148>)
 8001c12:	4413      	add	r3, r2
 8001c14:	4a3d      	ldr	r2, [pc, #244]	@ (8001d0c <HAL_DMA_Init+0x140>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a3c      	ldr	r2, [pc, #240]	@ (8001d18 <HAL_DMA_Init+0x14c>)
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fa84 	bl	8002188 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c88:	d102      	bne.n	8001c90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ca4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <HAL_DMA_Init+0x104>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d80c      	bhi.n	8001cd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 faa4 	bl	8002204 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	e008      	b.n	8001ce2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40020407 	.word	0x40020407
 8001d08:	bffdfff8 	.word	0xbffdfff8
 8001d0c:	cccccccd 	.word	0xcccccccd
 8001d10:	40020000 	.word	0x40020000
 8001d14:	bffdfbf8 	.word	0xbffdfbf8
 8001d18:	40020400 	.word	0x40020400

08001d1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Start_IT+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e066      	b.n	8001e0a <HAL_DMA_Start_IT+0xee>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d155      	bne.n	8001dfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f9c9 	bl	800210c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 020e 	orr.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00f      	b.n	8001db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 020a 	orr.w	r2, r2, #10
 8001db2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e005      	b.n	8001e08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
 8001e06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d005      	beq.n	8001e36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e037      	b.n	8001ea6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 020e 	bic.w	r2, r2, #14
 8001e44:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e54:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e82:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ea4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e047      	b.n	8001f88 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
    }
  }
  return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d026      	beq.n	800200c <HAL_DMA_IRQHandler+0x7a>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d021      	beq.n	800200c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0204 	bic.w	r2, r2, #4
 8001fe4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d071      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800200a:	e06c      	b.n	80020e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2202      	movs	r2, #2
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02e      	beq.n	800207e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d029      	beq.n	800207e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 020a 	bic.w	r2, r2, #10
 8002046:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2102      	movs	r1, #2
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d038      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800207c:	e033      	b.n	80020e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2208      	movs	r2, #8
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d025      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020e 	bic.w	r2, r2, #14
 80020aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
}
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020fe:	b2db      	uxtb	r3, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002122:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002134:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f003 021f 	and.w	r2, r3, #31
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002198:	429a      	cmp	r2, r3
 800219a:	d802      	bhi.n	80021a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e001      	b.n	80021a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3b08      	subs	r3, #8
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80021d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2201      	movs	r2, #1
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40020407 	.word	0x40020407
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020820 	.word	0x40020820
 80021fc:	cccccccd 	.word	0xcccccccd
 8002200:	40020880 	.word	0x40020880

08002204 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002226:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	1000823f 	.word	0x1000823f
 8002248:	40020940 	.word	0x40020940

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800225a:	e15a      	b.n	8002512 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 814c 	beq.w	800250c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a6 	beq.w	800250c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <HAL_GPIO_Init+0x2e4>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002530 <HAL_GPIO_Init+0x2e4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80023cc:	4b58      	ldr	r3, [pc, #352]	@ (8002530 <HAL_GPIO_Init+0x2e4>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d8:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002402:	d01f      	beq.n	8002444 <HAL_GPIO_Init+0x1f8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x2ec>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d019      	beq.n	8002440 <HAL_GPIO_Init+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x1f0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_GPIO_Init+0x2f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a49      	ldr	r2, [pc, #292]	@ (8002544 <HAL_GPIO_Init+0x2f8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a48      	ldr	r2, [pc, #288]	@ (8002548 <HAL_GPIO_Init+0x2fc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1e4>
 800242c:	2305      	movs	r3, #5
 800242e:	e00a      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002430:	2306      	movs	r3, #6
 8002432:	e008      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002434:	2304      	movs	r3, #4
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002438:	2303      	movs	r3, #3
 800243a:	e004      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 800243c:	2302      	movs	r3, #2
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002444:	2300      	movs	r3, #0
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002456:	4937      	ldr	r1, [pc, #220]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002464:	4b39      	ldr	r3, [pc, #228]	@ (800254c <HAL_GPIO_Init+0x300>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002488:	4a30      	ldr	r2, [pc, #192]	@ (800254c <HAL_GPIO_Init+0x300>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800248e:	4b2f      	ldr	r3, [pc, #188]	@ (800254c <HAL_GPIO_Init+0x300>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b2:	4a26      	ldr	r2, [pc, #152]	@ (800254c <HAL_GPIO_Init+0x300>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <HAL_GPIO_Init+0x300>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024dc:	4a1b      	ldr	r2, [pc, #108]	@ (800254c <HAL_GPIO_Init+0x300>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_GPIO_Init+0x300>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002506:	4a11      	ldr	r2, [pc, #68]	@ (800254c <HAL_GPIO_Init+0x300>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f ae9d 	bne.w	800225c <HAL_GPIO_Init+0x10>
  }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00
 8002544:	48001000 	.word	0x48001000
 8002548:	48001400 	.word	0x48001400
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e001      	b.n	8002572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f806 	bl	80025e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e08d      	b.n	8002724 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe fd53 	bl	80010c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2224      	movs	r2, #36	@ 0x24
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002646:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002656:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800267c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d108      	bne.n	8002698 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e007      	b.n	80026a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69d9      	ldr	r1, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	461a      	mov	r2, r3
 800273a:	4603      	mov	r3, r0
 800273c:	817b      	strh	r3, [r7, #10]
 800273e:	460b      	mov	r3, r1
 8002740:	813b      	strh	r3, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	d16a      	bne.n	8002828 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_I2C_Mem_Write_IT+0x32>
 8002758:	8bbb      	ldrh	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e05f      	b.n	800282a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002778:	d101      	bne.n	800277e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	e055      	b.n	800282a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2C_Mem_Write_IT+0x60>
 8002788:	2302      	movs	r3, #2
 800278a:	e04e      	b.n	800282a <HAL_I2C_Mem_Write_IT+0xfe>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2221      	movs	r2, #33	@ 0x21
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8bba      	ldrh	r2, [r7, #28]
 80027ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_I2C_Mem_Write_IT+0x108>)
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_I2C_Mem_Write_IT+0x10c>)
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80027c8:	897a      	ldrh	r2, [r7, #10]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d109      	bne.n	80027e8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80027e6:	e00b      	b.n	8002800 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027e8:	893b      	ldrh	r3, [r7, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_I2C_Mem_Write_IT+0x110>)
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 fb78 	bl	8003f04 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800281c:	2101      	movs	r1, #1
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f001 fba2 	bl	8003f68 <I2C_Enable_IRQ>

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	ffff0000 	.word	0xffff0000
 8002838:	08002b09 	.word	0x08002b09
 800283c:	80002000 	.word	0x80002000

08002840 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b20      	cmp	r3, #32
 8002864:	d166      	bne.n	8002934 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_I2C_Mem_Read_IT+0x32>
 800286c:	8bbb      	ldrh	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e05b      	b.n	8002936 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	e051      	b.n	8002936 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Mem_Read_IT+0x60>
 800289c:	2302      	movs	r3, #2
 800289e:	e04a      	b.n	8002936 <HAL_I2C_Mem_Read_IT+0xf6>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2222      	movs	r2, #34	@ 0x22
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8bba      	ldrh	r2, [r7, #28]
 80028c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_I2C_Mem_Read_IT+0x100>)
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <HAL_I2C_Mem_Read_IT+0x104>)
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80028d6:	897a      	ldrh	r2, [r7, #10]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d109      	bne.n	80028f6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295
 80028f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80028f4:	e00b      	b.n	800290e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	8979      	ldrh	r1, [r7, #10]
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_I2C_Mem_Read_IT+0x108>)
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f001 faf2 	bl	8003f04 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002928:	2101      	movs	r1, #1
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f001 fb1c 	bl	8003f68 <I2C_Enable_IRQ>

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	ffff0000 	.word	0xffff0000
 8002944:	08002b09 	.word	0x08002b09
 8002948:	80002000 	.word	0x80002000

0800294c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
  }
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00f      	beq.n	80029c2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00f      	beq.n	80029ec <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f043 0208 	orr.w	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00f      	beq.n	8002a16 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	f043 0202 	orr.w	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 030b 	and.w	r3, r3, #11
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f001 f911 	bl	8003c50 <I2C_ITError>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
 8002a92:	4613      	mov	r3, r2
 8002a94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b14:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <I2C_Mem_ISR_IT+0x244>)
 8002b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <I2C_Mem_ISR_IT+0x22>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e10c      	b.n	8002d44 <I2C_Mem_ISR_IT+0x23c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f001 f98f 	bl	8003e7e <I2C_Flush_TXDR>
 8002b60:	e0dd      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d022      	beq.n	8002bb2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bb0:	e0b5      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02c      	beq.n	8002c16 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d027      	beq.n	8002c16 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d118      	bne.n	8002c02 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c00:	e08d      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c14:	e083      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03c      	beq.n	8002c9a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d037      	beq.n	8002c9a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d02c      	beq.n	8002c8e <I2C_Mem_ISR_IT+0x186>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d128      	bne.n	8002c8e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2bff      	cmp	r3, #255	@ 0xff
 8002c44:	d910      	bls.n	8002c68 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	@ 0xff
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c50:	b299      	uxth	r1, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f001 f94f 	bl	8003f04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c66:	e017      	b.n	8002c98 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	b299      	uxth	r1, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 f93c 	bl	8003f04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8c:	e004      	b.n	8002c98 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 ffdd 	bl	8003c50 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c96:	e042      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
 8002c98:	e041      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d03c      	beq.n	8002d1e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d037      	beq.n	8002d1e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 f9dd 	bl	8004070 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f001 f955 	bl	8003f68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b22      	cmp	r3, #34	@ 0x22
 8002cc8:	d101      	bne.n	8002cce <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <I2C_Mem_ISR_IT+0x248>)
 8002ccc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2bff      	cmp	r3, #255	@ 0xff
 8002cd6:	d910      	bls.n	8002cfa <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	22ff      	movs	r2, #255	@ 0xff
 8002cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f001 f906 	bl	8003f04 <I2C_TransferConfig>
 8002cf8:	e011      	b.n	8002d1e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f001 f8f3 	bl	8003f04 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fd0b 	bl	8003750 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	80002000 	.word	0x80002000
 8002d50:	80002400 	.word	0x80002400

08002d54 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <I2C_Slave_ISR_IT+0x24>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0e2      	b.n	8002f3e <I2C_Slave_ISR_IT+0x1ea>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fda2 	bl	80038e0 <I2C_ITSlaveCplt>
 8002d9c:	e0ca      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04b      	beq.n	8002e40 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d046      	beq.n	8002e40 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d128      	bne.n	8002e0e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b28      	cmp	r3, #40	@ 0x28
 8002dc6:	d108      	bne.n	8002dda <I2C_Slave_ISR_IT+0x86>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dce:	d104      	bne.n	8002dda <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dd0:	6939      	ldr	r1, [r7, #16]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fee8 	bl	8003ba8 <I2C_ITListenCplt>
 8002dd8:	e031      	b.n	8002e3e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b29      	cmp	r3, #41	@ 0x29
 8002de4:	d10e      	bne.n	8002e04 <I2C_Slave_ISR_IT+0xb0>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dec:	d00a      	beq.n	8002e04 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2210      	movs	r2, #16
 8002df4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f001 f841 	bl	8003e7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fc4b 	bl	8003698 <I2C_ITSlaveSeqCplt>
 8002e02:	e01c      	b.n	8002e3e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e0c:	e08f      	b.n	8002f2e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2210      	movs	r2, #16
 8002e14:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <I2C_Slave_ISR_IT+0xdc>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2e:	d17e      	bne.n	8002f2e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 ff0a 	bl	8003c50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e3c:	e077      	b.n	8002f2e <I2C_Slave_ISR_IT+0x1da>
 8002e3e:	e076      	b.n	8002f2e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d02f      	beq.n	8002eaa <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02a      	beq.n	8002eaa <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d14b      	bne.n	8002f32 <I2C_Slave_ISR_IT+0x1de>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ea0:	d047      	beq.n	8002f32 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fbf8 	bl	8003698 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ea8:	e043      	b.n	8002f32 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ebe:	6939      	ldr	r1, [r7, #16]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fb28 	bl	8003516 <I2C_ITAddrCplt>
 8002ec6:	e035      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d030      	beq.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02b      	beq.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f16:	e00d      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f1e:	d002      	beq.n	8002f26 <I2C_Slave_ISR_IT+0x1d2>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fbb6 	bl	8003698 <I2C_ITSlaveSeqCplt>
 8002f2c:	e002      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002f32:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b088      	sub	sp, #32
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <I2C_Master_ISR_DMA+0x1a>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0d9      	b.n	8003114 <I2C_Master_ISR_DMA+0x1ce>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d011      	beq.n	8002fa0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f90:	2120      	movs	r1, #32
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 ffe8 	bl	8003f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 ff70 	bl	8003e7e <I2C_Flush_TXDR>
 8002f9e:	e0b4      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d071      	beq.n	800308e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d06c      	beq.n	800308e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d04e      	beq.n	800306c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fda:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2bff      	cmp	r3, #255	@ 0xff
 8002fe4:	d906      	bls.n	8002ff4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	22ff      	movs	r2, #255	@ 0xff
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002fec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e010      	b.n	8003016 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003006:	d003      	beq.n	8003010 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e002      	b.n	8003016 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003010:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003014:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8a79      	ldrh	r1, [r7, #18]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 ff6d 	bl	8003f04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b22      	cmp	r3, #34	@ 0x22
 8003046:	d108      	bne.n	800305a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003056:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003058:	e057      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003068:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800306a:	e04e      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800307a:	d003      	beq.n	8003084 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 face 	bl	800361e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003082:	e042      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003084:	2140      	movs	r1, #64	@ 0x40
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fde2 	bl	8003c50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800308c:	e03d      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d028      	beq.n	80030ea <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d023      	beq.n	80030ea <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d119      	bne.n	80030e0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030ba:	d025      	beq.n	8003108 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030c4:	d108      	bne.n	80030d8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030d4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80030d6:	e017      	b.n	8003108 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 faa0 	bl	800361e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80030de:	e013      	b.n	8003108 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030e0:	2140      	movs	r1, #64	@ 0x40
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fdb4 	bl	8003c50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030e8:	e00e      	b.n	8003108 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fb25 	bl	8003750 <I2C_ITMasterCplt>
 8003106:	e000      	b.n	800310a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003108:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003128:	4b8d      	ldr	r3, [pc, #564]	@ (8003360 <I2C_Mem_ISR_DMA+0x244>)
 800312a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <I2C_Mem_ISR_DMA+0x1e>
 8003136:	2302      	movs	r3, #2
 8003138:	e10e      	b.n	8003358 <I2C_Mem_ISR_DMA+0x23c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003152:	2b00      	cmp	r3, #0
 8003154:	d011      	beq.n	800317a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800316a:	2120      	movs	r1, #32
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fefb 	bl	8003f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fe83 	bl	8003e7e <I2C_Flush_TXDR>
 8003178:	e0e9      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f04f 32ff 	mov.w	r2, #4294967295
 800319e:	651a      	str	r2, [r3, #80]	@ 0x50
 80031a0:	e0d5      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05f      	beq.n	800326c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d05a      	beq.n	800326c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031b6:	2101      	movs	r1, #1
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 ff59 	bl	8004070 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80031be:	2110      	movs	r1, #16
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fed1 	bl	8003f68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d048      	beq.n	8003262 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2bff      	cmp	r3, #255	@ 0xff
 80031d8:	d910      	bls.n	80031fc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	@ 0xff
 80031de:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	b299      	uxth	r1, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	2300      	movs	r3, #0
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fe85 	bl	8003f04 <I2C_TransferConfig>
 80031fa:	e011      	b.n	8003220 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320a:	b299      	uxth	r1, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	b2da      	uxtb	r2, r3
 8003212:	2300      	movs	r3, #0
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fe72 	bl	8003f04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b22      	cmp	r3, #34	@ 0x22
 800323c:	d108      	bne.n	8003250 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800324c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800324e:	e07e      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800325e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003260:	e075      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003262:	2140      	movs	r1, #64	@ 0x40
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fcf3 	bl	8003c50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800326a:	e070      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d05d      	beq.n	8003332 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800327c:	2b00      	cmp	r3, #0
 800327e:	d058      	beq.n	8003332 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003280:	2101      	movs	r1, #1
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fef4 	bl	8004070 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003288:	2110      	movs	r1, #16
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fe6c 	bl	8003f68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b22      	cmp	r3, #34	@ 0x22
 800329a:	d101      	bne.n	80032a0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800329c:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <I2C_Mem_ISR_DMA+0x248>)
 800329e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2bff      	cmp	r3, #255	@ 0xff
 80032a8:	d910      	bls.n	80032cc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22ff      	movs	r2, #255	@ 0xff
 80032ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b4:	b299      	uxth	r1, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fe1d 	bl	8003f04 <I2C_TransferConfig>
 80032ca:	e011      	b.n	80032f0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	b299      	uxth	r1, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fe0a 	bl	8003f04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b22      	cmp	r3, #34	@ 0x22
 800330c:	d108      	bne.n	8003320 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800331c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800331e:	e016      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003330:	e00d      	b.n	800334e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fa01 	bl	8003750 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	80002000 	.word	0x80002000
 8003364:	80002400 	.word	0x80002400

08003368 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <I2C_Slave_ISR_DMA+0x24>
 8003388:	2302      	movs	r3, #2
 800338a:	e0c0      	b.n	800350e <I2C_Slave_ISR_DMA+0x1a6>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa98 	bl	80038e0 <I2C_ITSlaveCplt>
 80033b0:	e0a8      	b.n	8003504 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8095 	beq.w	80034e8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 808f 	beq.w	80034e8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d104      	bne.n	80033de <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d07d      	beq.n	80034da <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800341e:	2301      	movs	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d128      	bne.n	800347a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b28      	cmp	r3, #40	@ 0x28
 8003432:	d108      	bne.n	8003446 <I2C_Slave_ISR_DMA+0xde>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343a:	d104      	bne.n	8003446 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fbb2 	bl	8003ba8 <I2C_ITListenCplt>
 8003444:	e048      	b.n	80034d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b29      	cmp	r3, #41	@ 0x29
 8003450:	d10e      	bne.n	8003470 <I2C_Slave_ISR_DMA+0x108>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003458:	d00a      	beq.n	8003470 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fd0b 	bl	8003e7e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f915 	bl	8003698 <I2C_ITSlaveSeqCplt>
 800346e:	e033      	b.n	80034d8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003478:	e034      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003494:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_Slave_ISR_DMA+0x13c>
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a2:	d11f      	bne.n	80034e4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b21      	cmp	r3, #33	@ 0x21
 80034a8:	d002      	beq.n	80034b0 <I2C_Slave_ISR_DMA+0x148>
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b29      	cmp	r3, #41	@ 0x29
 80034ae:	d103      	bne.n	80034b8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2221      	movs	r2, #33	@ 0x21
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b6:	e008      	b.n	80034ca <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b22      	cmp	r3, #34	@ 0x22
 80034bc:	d002      	beq.n	80034c4 <I2C_Slave_ISR_DMA+0x15c>
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80034c2:	d102      	bne.n	80034ca <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2222      	movs	r2, #34	@ 0x22
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	4619      	mov	r1, r3
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fbbd 	bl	8003c50 <I2C_ITError>
      if (treatdmanack == 1U)
 80034d6:	e005      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x17c>
 80034d8:	e004      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034e2:	e00f      	b.n	8003504 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80034e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034e6:	e00d      	b.n	8003504 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f809 	bl	8003516 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800352c:	2b28      	cmp	r3, #40	@ 0x28
 800352e:	d16a      	bne.n	8003606 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b29b      	uxth	r3, r3
 800354a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800354e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800356a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d138      	bne.n	80035e6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	09db      	lsrs	r3, r3, #7
 8003578:	b29a      	uxth	r2, r3
 800357a:	89bb      	ldrh	r3, [r7, #12]
 800357c:	4053      	eors	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	f003 0306 	and.w	r3, r3, #6
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11c      	bne.n	80035c2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359a:	2b02      	cmp	r3, #2
 800359c:	d13b      	bne.n	8003616 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2208      	movs	r2, #8
 80035aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035b4:	89ba      	ldrh	r2, [r7, #12]
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fa63 	bl	8002a86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035c0:	e029      	b.n	8003616 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fd50 	bl	8004070 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035d8:	89ba      	ldrh	r2, [r7, #12]
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fa51 	bl	8002a86 <HAL_I2C_AddrCallback>
}
 80035e4:	e017      	b.n	8003616 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fd40 	bl	8004070 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035f8:	89ba      	ldrh	r2, [r7, #12]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fa41 	bl	8002a86 <HAL_I2C_AddrCallback>
}
 8003604:	e007      	b.n	8003616 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2208      	movs	r2, #8
 800360c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b21      	cmp	r3, #33	@ 0x21
 8003638:	d115      	bne.n	8003666 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2211      	movs	r2, #17
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800364e:	2101      	movs	r1, #1
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fd0d 	bl	8004070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff f9e9 	bl	8002a36 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003664:	e014      	b.n	8003690 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2212      	movs	r2, #18
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800367a:	2102      	movs	r1, #2
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fcf7 	bl	8004070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff f9dd 	bl	8002a4a <HAL_I2C_MasterRxCpltCallback>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00c      	b.n	80036e6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b29      	cmp	r3, #41	@ 0x29
 80036f0:	d112      	bne.n	8003718 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2228      	movs	r2, #40	@ 0x28
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2221      	movs	r2, #33	@ 0x21
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003700:	2101      	movs	r1, #1
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fcb4 	bl	8004070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff f9a4 	bl	8002a5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003716:	e017      	b.n	8003748 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b2a      	cmp	r3, #42	@ 0x2a
 8003722:	d111      	bne.n	8003748 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2228      	movs	r2, #40	@ 0x28
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2222      	movs	r2, #34	@ 0x22
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003732:	2102      	movs	r1, #2
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fc9b 	bl	8004070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f995 	bl	8002a72 <HAL_I2C_SlaveRxCpltCallback>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2220      	movs	r2, #32
 8003764:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b21      	cmp	r3, #33	@ 0x21
 8003770:	d107      	bne.n	8003782 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003772:	2101      	movs	r1, #1
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fc7b 	bl	8004070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2211      	movs	r2, #17
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003780:	e00c      	b.n	800379c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b22      	cmp	r3, #34	@ 0x22
 800378c:	d106      	bne.n	800379c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800378e:	2102      	movs	r1, #2
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fc6d 	bl	8004070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2212      	movs	r2, #18
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b4c      	ldr	r3, [pc, #304]	@ (80038d8 <I2C_ITMasterCplt+0x188>)
 80037a8:	400b      	ands	r3, r1
 80037aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <I2C_ITMasterCplt+0x18c>)
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2210      	movs	r2, #16
 80037c8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b60      	cmp	r3, #96	@ 0x60
 80037e0:	d10a      	bne.n	80037f8 <I2C_ITMasterCplt+0xa8>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80037f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb40 	bl	8003e7e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b60      	cmp	r3, #96	@ 0x60
 800380e:	d002      	beq.n	8003816 <I2C_ITMasterCplt+0xc6>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa17 	bl	8003c50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003822:	e054      	b.n	80038ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b21      	cmp	r3, #33	@ 0x21
 800382e:	d124      	bne.n	800387a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b40      	cmp	r3, #64	@ 0x40
 8003848:	d10b      	bne.n	8003862 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff f92b 	bl	8002ab6 <HAL_I2C_MemTxCpltCallback>
}
 8003860:	e035      	b.n	80038ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff f8df 	bl	8002a36 <HAL_I2C_MasterTxCpltCallback>
}
 8003878:	e029      	b.n	80038ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b22      	cmp	r3, #34	@ 0x22
 8003884:	d123      	bne.n	80038ce <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b40      	cmp	r3, #64	@ 0x40
 800389e:	d10b      	bne.n	80038b8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff f90a 	bl	8002aca <HAL_I2C_MemRxCpltCallback>
}
 80038b6:	e00a      	b.n	80038ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff f8be 	bl	8002a4a <HAL_I2C_MasterRxCpltCallback>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	fe00e800 	.word	0xfe00e800
 80038dc:	ffff0000 	.word	0xffff0000

080038e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003902:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2220      	movs	r2, #32
 800390a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	2b21      	cmp	r3, #33	@ 0x21
 8003910:	d002      	beq.n	8003918 <I2C_ITSlaveCplt+0x38>
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	2b29      	cmp	r3, #41	@ 0x29
 8003916:	d108      	bne.n	800392a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003918:	f248 0101 	movw	r1, #32769	@ 0x8001
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fba7 	bl	8004070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2221      	movs	r2, #33	@ 0x21
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
 8003928:	e019      	b.n	800395e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800392a:	7afb      	ldrb	r3, [r7, #11]
 800392c:	2b22      	cmp	r3, #34	@ 0x22
 800392e:	d002      	beq.n	8003936 <I2C_ITSlaveCplt+0x56>
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	2b2a      	cmp	r3, #42	@ 0x2a
 8003934:	d108      	bne.n	8003948 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003936:	f248 0102 	movw	r1, #32770	@ 0x8002
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fb98 	bl	8004070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2222      	movs	r2, #34	@ 0x22
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
 8003946:	e00a      	b.n	800395e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	2b28      	cmp	r3, #40	@ 0x28
 800394c:	d107      	bne.n	800395e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800394e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fb8c 	bl	8004070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800396c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <I2C_ITSlaveCplt+0x2c0>)
 800397a:	400b      	ands	r3, r1
 800397c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa7d 	bl	8003e7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d013      	beq.n	80039b6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800399c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01f      	beq.n	80039e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b4:	e017      	b.n	80039e6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0304 	bic.w	r3, r3, #4
 80039f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d049      	beq.n	8003ae6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d044      	beq.n	8003ae6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d128      	bne.n	8003ab8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b28      	cmp	r3, #40	@ 0x28
 8003a70:	d108      	bne.n	8003a84 <I2C_ITSlaveCplt+0x1a4>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a78:	d104      	bne.n	8003a84 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f893 	bl	8003ba8 <I2C_ITListenCplt>
 8003a82:	e030      	b.n	8003ae6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b29      	cmp	r3, #41	@ 0x29
 8003a8e:	d10e      	bne.n	8003aae <I2C_ITSlaveCplt+0x1ce>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a96:	d00a      	beq.n	8003aae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9ec 	bl	8003e7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fdf6 	bl	8003698 <I2C_ITSlaveSeqCplt>
 8003aac:	e01b      	b.n	8003ae6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	61da      	str	r2, [r3, #28]
 8003ab6:	e016      	b.n	8003ae6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2210      	movs	r2, #16
 8003abe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <I2C_ITSlaveCplt+0x1fa>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad8:	d105      	bne.n	8003ae6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8b5 	bl	8003c50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8a4 	bl	8003c50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b28      	cmp	r3, #40	@ 0x28
 8003b12:	d141      	bne.n	8003b98 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f846 	bl	8003ba8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b1c:	e03c      	b.n	8003b98 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b26:	d014      	beq.n	8003b52 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fdb5 	bl	8003698 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <I2C_ITSlaveCplt+0x2c4>)
 8003b32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe ffa9 	bl	8002aa2 <HAL_I2C_ListenCpltCallback>
}
 8003b50:	e022      	b.n	8003b98 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b22      	cmp	r3, #34	@ 0x22
 8003b5c:	d10e      	bne.n	8003b7c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fe ff7c 	bl	8002a72 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b7a:	e00d      	b.n	8003b98 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe ff63 	bl	8002a5e <HAL_I2C_SlaveTxCpltCallback>
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	fe00e800 	.word	0xfe00e800
 8003ba4:	ffff0000 	.word	0xffff0000

08003ba8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	@ (8003c4c <I2C_ITListenCplt+0xa4>)
 8003bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d022      	beq.n	8003c24 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1c:	f043 0204 	orr.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c24:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa21 	bl	8004070 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe ff2f 	bl	8002aa2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	ffff0000 	.word	0xffff0000

08003c50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003e24 <I2C_ITError+0x1d4>)
 8003c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b28      	cmp	r3, #40	@ 0x28
 8003c86:	d005      	beq.n	8003c94 <I2C_ITError+0x44>
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b29      	cmp	r3, #41	@ 0x29
 8003c8c:	d002      	beq.n	8003c94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c92:	d10b      	bne.n	8003cac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c94:	2103      	movs	r1, #3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9ea 	bl	8004070 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2228      	movs	r2, #40	@ 0x28
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a60      	ldr	r2, [pc, #384]	@ (8003e28 <I2C_ITError+0x1d8>)
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003caa:	e030      	b.n	8003d0e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cac:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9dd 	bl	8004070 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8e1 	bl	8003e7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b60      	cmp	r3, #96	@ 0x60
 8003cc6:	d01f      	beq.n	8003d08 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d114      	bne.n	8003d08 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d109      	bne.n	8003d00 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2220      	movs	r2, #32
 8003d06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d039      	beq.n	8003d90 <I2C_ITError+0x140>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b11      	cmp	r3, #17
 8003d20:	d002      	beq.n	8003d28 <I2C_ITError+0xd8>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b21      	cmp	r3, #33	@ 0x21
 8003d26:	d133      	bne.n	8003d90 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d36:	d107      	bne.n	8003d48 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe f9cf 	bl	80020f0 <HAL_DMA_GetState>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d017      	beq.n	8003d88 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	4a33      	ldr	r2, [pc, #204]	@ (8003e2c <I2C_ITError+0x1dc>)
 8003d5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe f8a9 	bl	8001ec4 <HAL_DMA_Abort_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d04d      	beq.n	8003e14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d82:	4610      	mov	r0, r2
 8003d84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d86:	e045      	b.n	8003e14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f851 	bl	8003e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d8e:	e041      	b.n	8003e14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d039      	beq.n	8003e0c <I2C_ITError+0x1bc>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	d002      	beq.n	8003da4 <I2C_ITError+0x154>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b22      	cmp	r3, #34	@ 0x22
 8003da2:	d133      	bne.n	8003e0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db2:	d107      	bne.n	8003dc4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe f991 	bl	80020f0 <HAL_DMA_GetState>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d017      	beq.n	8003e04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <I2C_ITError+0x1dc>)
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe f86b 	bl	8001ec4 <HAL_DMA_Abort_IT>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d011      	beq.n	8003e18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e02:	e009      	b.n	8003e18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f813 	bl	8003e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e0a:	e005      	b.n	8003e18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f80f 	bl	8003e30 <I2C_TreatErrorCallback>
  }
}
 8003e12:	e002      	b.n	8003e1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e18:	bf00      	nop
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	ffff0000 	.word	0xffff0000
 8003e28:	08002d55 	.word	0x08002d55
 8003e2c:	08003ec7 	.word	0x08003ec7

08003e30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b60      	cmp	r3, #96	@ 0x60
 8003e42:	d10e      	bne.n	8003e62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fe49 	bl	8002af2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e60:	e009      	b.n	8003e76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fe fe34 	bl	8002ade <HAL_I2C_ErrorCallback>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d103      	bne.n	8003e9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d007      	beq.n	8003eba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	619a      	str	r2, [r3, #24]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff ff9b 	bl	8003e30 <I2C_TreatErrorCallback>
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	4613      	mov	r3, r2
 8003f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f1c:	7a7b      	ldrb	r3, [r7, #9]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	0d5b      	lsrs	r3, r3, #21
 8003f3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f42:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <I2C_TransferConfig+0x60>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	43db      	mvns	r3, r3
 8003f48:	ea02 0103 	and.w	r1, r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	03ff63ff 	.word	0x03ff63ff

08003f68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7c:	4a39      	ldr	r2, [pc, #228]	@ (8004064 <I2C_Enable_IRQ+0xfc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d032      	beq.n	8003fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003f86:	4a38      	ldr	r2, [pc, #224]	@ (8004068 <I2C_Enable_IRQ+0x100>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02d      	beq.n	8003fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003f90:	4a36      	ldr	r2, [pc, #216]	@ (800406c <I2C_Enable_IRQ+0x104>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d028      	beq.n	8003fe8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da03      	bge.n	8003fa6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003fa4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003fb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003fc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d103      	bne.n	8003fd8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003fd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d133      	bne.n	8004046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f043 0320 	orr.w	r3, r3, #32
 8003fe4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fe6:	e02e      	b.n	8004046 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da03      	bge.n	8003ff8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ff6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004008:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800401a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	2b10      	cmp	r3, #16
 8004020:	d103      	bne.n	800402a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004028:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	2b20      	cmp	r3, #32
 800402e:	d103      	bne.n	8004038 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004036:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d103      	bne.n	8004046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004044:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	08002f47 	.word	0x08002f47
 8004068:	08003369 	.word	0x08003369
 800406c:	0800311d 	.word	0x0800311d

08004070 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800409e:	2b28      	cmp	r3, #40	@ 0x28
 80040a0:	d003      	beq.n	80040aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80040a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00f      	beq.n	80040d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80040ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040c8:	2b28      	cmp	r3, #40	@ 0x28
 80040ca:	d003      	beq.n	80040d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80040d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da03      	bge.n	80040e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d103      	bne.n	80040f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d103      	bne.n	8004100 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f043 0320 	orr.w	r3, r3, #32
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004100:	887b      	ldrh	r3, [r7, #2]
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d103      	bne.n	800410e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800410c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43da      	mvns	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	400a      	ands	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b20      	cmp	r3, #32
 8004140:	d138      	bne.n	80041b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800414c:	2302      	movs	r3, #2
 800414e:	e032      	b.n	80041b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	@ 0x24
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800417e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d139      	bne.n	800424c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e033      	b.n	800424e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2224      	movs	r2, #36	@ 0x24
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d141      	bne.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800426a:	4b4b      	ldr	r3, [pc, #300]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004276:	d131      	bne.n	80042dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004278:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800427e:	4a46      	ldr	r2, [pc, #280]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004288:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004290:	4a41      	ldr	r2, [pc, #260]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004298:	4b40      	ldr	r3, [pc, #256]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2232      	movs	r2, #50	@ 0x32
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	4a3f      	ldr	r2, [pc, #252]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0c9b      	lsrs	r3, r3, #18
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ae:	e002      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b6:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d102      	bne.n	80042ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f2      	bne.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d6:	d158      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e057      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042ec:	e04d      	b.n	800438a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f4:	d141      	bne.n	800437a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042f6:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004302:	d131      	bne.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004304:	4b24      	ldr	r3, [pc, #144]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800430a:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004314:	4b20      	ldr	r3, [pc, #128]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800431c:	4a1e      	ldr	r2, [pc, #120]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2232      	movs	r2, #50	@ 0x32
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	0c9b      	lsrs	r3, r3, #18
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800433a:	e002      	b.n	8004342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3b01      	subs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004342:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434e:	d102      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f2      	bne.n	800433c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d112      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e011      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004368:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004378:	e007      	b.n	800438a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004382:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004388:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40007000 	.word	0x40007000
 800439c:	20000040 	.word	0x20000040
 80043a0:	431bde83 	.word	0x431bde83

080043a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a04      	ldr	r2, [pc, #16]	@ (80043c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043b2:	6093      	str	r3, [r2, #8]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e2fe      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d075      	beq.n	80044ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e2:	4b97      	ldr	r3, [pc, #604]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ec:	4b94      	ldr	r3, [pc, #592]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0x3e>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d002      	beq.n	8004408 <HAL_RCC_OscConfig+0x44>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d10b      	bne.n	8004420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	4b8d      	ldr	r3, [pc, #564]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05b      	beq.n	80044cc <HAL_RCC_OscConfig+0x108>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d157      	bne.n	80044cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e2d9      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x74>
 800442a:	4b85      	ldr	r3, [pc, #532]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a84      	ldr	r2, [pc, #528]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x98>
 8004442:	4b7f      	ldr	r3, [pc, #508]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7e      	ldr	r2, [pc, #504]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b7c      	ldr	r3, [pc, #496]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a7b      	ldr	r2, [pc, #492]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xb0>
 800445c:	4b78      	ldr	r3, [pc, #480]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a77      	ldr	r2, [pc, #476]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a74      	ldr	r2, [pc, #464]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fa68 	bl	8001950 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd fa64 	bl	8001950 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e29e      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004496:	4b6a      	ldr	r3, [pc, #424]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xc0>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fa54 	bl	8001950 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fa50 	bl	8001950 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	@ 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e28a      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044be:	4b60      	ldr	r3, [pc, #384]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0xe8>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d075      	beq.n	80045c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044da:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e4:	4b56      	ldr	r3, [pc, #344]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d102      	bne.n	80044fa <HAL_RCC_OscConfig+0x136>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d002      	beq.n	8004500 <HAL_RCC_OscConfig+0x13c>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d11f      	bne.n	8004540 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004500:	4b4f      	ldr	r3, [pc, #316]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_OscConfig+0x154>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e25d      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004518:	4b49      	ldr	r3, [pc, #292]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	4946      	ldr	r1, [pc, #280]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800452c:	4b45      	ldr	r3, [pc, #276]	@ (8004644 <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd f9c1 	bl	80018b8 <HAL_InitTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d043      	beq.n	80045c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e249      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d023      	beq.n	8004590 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004548:	4b3d      	ldr	r3, [pc, #244]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3c      	ldr	r2, [pc, #240]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd f9fc 	bl	8001950 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455c:	f7fd f9f8 	bl	8001950 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e232      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456e:	4b34      	ldr	r3, [pc, #208]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	492d      	ldr	r1, [pc, #180]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
 800458e:	e01a      	b.n	80045c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004590:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd f9d8 	bl	8001950 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fd f9d4 	bl	8001950 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e20e      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b6:	4b22      	ldr	r3, [pc, #136]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1e0>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d041      	beq.n	8004656 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e0:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fd f9b1 	bl	8001950 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fd f9ad 	bl	8001950 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1e7      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004604:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCC_OscConfig+0x22e>
 8004612:	e020      	b.n	8004656 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461a:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd f994 	bl	8001950 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800462a:	e00d      	b.n	8004648 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd f990 	bl	8001950 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d906      	bls.n	8004648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1ca      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004648:	4b8c      	ldr	r3, [pc, #560]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ea      	bne.n	800462c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a6 	beq.w	80047b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004668:	4b84      	ldr	r3, [pc, #528]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_OscConfig+0x2b4>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x2b6>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b7f      	ldr	r3, [pc, #508]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	4a7e      	ldr	r2, [pc, #504]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	@ 0x58
 800468a:	4b7c      	ldr	r3, [pc, #496]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469a:	4b79      	ldr	r3, [pc, #484]	@ (8004880 <HAL_RCC_OscConfig+0x4bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d118      	bne.n	80046d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a6:	4b76      	ldr	r3, [pc, #472]	@ (8004880 <HAL_RCC_OscConfig+0x4bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	@ (8004880 <HAL_RCC_OscConfig+0x4bc>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fd f94d 	bl	8001950 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fd f949 	bl	8001950 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e183      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004880 <HAL_RCC_OscConfig+0x4bc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_RCC_OscConfig+0x32e>
 80046e0:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	4a65      	ldr	r2, [pc, #404]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f0:	e024      	b.n	800473c <HAL_RCC_OscConfig+0x378>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d110      	bne.n	800471c <HAL_RCC_OscConfig+0x358>
 80046fa:	4b60      	ldr	r3, [pc, #384]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004700:	4a5e      	ldr	r2, [pc, #376]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800470a:	4b5c      	ldr	r3, [pc, #368]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	4a5a      	ldr	r2, [pc, #360]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800471a:	e00f      	b.n	800473c <HAL_RCC_OscConfig+0x378>
 800471c:	4b57      	ldr	r3, [pc, #348]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004722:	4a56      	ldr	r2, [pc, #344]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800472c:	4b53      	ldr	r3, [pc, #332]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	4a52      	ldr	r2, [pc, #328]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d016      	beq.n	8004772 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd f904 	bl	8001950 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fd f900 	bl	8001950 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e138      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004762:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ed      	beq.n	800474c <HAL_RCC_OscConfig+0x388>
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd f8ed 	bl	8001950 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd f8e9 	bl	8001950 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e121      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004790:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ed      	bne.n	800477a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b35      	ldr	r3, [pc, #212]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	4a34      	ldr	r2, [pc, #208]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03c      	beq.n	8004836 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047c4:	4b2d      	ldr	r3, [pc, #180]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ca:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd f8bc 	bl	8001950 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047dc:	f7fd f8b8 	bl	8001950 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0f2      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ee:	4b23      	ldr	r3, [pc, #140]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <HAL_RCC_OscConfig+0x418>
 80047fc:	e01b      	b.n	8004836 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047fe:	4b1f      	ldr	r3, [pc, #124]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004804:	4a1d      	ldr	r2, [pc, #116]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fd f89f 	bl	8001950 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004816:	f7fd f89b 	bl	8001950 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0d5      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004828:	4b14      	ldr	r3, [pc, #80]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800482a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ef      	bne.n	8004816 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80c9 	beq.w	80049d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004840:	4b0e      	ldr	r3, [pc, #56]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b0c      	cmp	r3, #12
 800484a:	f000 8083 	beq.w	8004954 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d15e      	bne.n	8004914 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a08      	ldr	r2, [pc, #32]	@ (800487c <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd f875 	bl	8001950 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004868:	e00c      	b.n	8004884 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fd f871 	bl	8001950 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d905      	bls.n	8004884 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0ab      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004884:	4b55      	ldr	r3, [pc, #340]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ec      	bne.n	800486a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004890:	4b52      	ldr	r3, [pc, #328]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	4b52      	ldr	r3, [pc, #328]	@ (80049e0 <HAL_RCC_OscConfig+0x61c>)
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6a11      	ldr	r1, [r2, #32]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048aa:	0212      	lsls	r2, r2, #8
 80048ac:	4311      	orrs	r1, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0552      	lsls	r2, r2, #21
 80048b8:	4311      	orrs	r1, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048be:	0852      	lsrs	r2, r2, #1
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0652      	lsls	r2, r2, #25
 80048c4:	4311      	orrs	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048ca:	06d2      	lsls	r2, r2, #27
 80048cc:	430a      	orrs	r2, r1
 80048ce:	4943      	ldr	r1, [pc, #268]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d4:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a40      	ldr	r2, [pc, #256]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 80048da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048e0:	4b3e      	ldr	r3, [pc, #248]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a3d      	ldr	r2, [pc, #244]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 80048e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd f830 	bl	8001950 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fd f82c 	bl	8001950 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e066      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004906:	4b35      	ldr	r3, [pc, #212]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x530>
 8004912:	e05e      	b.n	80049d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004914:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 800491a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800491e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fd f816 	bl	8001950 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004928:	f7fd f812 	bl	8001950 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04c      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493a:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004946:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	4924      	ldr	r1, [pc, #144]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <HAL_RCC_OscConfig+0x620>)
 800494e:	4013      	ands	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
 8004952:	e03e      	b.n	80049d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e039      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004960:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <HAL_RCC_OscConfig+0x618>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	429a      	cmp	r2, r3
 8004972:	d12c      	bne.n	80049ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	3b01      	subs	r3, #1
 8004980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d123      	bne.n	80049ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d11b      	bne.n	80049ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d113      	bne.n	80049ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	3b01      	subs	r3, #1
 80049b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d109      	bne.n	80049ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	3b01      	subs	r3, #1
 80049c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	019f800c 	.word	0x019f800c
 80049e4:	feeefffc 	.word	0xfeeefffc

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e11e      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b91      	ldr	r3, [pc, #580]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d910      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 020f 	bic.w	r2, r3, #15
 8004a16:	498c      	ldr	r1, [pc, #560]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e106      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d073      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d129      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a44:	4b81      	ldr	r3, [pc, #516]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0f4      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a54:	f000 f99e 	bl	8004d94 <RCC_GetSysClockFreqFromPLLSource>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c50 <HAL_RCC_ClockConfig+0x268>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d93f      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a62:	4b7a      	ldr	r3, [pc, #488]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d033      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d12f      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a82:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a8a:	4a70      	ldr	r2, [pc, #448]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e024      	b.n	8004ae2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0c6      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab0:	4b66      	ldr	r3, [pc, #408]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0be      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ac0:	f000 f8ce 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4a61      	ldr	r2, [pc, #388]	@ (8004c50 <HAL_RCC_ClockConfig+0x268>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d909      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ace:	4b5f      	ldr	r3, [pc, #380]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004adc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4957      	ldr	r1, [pc, #348]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fc ff2c 	bl	8001950 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc ff28 	bl	8001950 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e095      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b4e      	ldr	r3, [pc, #312]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d023      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b43      	ldr	r3, [pc, #268]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a42      	ldr	r2, [pc, #264]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b54:	4b3d      	ldr	r3, [pc, #244]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b39      	ldr	r3, [pc, #228]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4936      	ldr	r1, [pc, #216]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b80      	cmp	r3, #128	@ 0x80
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b7e:	4b33      	ldr	r3, [pc, #204]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	4a32      	ldr	r2, [pc, #200]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004b84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d21d      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b98:	4b2b      	ldr	r3, [pc, #172]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 020f 	bic.w	r2, r3, #15
 8004ba0:	4929      	ldr	r1, [pc, #164]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ba8:	f7fc fed2 	bl	8001950 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fc fece 	bl	8001950 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e03b      	b.n	8004c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1ed      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4917      	ldr	r1, [pc, #92]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfe:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	490f      	ldr	r1, [pc, #60]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c12:	f000 f825 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <HAL_RCC_ClockConfig+0x26c>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <HAL_RCC_ClockConfig+0x270>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c32:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <HAL_RCC_ClockConfig+0x274>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fe3e 	bl	80018b8 <HAL_InitTick>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40022000 	.word	0x40022000
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	04c4b400 	.word	0x04c4b400
 8004c54:	08007c78 	.word	0x08007c78
 8004c58:	20000040 	.word	0x20000040
 8004c5c:	20000044 	.word	0x20000044

08004c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c66:	4b2c      	ldr	r3, [pc, #176]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c72:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e047      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c84:	4b26      	ldr	r3, [pc, #152]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e03e      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c8a:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d136      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	3301      	adds	r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	4a16      	ldr	r2, [pc, #88]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cbe:	68d2      	ldr	r2, [r2, #12]
 8004cc0:	0a12      	lsrs	r2, r2, #8
 8004cc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
      break;
 8004ccc:	e00c      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cce:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	4a10      	ldr	r2, [pc, #64]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	0a12      	lsrs	r2, r2, #8
 8004cdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
      break;
 8004ce6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	0e5b      	lsrs	r3, r3, #25
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e001      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d08:	693b      	ldr	r3, [r7, #16]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	016e3600 	.word	0x016e3600

08004d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000040 	.word	0x20000040

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	08007c88 	.word	0x08007c88

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d6c:	f7ff ffda 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	@ (8004d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	08007c88 	.word	0x08007c88

08004d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d10c      	bne.n	8004dd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004db8:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc2:	68d2      	ldr	r2, [r2, #12]
 8004dc4:	0a12      	lsrs	r2, r2, #8
 8004dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	617b      	str	r3, [r7, #20]
    break;
 8004dd0:	e00c      	b.n	8004dec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd2:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	4a0e      	ldr	r2, [pc, #56]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	0a12      	lsrs	r2, r2, #8
 8004de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    break;
 8004dea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0e5b      	lsrs	r3, r3, #25
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e06:	687b      	ldr	r3, [r7, #4]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40021000 	.word	0x40021000
 8004e18:	016e3600 	.word	0x016e3600
 8004e1c:	00f42400 	.word	0x00f42400

08004e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e28:	2300      	movs	r3, #0
 8004e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8098 	beq.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	4b43      	ldr	r3, [pc, #268]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10d      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	4a3f      	ldr	r2, [pc, #252]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e66:	2301      	movs	r3, #1
 8004e68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a39      	ldr	r2, [pc, #228]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e76:	f7fc fd6b 	bl	8001950 <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7c:	e009      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fc fd67 	bl	8001950 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d902      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	74fb      	strb	r3, [r7, #19]
        break;
 8004e90:	e005      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e92:	4b30      	ldr	r3, [pc, #192]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ef      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d159      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01e      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d019      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ec0:	4b23      	ldr	r3, [pc, #140]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ecc:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004edc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eec:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fc fd27 	bl	8001950 <HAL_GetTick>
 8004f02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f04:	e00b      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc fd23 	bl	8001950 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d902      	bls.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f1c:	e006      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ec      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f40:	4903      	ldr	r1, [pc, #12]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f48:	e008      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	74bb      	strb	r3, [r7, #18]
 8004f4e:	e005      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f5c:	7c7b      	ldrb	r3, [r7, #17]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4ba7      	ldr	r3, [pc, #668]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	4aa6      	ldr	r2, [pc, #664]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f023 0203 	bic.w	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	499d      	ldr	r1, [pc, #628]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f9c:	4b98      	ldr	r3, [pc, #608]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f023 020c 	bic.w	r2, r3, #12
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4995      	ldr	r1, [pc, #596]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fbe:	4b90      	ldr	r3, [pc, #576]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	498c      	ldr	r1, [pc, #560]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fe0:	4b87      	ldr	r3, [pc, #540]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	4984      	ldr	r1, [pc, #528]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005002:	4b7f      	ldr	r3, [pc, #508]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	497b      	ldr	r1, [pc, #492]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005024:	4b76      	ldr	r3, [pc, #472]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	4973      	ldr	r1, [pc, #460]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005046:	4b6e      	ldr	r3, [pc, #440]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	496a      	ldr	r1, [pc, #424]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005068:	4b65      	ldr	r3, [pc, #404]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4962      	ldr	r1, [pc, #392]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800508a:	4b5d      	ldr	r3, [pc, #372]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	4959      	ldr	r1, [pc, #356]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050ac:	4b54      	ldr	r3, [pc, #336]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	4951      	ldr	r1, [pc, #324]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4948      	ldr	r1, [pc, #288]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050f0:	4b43      	ldr	r3, [pc, #268]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	4940      	ldr	r1, [pc, #256]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b3b      	ldr	r3, [pc, #236]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a3a      	ldr	r2, [pc, #232]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005128:	4b35      	ldr	r3, [pc, #212]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	4932      	ldr	r1, [pc, #200]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b2d      	ldr	r3, [pc, #180]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005160:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	4924      	ldr	r1, [pc, #144]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b1f      	ldr	r3, [pc, #124]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005198:	4b19      	ldr	r3, [pc, #100]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	4916      	ldr	r1, [pc, #88]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b6:	d105      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a10      	ldr	r2, [pc, #64]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d019      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	4908      	ldr	r1, [pc, #32]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ee:	d109      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f0:	4b03      	ldr	r3, [pc, #12]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a02      	ldr	r2, [pc, #8]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051fa:	60d3      	str	r3, [r2, #12]
 80051fc:	e002      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005210:	4b29      	ldr	r3, [pc, #164]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	4926      	ldr	r1, [pc, #152]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522e:	d105      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005256:	4918      	ldr	r1, [pc, #96]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005268:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a12      	ldr	r2, [pc, #72]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005272:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	490a      	ldr	r1, [pc, #40]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e042      	b.n	8005354 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fb ffd3 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2224      	movs	r2, #36	@ 0x24
 80052ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 ff56 	bl	80061b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fc57 	bl	8005bc0 <UART_SetConfig>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e01b      	b.n	8005354 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800532a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800533a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 ffd5 	bl	80062fc <UART_CheckIdleState>
 8005352:	4603      	mov	r3, r0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	@ 0x28
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	2b20      	cmp	r3, #32
 8005374:	d17b      	bne.n	800546e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_UART_Transmit+0x26>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e074      	b.n	8005470 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2221      	movs	r2, #33	@ 0x21
 8005392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005396:	f7fc fadb 	bl	8001950 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b4:	d108      	bne.n	80053c8 <HAL_UART_Transmit+0x6c>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	e003      	b.n	80053d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d0:	e030      	b.n	8005434 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	@ 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f001 f837 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e03d      	b.n	8005470 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005408:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	3302      	adds	r3, #2
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e007      	b.n	8005422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1c8      	bne.n	80053d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2200      	movs	r2, #0
 8005448:	2140      	movs	r1, #64	@ 0x40
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f001 f800 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e006      	b.n	8005470 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800546e:	2302      	movs	r3, #2
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	@ 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548c:	2b20      	cmp	r3, #32
 800548e:	d137      	bne.n	8005500 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_UART_Receive_DMA+0x24>
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e030      	b.n	8005502 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <HAL_UART_Receive_DMA+0x94>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01f      	beq.n	80054f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d018      	beq.n	80054f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	613b      	str	r3, [r7, #16]
   return(result);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	6a3a      	ldr	r2, [r7, #32]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 f818 	bl	800652c <UART_Start_Receive_DMA>
 80054fc:	4603      	mov	r3, r0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3728      	adds	r7, #40	@ 0x28
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40008000 	.word	0x40008000

08005510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ba      	sub	sp, #232	@ 0xe8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800553a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800553e:	4013      	ands	r3, r2
 8005540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11b      	bne.n	8005584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 82e3 	beq.w	8005b40 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
      }
      return;
 8005582:	e2dd      	b.n	8005b40 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8123 	beq.w	80057d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800558e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005592:	4b8d      	ldr	r3, [pc, #564]	@ (80057c8 <HAL_UART_IRQHandler+0x2b8>)
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800559a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800559e:	4b8b      	ldr	r3, [pc, #556]	@ (80057cc <HAL_UART_IRQHandler+0x2bc>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8116 	beq.w	80057d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_UART_IRQHandler+0xc8>
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d011      	beq.n	8005638 <HAL_UART_IRQHandler+0x128>
 8005614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2204      	movs	r2, #4
 8005626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005654:	4b5c      	ldr	r3, [pc, #368]	@ (80057c8 <HAL_UART_IRQHandler+0x2b8>)
 8005656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566a:	f043 0208 	orr.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <HAL_UART_IRQHandler+0x196>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8249 	beq.w	8005b44 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b40      	cmp	r3, #64	@ 0x40
 80056fc:	d005      	beq.n	800570a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005702:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005706:	2b00      	cmp	r3, #0
 8005708:	d054      	beq.n	80057b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fff5 	bl	80066fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d146      	bne.n	80057ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_UART_IRQHandler+0x2c0>)
 800577c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005784:	4618      	mov	r0, r3
 8005786:	f7fc fb9d 	bl	8001ec4 <HAL_DMA_Abort_IT>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800579e:	4610      	mov	r0, r2
 80057a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a2:	e00f      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f9f5 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057aa:	e00b      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f9f1 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b2:	e007      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9ed 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80057c2:	e1bf      	b.n	8005b44 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	bf00      	nop
    return;
 80057c6:	e1bd      	b.n	8005b44 <HAL_UART_IRQHandler+0x634>
 80057c8:	10000001 	.word	0x10000001
 80057cc:	04000120 	.word	0x04000120
 80057d0:	080069b1 	.word	0x080069b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f040 8153 	bne.w	8005a84 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 814c 	beq.w	8005a84 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8145 	beq.w	8005a84 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2210      	movs	r2, #16
 8005800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	f040 80bb 	bne.w	8005988 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 818f 	beq.w	8005b48 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005834:	429a      	cmp	r2, r3
 8005836:	f080 8187 	bcs.w	8005b48 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 8087 	bne.w	8005966 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800586c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005886:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800588e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800589a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1da      	bne.n	8005858 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e1      	bne.n	80058a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e3      	bne.n	80058de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005946:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005948:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800594c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e4      	bne.n	8005924 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005960:	4618      	mov	r0, r3
 8005962:	f7fc fa56 	bl	8001e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005978:	b29b      	uxth	r3, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	b29b      	uxth	r3, r3
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f911 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005986:	e0df      	b.n	8005b48 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005994:	b29b      	uxth	r3, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80d1 	beq.w	8005b4c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80059aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80cc 	beq.w	8005b4c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e4      	bne.n	80059b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	623b      	str	r3, [r7, #32]
   return(result);
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a12:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e1      	bne.n	80059ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	69b9      	ldr	r1, [r7, #24]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e4      	bne.n	8005a3a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f893 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a82:	e063      	b.n	8005b4c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <HAL_UART_IRQHandler+0x59e>
 8005a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 ffc3 	bl	8006a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aac:	e051      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d014      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d03a      	beq.n	8005b50 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
    }
    return;
 8005ae2:	e035      	b.n	8005b50 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_UART_IRQHandler+0x5f4>
 8005af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 ff6d 	bl	80069dc <UART_EndTransmit_IT>
    return;
 8005b02:	e026      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_UART_IRQHandler+0x614>
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 ff9c 	bl	8006a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b22:	e016      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_UART_IRQHandler+0x642>
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da0c      	bge.n	8005b52 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 ff84 	bl	8006a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b3e:	e008      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
      return;
 8005b40:	bf00      	nop
 8005b42:	e006      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
    return;
 8005b44:	bf00      	nop
 8005b46:	e004      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
      return;
 8005b48:	bf00      	nop
 8005b4a:	e002      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
      return;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_IRQHandler+0x642>
    return;
 8005b50:	bf00      	nop
  }
}
 8005b52:	37e8      	adds	r7, #232	@ 0xe8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc4:	b08c      	sub	sp, #48	@ 0x30
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4baa      	ldr	r3, [pc, #680]	@ (8005e98 <UART_SetConfig+0x2d8>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a9f      	ldr	r2, [pc, #636]	@ (8005e9c <UART_SetConfig+0x2dc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	f023 010f 	bic.w	r1, r3, #15
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a90      	ldr	r2, [pc, #576]	@ (8005ea0 <UART_SetConfig+0x2e0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d125      	bne.n	8005cb0 <UART_SetConfig+0xf0>
 8005c64:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d81a      	bhi.n	8005ca8 <UART_SetConfig+0xe8>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <UART_SetConfig+0xb8>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005c99 	.word	0x08005c99
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8e:	e116      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c96:	e112      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9e:	e10e      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca6:	e10a      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cae:	e106      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8005ea8 <UART_SetConfig+0x2e8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d138      	bne.n	8005d2c <UART_SetConfig+0x16c>
 8005cba:	4b7a      	ldr	r3, [pc, #488]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d82d      	bhi.n	8005d24 <UART_SetConfig+0x164>
 8005cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0x110>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d25 	.word	0x08005d25
 8005cd8:	08005d25 	.word	0x08005d25
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d15 	.word	0x08005d15
 8005ce4:	08005d25 	.word	0x08005d25
 8005ce8:	08005d25 	.word	0x08005d25
 8005cec:	08005d25 	.word	0x08005d25
 8005cf0:	08005d0d 	.word	0x08005d0d
 8005cf4:	08005d25 	.word	0x08005d25
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d1d 	.word	0x08005d1d
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0a:	e0d8      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	e0d4      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1a:	e0d0      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d22:	e0cc      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d2a:	e0c8      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a5e      	ldr	r2, [pc, #376]	@ (8005eac <UART_SetConfig+0x2ec>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d125      	bne.n	8005d82 <UART_SetConfig+0x1c2>
 8005d36:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d40:	2b30      	cmp	r3, #48	@ 0x30
 8005d42:	d016      	beq.n	8005d72 <UART_SetConfig+0x1b2>
 8005d44:	2b30      	cmp	r3, #48	@ 0x30
 8005d46:	d818      	bhi.n	8005d7a <UART_SetConfig+0x1ba>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d00a      	beq.n	8005d62 <UART_SetConfig+0x1a2>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d814      	bhi.n	8005d7a <UART_SetConfig+0x1ba>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <UART_SetConfig+0x19a>
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d008      	beq.n	8005d6a <UART_SetConfig+0x1aa>
 8005d58:	e00f      	b.n	8005d7a <UART_SetConfig+0x1ba>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d60:	e0ad      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d62:	2302      	movs	r3, #2
 8005d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d68:	e0a9      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d70:	e0a5      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d72:	2308      	movs	r3, #8
 8005d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d78:	e0a1      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d80:	e09d      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb0 <UART_SetConfig+0x2f0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d125      	bne.n	8005dd8 <UART_SetConfig+0x218>
 8005d8c:	4b45      	ldr	r3, [pc, #276]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d98:	d016      	beq.n	8005dc8 <UART_SetConfig+0x208>
 8005d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d9c:	d818      	bhi.n	8005dd0 <UART_SetConfig+0x210>
 8005d9e:	2b80      	cmp	r3, #128	@ 0x80
 8005da0:	d00a      	beq.n	8005db8 <UART_SetConfig+0x1f8>
 8005da2:	2b80      	cmp	r3, #128	@ 0x80
 8005da4:	d814      	bhi.n	8005dd0 <UART_SetConfig+0x210>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <UART_SetConfig+0x1f0>
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d008      	beq.n	8005dc0 <UART_SetConfig+0x200>
 8005dae:	e00f      	b.n	8005dd0 <UART_SetConfig+0x210>
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db6:	e082      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005db8:	2302      	movs	r3, #2
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dbe:	e07e      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc6:	e07a      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dce:	e076      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e072      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a35      	ldr	r2, [pc, #212]	@ (8005eb4 <UART_SetConfig+0x2f4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d12a      	bne.n	8005e38 <UART_SetConfig+0x278>
 8005de2:	4b30      	ldr	r3, [pc, #192]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df0:	d01a      	beq.n	8005e28 <UART_SetConfig+0x268>
 8005df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df6:	d81b      	bhi.n	8005e30 <UART_SetConfig+0x270>
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfc:	d00c      	beq.n	8005e18 <UART_SetConfig+0x258>
 8005dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e02:	d815      	bhi.n	8005e30 <UART_SetConfig+0x270>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <UART_SetConfig+0x250>
 8005e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0c:	d008      	beq.n	8005e20 <UART_SetConfig+0x260>
 8005e0e:	e00f      	b.n	8005e30 <UART_SetConfig+0x270>
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e052      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e04e      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e04a      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2e:	e046      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e36:	e042      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a17      	ldr	r2, [pc, #92]	@ (8005e9c <UART_SetConfig+0x2dc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d13a      	bne.n	8005eb8 <UART_SetConfig+0x2f8>
 8005e42:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e50:	d01a      	beq.n	8005e88 <UART_SetConfig+0x2c8>
 8005e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e56:	d81b      	bhi.n	8005e90 <UART_SetConfig+0x2d0>
 8005e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e5c:	d00c      	beq.n	8005e78 <UART_SetConfig+0x2b8>
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e62:	d815      	bhi.n	8005e90 <UART_SetConfig+0x2d0>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <UART_SetConfig+0x2b0>
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6c:	d008      	beq.n	8005e80 <UART_SetConfig+0x2c0>
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x2d0>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e022      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e01e      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e01a      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e016      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e012      	b.n	8005ebe <UART_SetConfig+0x2fe>
 8005e98:	cfff69f3 	.word	0xcfff69f3
 8005e9c:	40008000 	.word	0x40008000
 8005ea0:	40013800 	.word	0x40013800
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40004400 	.word	0x40004400
 8005eac:	40004800 	.word	0x40004800
 8005eb0:	40004c00 	.word	0x40004c00
 8005eb4:	40005000 	.word	0x40005000
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4aae      	ldr	r2, [pc, #696]	@ (800617c <UART_SetConfig+0x5bc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 8097 	bne.w	8005ff8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d823      	bhi.n	8005f1a <UART_SetConfig+0x35a>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <UART_SetConfig+0x318>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f0b 	.word	0x08005f0b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f1b 	.word	0x08005f1b
 8005ef4:	08005f1b 	.word	0x08005f1b
 8005ef8:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe ff1e 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8005f00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b9e      	ldr	r3, [pc, #632]	@ (8006180 <UART_SetConfig+0x5c0>)
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f08:	e00d      	b.n	8005f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fe fea9 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005f0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f10:	e009      	b.n	8005f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f18:	e005      	b.n	8005f26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8130 	beq.w	800618e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	4a94      	ldr	r2, [pc, #592]	@ (8006184 <UART_SetConfig+0x5c4>)
 8005f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d305      	bcc.n	8005f5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d903      	bls.n	8005f66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f64:	e113      	b.n	800618e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	2200      	movs	r2, #0
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	60fa      	str	r2, [r7, #12]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	4a84      	ldr	r2, [pc, #528]	@ (8006184 <UART_SetConfig+0x5c4>)
 8005f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f88:	f7fa f99a 	bl	80002c0 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	020b      	lsls	r3, r1, #8
 8005f9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fa2:	0202      	lsls	r2, r0, #8
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	6849      	ldr	r1, [r1, #4]
 8005fa8:	0849      	lsrs	r1, r1, #1
 8005faa:	2000      	movs	r0, #0
 8005fac:	460c      	mov	r4, r1
 8005fae:	4605      	mov	r5, r0
 8005fb0:	eb12 0804 	adds.w	r8, r2, r4
 8005fb4:	eb43 0905 	adc.w	r9, r3, r5
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	469a      	mov	sl, r3
 8005fc0:	4693      	mov	fp, r2
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa f979 	bl	80002c0 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fdc:	d308      	bcc.n	8005ff0 <UART_SetConfig+0x430>
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe4:	d204      	bcs.n	8005ff0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	e0ce      	b.n	800618e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ff6:	e0ca      	b.n	800618e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006000:	d166      	bne.n	80060d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006002:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006006:	2b08      	cmp	r3, #8
 8006008:	d827      	bhi.n	800605a <UART_SetConfig+0x49a>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0x450>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603d 	.word	0x0800603d
 8006018:	08006045 	.word	0x08006045
 800601c:	0800605b 	.word	0x0800605b
 8006020:	0800604b 	.word	0x0800604b
 8006024:	0800605b 	.word	0x0800605b
 8006028:	0800605b 	.word	0x0800605b
 800602c:	0800605b 	.word	0x0800605b
 8006030:	08006053 	.word	0x08006053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7fe fe82 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8006038:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800603a:	e014      	b.n	8006066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fe fe94 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8006040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006042:	e010      	b.n	8006066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006044:	4b4e      	ldr	r3, [pc, #312]	@ (8006180 <UART_SetConfig+0x5c0>)
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006048:	e00d      	b.n	8006066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604a:	f7fe fe09 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800604e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006050:	e009      	b.n	8006066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006058:	e005      	b.n	8006066 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8090 	beq.w	800618e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	4a44      	ldr	r2, [pc, #272]	@ (8006184 <UART_SetConfig+0x5c4>)
 8006074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006078:	461a      	mov	r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006080:	005a      	lsls	r2, r3, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	441a      	add	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d916      	bls.n	80060c8 <UART_SetConfig+0x508>
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d212      	bcs.n	80060c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f023 030f 	bic.w	r3, r3, #15
 80060aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	8bfb      	ldrh	r3, [r7, #30]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	8bfa      	ldrh	r2, [r7, #30]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e062      	b.n	800618e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060ce:	e05e      	b.n	800618e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d828      	bhi.n	800612a <UART_SetConfig+0x56a>
 80060d8:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x520>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	0800612b 	.word	0x0800612b
 80060f0:	0800611b 	.word	0x0800611b
 80060f4:	0800612b 	.word	0x0800612b
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe fe1a 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8006108:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800610a:	e014      	b.n	8006136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe fe2c 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8006110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006112:	e010      	b.n	8006136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <UART_SetConfig+0x5c0>)
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006118:	e00d      	b.n	8006136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fe fda1 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800611e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006120:	e009      	b.n	8006136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006128:	e005      	b.n	8006136 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006134:	bf00      	nop
    }

    if (pclk != 0U)
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d028      	beq.n	800618e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	4a10      	ldr	r2, [pc, #64]	@ (8006184 <UART_SetConfig+0x5c4>)
 8006142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006146:	461a      	mov	r2, r3
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	fbb3 f2f2 	udiv	r2, r3, r2
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	441a      	add	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b0f      	cmp	r3, #15
 8006164:	d910      	bls.n	8006188 <UART_SetConfig+0x5c8>
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616c:	d20c      	bcs.n	8006188 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b29a      	uxth	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x5ce>
 800617a:	bf00      	nop
 800617c:	40008000 	.word	0x40008000
 8006180:	00f42400 	.word	0x00f42400
 8006184:	08007c90 	.word	0x08007c90
      }
      else
      {
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2201      	movs	r2, #1
 8006192:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2201      	movs	r2, #1
 800619a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	@ 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01a      	beq.n	80062ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062b6:	d10a      	bne.n	80062ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]
  }
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b098      	sub	sp, #96	@ 0x60
 8006300:	af02      	add	r7, sp, #8
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800630c:	f7fb fb20 	bl	8001950 <HAL_GetTick>
 8006310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d12f      	bne.n	8006380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006328:	2200      	movs	r2, #0
 800632a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f88e 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d022      	beq.n	8006380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800634e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006358:	647b      	str	r3, [r7, #68]	@ 0x44
 800635a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800635e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e063      	b.n	8006448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d149      	bne.n	8006422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800638e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006396:	2200      	movs	r2, #0
 8006398:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f857 	bl	8006450 <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d03c      	beq.n	8006422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063fa:	61fa      	str	r2, [r7, #28]
 80063fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	69b9      	ldr	r1, [r7, #24]
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	617b      	str	r3, [r7, #20]
   return(result);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e012      	b.n	8006448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3758      	adds	r7, #88	@ 0x58
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006460:	e04f      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d04b      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fb fa71 	bl	8001950 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <UART_WaitOnFlagUntilTimeout+0x30>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e04e      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d037      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b80      	cmp	r3, #128	@ 0x80
 8006496:	d034      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d031      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d110      	bne.n	80064ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2208      	movs	r2, #8
 80064b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f920 	bl	80066fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2208      	movs	r2, #8
 80064be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e029      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064dc:	d111      	bne.n	8006502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f906 	bl	80066fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e00f      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	429a      	cmp	r2, r3
 800651e:	d0a0      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b096      	sub	sp, #88	@ 0x58
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2222      	movs	r2, #34	@ 0x22
 8006554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02d      	beq.n	80065be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006568:	4a40      	ldr	r2, [pc, #256]	@ (800666c <UART_Start_Receive_DMA+0x140>)
 800656a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	4a3f      	ldr	r2, [pc, #252]	@ (8006670 <UART_Start_Receive_DMA+0x144>)
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657c:	4a3d      	ldr	r2, [pc, #244]	@ (8006674 <UART_Start_Receive_DMA+0x148>)
 800657e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006586:	2200      	movs	r2, #0
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3324      	adds	r3, #36	@ 0x24
 8006596:	4619      	mov	r1, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659c:	461a      	mov	r2, r3
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	f7fb fbbc 	bl	8001d1c <HAL_DMA_Start_IT>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2210      	movs	r2, #16
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e051      	b.n	8006662 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d018      	beq.n	80065f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065da:	657b      	str	r3, [r7, #84]	@ 0x54
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e6      	bne.n	80065c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3308      	adds	r3, #8
 8006616:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006618:	637a      	str	r2, [r7, #52]	@ 0x34
 800661a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	613b      	str	r3, [r7, #16]
   return(result);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800664c:	623a      	str	r2, [r7, #32]
 800664e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	61bb      	str	r3, [r7, #24]
   return(result);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3758      	adds	r7, #88	@ 0x58
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	080067c7 	.word	0x080067c7
 8006670:	080068f3 	.word	0x080068f3
 8006674:	08006931 	.word	0x08006931

08006678 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b08f      	sub	sp, #60	@ 0x3c
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	61fb      	str	r3, [r7, #28]
   return(result);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d2:	61ba      	str	r2, [r7, #24]
 80066d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6979      	ldr	r1, [r7, #20]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	613b      	str	r3, [r7, #16]
   return(result);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80066ee:	bf00      	nop
 80066f0:	373c      	adds	r7, #60	@ 0x3c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b095      	sub	sp, #84	@ 0x54
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006720:	643b      	str	r3, [r7, #64]	@ 0x40
 8006722:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006726:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	61fb      	str	r3, [r7, #28]
   return(result);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800675a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800675e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e3      	bne.n	8006734 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d118      	bne.n	80067a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	60bb      	str	r3, [r7, #8]
   return(result);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f023 0310 	bic.w	r3, r3, #16
 8006788:	647b      	str	r3, [r7, #68]	@ 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6979      	ldr	r1, [r7, #20]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	613b      	str	r3, [r7, #16]
   return(result);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067ba:	bf00      	nop
 80067bc:	3754      	adds	r7, #84	@ 0x54
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b09c      	sub	sp, #112	@ 0x70
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d171      	bne.n	80068c6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80067e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800680a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800680e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800682c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	667b      	str	r3, [r7, #100]	@ 0x64
 8006834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3308      	adds	r3, #8
 800683a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800683c:	647a      	str	r2, [r7, #68]	@ 0x44
 800683e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e5      	bne.n	800681c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	623b      	str	r3, [r7, #32]
   return(result);
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006866:	663b      	str	r3, [r7, #96]	@ 0x60
 8006868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006870:	633a      	str	r2, [r7, #48]	@ 0x30
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e5      	bne.n	8006850 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d118      	bne.n	80068c6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 0310 	bic.w	r3, r3, #16
 80068a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	69b9      	ldr	r1, [r7, #24]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	617b      	str	r3, [r7, #20]
   return(result);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e6      	bne.n	8006894 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c8:	2200      	movs	r2, #0
 80068ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068da:	4619      	mov	r1, r3
 80068dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068de:	f7ff f963 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068e2:	e002      	b.n	80068ea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80068e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068e6:	f7ff f941 	bl	8005b6c <HAL_UART_RxCpltCallback>
}
 80068ea:	bf00      	nop
 80068ec:	3770      	adds	r7, #112	@ 0x70
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d109      	bne.n	8006922 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	b29b      	uxth	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff f944 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006920:	e002      	b.n	8006928 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff f92c 	bl	8005b80 <HAL_UART_RxHalfCpltCallback>
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006944:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800694c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006958:	2b80      	cmp	r3, #128	@ 0x80
 800695a:	d109      	bne.n	8006970 <UART_DMAError+0x40>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b21      	cmp	r3, #33	@ 0x21
 8006960:	d106      	bne.n	8006970 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f7ff fe84 	bl	8006678 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697a:	2b40      	cmp	r3, #64	@ 0x40
 800697c:	d109      	bne.n	8006992 <UART_DMAError+0x62>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b22      	cmp	r3, #34	@ 0x22
 8006982:	d106      	bne.n	8006992 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800698c:	6978      	ldr	r0, [r7, #20]
 800698e:	f7ff feb4 	bl	80066fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006998:	f043 0210 	orr.w	r2, r3, #16
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a2:	6978      	ldr	r0, [r7, #20]
 80069a4:	f7ff f8f6 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff f8e0 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff f897 	bl	8005b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a2a:	bf00      	nop
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e027      	b.n	8006ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	@ 0x24
 8006a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e02d      	b.n	8006b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2224      	movs	r2, #36	@ 0x24
 8006b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0201 	bic.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f84f 	bl	8006bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e02d      	b.n	8006bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	@ 0x24
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f811 	bl	8006bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bf8:	e031      	b.n	8006c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bfe:	2308      	movs	r3, #8
 8006c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	0e5b      	lsrs	r3, r3, #25
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	0f5b      	lsrs	r3, r3, #29
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	7b3a      	ldrb	r2, [r7, #12]
 8006c26:	4911      	ldr	r1, [pc, #68]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x94>)
 8006c28:	5c8a      	ldrb	r2, [r1, r2]
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c2e:	7b3a      	ldrb	r2, [r7, #12]
 8006c30:	490f      	ldr	r1, [pc, #60]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x98>)
 8006c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	7b7a      	ldrb	r2, [r7, #13]
 8006c44:	4909      	ldr	r1, [pc, #36]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x94>)
 8006c46:	5c8a      	ldrb	r2, [r1, r2]
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c4c:	7b7a      	ldrb	r2, [r7, #13]
 8006c4e:	4908      	ldr	r1, [pc, #32]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x98>)
 8006c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	08007ca8 	.word	0x08007ca8
 8006c70:	08007cb0 	.word	0x08007cb0

08006c74 <rand>:
 8006c74:	4b16      	ldr	r3, [pc, #88]	@ (8006cd0 <rand+0x5c>)
 8006c76:	b510      	push	{r4, lr}
 8006c78:	681c      	ldr	r4, [r3, #0]
 8006c7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c7c:	b9b3      	cbnz	r3, 8006cac <rand+0x38>
 8006c7e:	2018      	movs	r0, #24
 8006c80:	f000 fa20 	bl	80070c4 <malloc>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6320      	str	r0, [r4, #48]	@ 0x30
 8006c88:	b920      	cbnz	r0, 8006c94 <rand+0x20>
 8006c8a:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <rand+0x60>)
 8006c8c:	4812      	ldr	r0, [pc, #72]	@ (8006cd8 <rand+0x64>)
 8006c8e:	2152      	movs	r1, #82	@ 0x52
 8006c90:	f000 f9b0 	bl	8006ff4 <__assert_func>
 8006c94:	4911      	ldr	r1, [pc, #68]	@ (8006cdc <rand+0x68>)
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <rand+0x6c>)
 8006c98:	e9c0 1300 	strd	r1, r3, [r0]
 8006c9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ce4 <rand+0x70>)
 8006c9e:	6083      	str	r3, [r0, #8]
 8006ca0:	230b      	movs	r3, #11
 8006ca2:	8183      	strh	r3, [r0, #12]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006cac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cae:	480e      	ldr	r0, [pc, #56]	@ (8006ce8 <rand+0x74>)
 8006cb0:	690b      	ldr	r3, [r1, #16]
 8006cb2:	694c      	ldr	r4, [r1, #20]
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006cec <rand+0x78>)
 8006cb6:	4358      	muls	r0, r3
 8006cb8:	fb02 0004 	mla	r0, r2, r4, r0
 8006cbc:	fba3 3202 	umull	r3, r2, r3, r2
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	eb40 0002 	adc.w	r0, r0, r2
 8006cc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006cca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006cce:	bd10      	pop	{r4, pc}
 8006cd0:	20000058 	.word	0x20000058
 8006cd4:	08007cb8 	.word	0x08007cb8
 8006cd8:	08007ccf 	.word	0x08007ccf
 8006cdc:	abcd330e 	.word	0xabcd330e
 8006ce0:	e66d1234 	.word	0xe66d1234
 8006ce4:	0005deec 	.word	0x0005deec
 8006ce8:	5851f42d 	.word	0x5851f42d
 8006cec:	4c957f2d 	.word	0x4c957f2d

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	@ 0x5c
 8006d0e:	f000 f8f4 	bl	8006efa <memset>
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <std+0x58>)
 8006d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d16:	4b0d      	ldr	r3, [pc, #52]	@ (8006d4c <std+0x5c>)
 8006d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <std+0x60>)
 8006d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <std+0x64>)
 8006d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <std+0x68>)
 8006d24:	6224      	str	r4, [r4, #32]
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d006      	beq.n	8006d38 <std+0x48>
 8006d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d2e:	4294      	cmp	r4, r2
 8006d30:	d002      	beq.n	8006d38 <std+0x48>
 8006d32:	33d0      	adds	r3, #208	@ 0xd0
 8006d34:	429c      	cmp	r4, r3
 8006d36:	d105      	bne.n	8006d44 <std+0x54>
 8006d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d40:	f000 b954 	b.w	8006fec <__retarget_lock_init_recursive>
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	bf00      	nop
 8006d48:	08006e75 	.word	0x08006e75
 8006d4c:	08006e97 	.word	0x08006e97
 8006d50:	08006ecf 	.word	0x08006ecf
 8006d54:	08006ef3 	.word	0x08006ef3
 8006d58:	200004d8 	.word	0x200004d8

08006d5c <stdio_exit_handler>:
 8006d5c:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <stdio_exit_handler+0xc>)
 8006d5e:	4903      	ldr	r1, [pc, #12]	@ (8006d6c <stdio_exit_handler+0x10>)
 8006d60:	4803      	ldr	r0, [pc, #12]	@ (8006d70 <stdio_exit_handler+0x14>)
 8006d62:	f000 b869 	b.w	8006e38 <_fwalk_sglue>
 8006d66:	bf00      	nop
 8006d68:	2000004c 	.word	0x2000004c
 8006d6c:	08007339 	.word	0x08007339
 8006d70:	2000005c 	.word	0x2000005c

08006d74 <cleanup_stdio>:
 8006d74:	6841      	ldr	r1, [r0, #4]
 8006d76:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <cleanup_stdio+0x34>)
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	d001      	beq.n	8006d84 <cleanup_stdio+0x10>
 8006d80:	f000 fada 	bl	8007338 <_fflush_r>
 8006d84:	68a1      	ldr	r1, [r4, #8]
 8006d86:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <cleanup_stdio+0x38>)
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d002      	beq.n	8006d92 <cleanup_stdio+0x1e>
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fad3 	bl	8007338 <_fflush_r>
 8006d92:	68e1      	ldr	r1, [r4, #12]
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <cleanup_stdio+0x3c>)
 8006d96:	4299      	cmp	r1, r3
 8006d98:	d004      	beq.n	8006da4 <cleanup_stdio+0x30>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f000 baca 	b.w	8007338 <_fflush_r>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	200004d8 	.word	0x200004d8
 8006dac:	20000540 	.word	0x20000540
 8006db0:	200005a8 	.word	0x200005a8

08006db4 <global_stdio_init.part.0>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <global_stdio_init.part.0+0x30>)
 8006db8:	4c0b      	ldr	r4, [pc, #44]	@ (8006de8 <global_stdio_init.part.0+0x34>)
 8006dba:	4a0c      	ldr	r2, [pc, #48]	@ (8006dec <global_stdio_init.part.0+0x38>)
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	f7ff ff94 	bl	8006cf0 <std>
 8006dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2109      	movs	r1, #9
 8006dd0:	f7ff ff8e 	bl	8006cf0 <std>
 8006dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dd8:	2202      	movs	r2, #2
 8006dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dde:	2112      	movs	r1, #18
 8006de0:	f7ff bf86 	b.w	8006cf0 <std>
 8006de4:	20000610 	.word	0x20000610
 8006de8:	200004d8 	.word	0x200004d8
 8006dec:	08006d5d 	.word	0x08006d5d

08006df0 <__sfp_lock_acquire>:
 8006df0:	4801      	ldr	r0, [pc, #4]	@ (8006df8 <__sfp_lock_acquire+0x8>)
 8006df2:	f000 b8fc 	b.w	8006fee <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000619 	.word	0x20000619

08006dfc <__sfp_lock_release>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	@ (8006e04 <__sfp_lock_release+0x8>)
 8006dfe:	f000 b8f7 	b.w	8006ff0 <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20000619 	.word	0x20000619

08006e08 <__sinit>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f7ff fff0 	bl	8006df0 <__sfp_lock_acquire>
 8006e10:	6a23      	ldr	r3, [r4, #32]
 8006e12:	b11b      	cbz	r3, 8006e1c <__sinit+0x14>
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	f7ff bff0 	b.w	8006dfc <__sfp_lock_release>
 8006e1c:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <__sinit+0x28>)
 8006e1e:	6223      	str	r3, [r4, #32]
 8006e20:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <__sinit+0x2c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f5      	bne.n	8006e14 <__sinit+0xc>
 8006e28:	f7ff ffc4 	bl	8006db4 <global_stdio_init.part.0>
 8006e2c:	e7f2      	b.n	8006e14 <__sinit+0xc>
 8006e2e:	bf00      	nop
 8006e30:	08006d75 	.word	0x08006d75
 8006e34:	20000610 	.word	0x20000610

08006e38 <_fwalk_sglue>:
 8006e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	4688      	mov	r8, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	2600      	movs	r6, #0
 8006e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e48:	f1b9 0901 	subs.w	r9, r9, #1
 8006e4c:	d505      	bpl.n	8006e5a <_fwalk_sglue+0x22>
 8006e4e:	6824      	ldr	r4, [r4, #0]
 8006e50:	2c00      	cmp	r4, #0
 8006e52:	d1f7      	bne.n	8006e44 <_fwalk_sglue+0xc>
 8006e54:	4630      	mov	r0, r6
 8006e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d907      	bls.n	8006e70 <_fwalk_sglue+0x38>
 8006e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e64:	3301      	adds	r3, #1
 8006e66:	d003      	beq.n	8006e70 <_fwalk_sglue+0x38>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	4306      	orrs	r6, r0
 8006e70:	3568      	adds	r5, #104	@ 0x68
 8006e72:	e7e9      	b.n	8006e48 <_fwalk_sglue+0x10>

08006e74 <__sread>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	460c      	mov	r4, r1
 8006e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7c:	f000 f868 	bl	8006f50 <_read_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	bfab      	itete	ge
 8006e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e86:	89a3      	ldrhlt	r3, [r4, #12]
 8006e88:	181b      	addge	r3, r3, r0
 8006e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8e:	bfac      	ite	ge
 8006e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e92:	81a3      	strhlt	r3, [r4, #12]
 8006e94:	bd10      	pop	{r4, pc}

08006e96 <__swrite>:
 8006e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	461f      	mov	r7, r3
 8006e9c:	898b      	ldrh	r3, [r1, #12]
 8006e9e:	05db      	lsls	r3, r3, #23
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	d505      	bpl.n	8006eb4 <__swrite+0x1e>
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	2302      	movs	r3, #2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f000 f83c 	bl	8006f2c <_lseek_r>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	f000 b853 	b.w	8006f74 <_write_r>

08006ece <__sseek>:
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	f000 f829 	bl	8006f2c <_lseek_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	bf15      	itete	ne
 8006ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eea:	81a3      	strheq	r3, [r4, #12]
 8006eec:	bf18      	it	ne
 8006eee:	81a3      	strhne	r3, [r4, #12]
 8006ef0:	bd10      	pop	{r4, pc}

08006ef2 <__sclose>:
 8006ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef6:	f000 b809 	b.w	8006f0c <_close_r>

08006efa <memset>:
 8006efa:	4402      	add	r2, r0
 8006efc:	4603      	mov	r3, r0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d100      	bne.n	8006f04 <memset+0xa>
 8006f02:	4770      	bx	lr
 8006f04:	f803 1b01 	strb.w	r1, [r3], #1
 8006f08:	e7f9      	b.n	8006efe <memset+0x4>
	...

08006f0c <_close_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d06      	ldr	r5, [pc, #24]	@ (8006f28 <_close_r+0x1c>)
 8006f10:	2300      	movs	r3, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	602b      	str	r3, [r5, #0]
 8006f18:	f7fa fc10 	bl	800173c <_close>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_close_r+0x1a>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_close_r+0x1a>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000614 	.word	0x20000614

08006f2c <_lseek_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	@ (8006f4c <_lseek_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fa fc25 	bl	800178a <_lseek>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_lseek_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_lseek_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000614 	.word	0x20000614

08006f50 <_read_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	@ (8006f70 <_read_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7fa fbb3 	bl	80016ca <_read>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_read_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_read_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000614 	.word	0x20000614

08006f74 <_write_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	@ (8006f94 <_write_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fa fbbe 	bl	8001704 <_write>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_write_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_write_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	20000614 	.word	0x20000614

08006f98 <__errno>:
 8006f98:	4b01      	ldr	r3, [pc, #4]	@ (8006fa0 <__errno+0x8>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000058 	.word	0x20000058

08006fa4 <__libc_init_array>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8006fdc <__libc_init_array+0x38>)
 8006fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8006fe0 <__libc_init_array+0x3c>)
 8006faa:	1b64      	subs	r4, r4, r5
 8006fac:	10a4      	asrs	r4, r4, #2
 8006fae:	2600      	movs	r6, #0
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	d109      	bne.n	8006fc8 <__libc_init_array+0x24>
 8006fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006fe4 <__libc_init_array+0x40>)
 8006fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe8 <__libc_init_array+0x44>)
 8006fb8:	f000 fe3a 	bl	8007c30 <_init>
 8006fbc:	1b64      	subs	r4, r4, r5
 8006fbe:	10a4      	asrs	r4, r4, #2
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d105      	bne.n	8006fd2 <__libc_init_array+0x2e>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fcc:	4798      	blx	r3
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__libc_init_array+0xc>
 8006fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd6:	4798      	blx	r3
 8006fd8:	3601      	adds	r6, #1
 8006fda:	e7f2      	b.n	8006fc2 <__libc_init_array+0x1e>
 8006fdc:	08007da0 	.word	0x08007da0
 8006fe0:	08007da0 	.word	0x08007da0
 8006fe4:	08007da0 	.word	0x08007da0
 8006fe8:	08007da4 	.word	0x08007da4

08006fec <__retarget_lock_init_recursive>:
 8006fec:	4770      	bx	lr

08006fee <__retarget_lock_acquire_recursive>:
 8006fee:	4770      	bx	lr

08006ff0 <__retarget_lock_release_recursive>:
 8006ff0:	4770      	bx	lr
	...

08006ff4 <__assert_func>:
 8006ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <__assert_func+0x2c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4605      	mov	r5, r0
 8007000:	68d8      	ldr	r0, [r3, #12]
 8007002:	b954      	cbnz	r4, 800701a <__assert_func+0x26>
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <__assert_func+0x30>)
 8007006:	461c      	mov	r4, r3
 8007008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800700c:	9100      	str	r1, [sp, #0]
 800700e:	462b      	mov	r3, r5
 8007010:	4905      	ldr	r1, [pc, #20]	@ (8007028 <__assert_func+0x34>)
 8007012:	f000 f9b9 	bl	8007388 <fiprintf>
 8007016:	f000 f9d9 	bl	80073cc <abort>
 800701a:	4b04      	ldr	r3, [pc, #16]	@ (800702c <__assert_func+0x38>)
 800701c:	e7f4      	b.n	8007008 <__assert_func+0x14>
 800701e:	bf00      	nop
 8007020:	20000058 	.word	0x20000058
 8007024:	08007d62 	.word	0x08007d62
 8007028:	08007d34 	.word	0x08007d34
 800702c:	08007d27 	.word	0x08007d27

08007030 <_free_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4605      	mov	r5, r0
 8007034:	2900      	cmp	r1, #0
 8007036:	d041      	beq.n	80070bc <_free_r+0x8c>
 8007038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703c:	1f0c      	subs	r4, r1, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	bfb8      	it	lt
 8007042:	18e4      	addlt	r4, r4, r3
 8007044:	f000 f8e8 	bl	8007218 <__malloc_lock>
 8007048:	4a1d      	ldr	r2, [pc, #116]	@ (80070c0 <_free_r+0x90>)
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	b933      	cbnz	r3, 800705c <_free_r+0x2c>
 800704e:	6063      	str	r3, [r4, #4]
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	4628      	mov	r0, r5
 8007054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007058:	f000 b8e4 	b.w	8007224 <__malloc_unlock>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d908      	bls.n	8007072 <_free_r+0x42>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	1821      	adds	r1, r4, r0
 8007064:	428b      	cmp	r3, r1
 8007066:	bf01      	itttt	eq
 8007068:	6819      	ldreq	r1, [r3, #0]
 800706a:	685b      	ldreq	r3, [r3, #4]
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	e7ed      	b.n	800704e <_free_r+0x1e>
 8007072:	461a      	mov	r2, r3
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b10b      	cbz	r3, 800707c <_free_r+0x4c>
 8007078:	42a3      	cmp	r3, r4
 800707a:	d9fa      	bls.n	8007072 <_free_r+0x42>
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	1850      	adds	r0, r2, r1
 8007080:	42a0      	cmp	r0, r4
 8007082:	d10b      	bne.n	800709c <_free_r+0x6c>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	4401      	add	r1, r0
 8007088:	1850      	adds	r0, r2, r1
 800708a:	4283      	cmp	r3, r0
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	d1e0      	bne.n	8007052 <_free_r+0x22>
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	6053      	str	r3, [r2, #4]
 8007096:	4408      	add	r0, r1
 8007098:	6010      	str	r0, [r2, #0]
 800709a:	e7da      	b.n	8007052 <_free_r+0x22>
 800709c:	d902      	bls.n	80070a4 <_free_r+0x74>
 800709e:	230c      	movs	r3, #12
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	e7d6      	b.n	8007052 <_free_r+0x22>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	1821      	adds	r1, r4, r0
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf04      	itt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	bf04      	itt	eq
 80070b4:	1809      	addeq	r1, r1, r0
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	6054      	str	r4, [r2, #4]
 80070ba:	e7ca      	b.n	8007052 <_free_r+0x22>
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	bf00      	nop
 80070c0:	20000620 	.word	0x20000620

080070c4 <malloc>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	@ (80070d0 <malloc+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f000 b825 	b.w	8007118 <_malloc_r>
 80070ce:	bf00      	nop
 80070d0:	20000058 	.word	0x20000058

080070d4 <sbrk_aligned>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007114 <sbrk_aligned+0x40>)
 80070d8:	460c      	mov	r4, r1
 80070da:	6831      	ldr	r1, [r6, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	b911      	cbnz	r1, 80070e6 <sbrk_aligned+0x12>
 80070e0:	f000 f964 	bl	80073ac <_sbrk_r>
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 f95f 	bl	80073ac <_sbrk_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d103      	bne.n	80070fa <sbrk_aligned+0x26>
 80070f2:	f04f 34ff 	mov.w	r4, #4294967295
 80070f6:	4620      	mov	r0, r4
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	1cc4      	adds	r4, r0, #3
 80070fc:	f024 0403 	bic.w	r4, r4, #3
 8007100:	42a0      	cmp	r0, r4
 8007102:	d0f8      	beq.n	80070f6 <sbrk_aligned+0x22>
 8007104:	1a21      	subs	r1, r4, r0
 8007106:	4628      	mov	r0, r5
 8007108:	f000 f950 	bl	80073ac <_sbrk_r>
 800710c:	3001      	adds	r0, #1
 800710e:	d1f2      	bne.n	80070f6 <sbrk_aligned+0x22>
 8007110:	e7ef      	b.n	80070f2 <sbrk_aligned+0x1e>
 8007112:	bf00      	nop
 8007114:	2000061c 	.word	0x2000061c

08007118 <_malloc_r>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	1ccd      	adds	r5, r1, #3
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	2d00      	cmp	r5, #0
 800712c:	4606      	mov	r6, r0
 800712e:	db01      	blt.n	8007134 <_malloc_r+0x1c>
 8007130:	42a9      	cmp	r1, r5
 8007132:	d904      	bls.n	800713e <_malloc_r+0x26>
 8007134:	230c      	movs	r3, #12
 8007136:	6033      	str	r3, [r6, #0]
 8007138:	2000      	movs	r0, #0
 800713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007214 <_malloc_r+0xfc>
 8007142:	f000 f869 	bl	8007218 <__malloc_lock>
 8007146:	f8d8 3000 	ldr.w	r3, [r8]
 800714a:	461c      	mov	r4, r3
 800714c:	bb44      	cbnz	r4, 80071a0 <_malloc_r+0x88>
 800714e:	4629      	mov	r1, r5
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff ffbf 	bl	80070d4 <sbrk_aligned>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	4604      	mov	r4, r0
 800715a:	d158      	bne.n	800720e <_malloc_r+0xf6>
 800715c:	f8d8 4000 	ldr.w	r4, [r8]
 8007160:	4627      	mov	r7, r4
 8007162:	2f00      	cmp	r7, #0
 8007164:	d143      	bne.n	80071ee <_malloc_r+0xd6>
 8007166:	2c00      	cmp	r4, #0
 8007168:	d04b      	beq.n	8007202 <_malloc_r+0xea>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	eb04 0903 	add.w	r9, r4, r3
 8007174:	f000 f91a 	bl	80073ac <_sbrk_r>
 8007178:	4581      	cmp	r9, r0
 800717a:	d142      	bne.n	8007202 <_malloc_r+0xea>
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	1a6d      	subs	r5, r5, r1
 8007180:	4629      	mov	r1, r5
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ffa6 	bl	80070d4 <sbrk_aligned>
 8007188:	3001      	adds	r0, #1
 800718a:	d03a      	beq.n	8007202 <_malloc_r+0xea>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	442b      	add	r3, r5
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	f8d8 3000 	ldr.w	r3, [r8]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	bb62      	cbnz	r2, 80071f4 <_malloc_r+0xdc>
 800719a:	f8c8 7000 	str.w	r7, [r8]
 800719e:	e00f      	b.n	80071c0 <_malloc_r+0xa8>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	1b52      	subs	r2, r2, r5
 80071a4:	d420      	bmi.n	80071e8 <_malloc_r+0xd0>
 80071a6:	2a0b      	cmp	r2, #11
 80071a8:	d917      	bls.n	80071da <_malloc_r+0xc2>
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	bf18      	it	ne
 80071b2:	6059      	strne	r1, [r3, #4]
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	bf08      	it	eq
 80071b8:	f8c8 1000 	streq.w	r1, [r8]
 80071bc:	5162      	str	r2, [r4, r5]
 80071be:	604b      	str	r3, [r1, #4]
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f82f 	bl	8007224 <__malloc_unlock>
 80071c6:	f104 000b 	add.w	r0, r4, #11
 80071ca:	1d23      	adds	r3, r4, #4
 80071cc:	f020 0007 	bic.w	r0, r0, #7
 80071d0:	1ac2      	subs	r2, r0, r3
 80071d2:	bf1c      	itt	ne
 80071d4:	1a1b      	subne	r3, r3, r0
 80071d6:	50a3      	strne	r3, [r4, r2]
 80071d8:	e7af      	b.n	800713a <_malloc_r+0x22>
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	bf0c      	ite	eq
 80071e0:	f8c8 2000 	streq.w	r2, [r8]
 80071e4:	605a      	strne	r2, [r3, #4]
 80071e6:	e7eb      	b.n	80071c0 <_malloc_r+0xa8>
 80071e8:	4623      	mov	r3, r4
 80071ea:	6864      	ldr	r4, [r4, #4]
 80071ec:	e7ae      	b.n	800714c <_malloc_r+0x34>
 80071ee:	463c      	mov	r4, r7
 80071f0:	687f      	ldr	r7, [r7, #4]
 80071f2:	e7b6      	b.n	8007162 <_malloc_r+0x4a>
 80071f4:	461a      	mov	r2, r3
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d1fb      	bne.n	80071f4 <_malloc_r+0xdc>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6053      	str	r3, [r2, #4]
 8007200:	e7de      	b.n	80071c0 <_malloc_r+0xa8>
 8007202:	230c      	movs	r3, #12
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	4630      	mov	r0, r6
 8007208:	f000 f80c 	bl	8007224 <__malloc_unlock>
 800720c:	e794      	b.n	8007138 <_malloc_r+0x20>
 800720e:	6005      	str	r5, [r0, #0]
 8007210:	e7d6      	b.n	80071c0 <_malloc_r+0xa8>
 8007212:	bf00      	nop
 8007214:	20000620 	.word	0x20000620

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_lock+0x8>)
 800721a:	f7ff bee8 	b.w	8006fee <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20000618 	.word	0x20000618

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	@ (800722c <__malloc_unlock+0x8>)
 8007226:	f7ff bee3 	b.w	8006ff0 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20000618 	.word	0x20000618

08007230 <__sflush_r>:
 8007230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	0716      	lsls	r6, r2, #28
 800723a:	4605      	mov	r5, r0
 800723c:	460c      	mov	r4, r1
 800723e:	d454      	bmi.n	80072ea <__sflush_r+0xba>
 8007240:	684b      	ldr	r3, [r1, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dc02      	bgt.n	800724c <__sflush_r+0x1c>
 8007246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	dd48      	ble.n	80072de <__sflush_r+0xae>
 800724c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800724e:	2e00      	cmp	r6, #0
 8007250:	d045      	beq.n	80072de <__sflush_r+0xae>
 8007252:	2300      	movs	r3, #0
 8007254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007258:	682f      	ldr	r7, [r5, #0]
 800725a:	6a21      	ldr	r1, [r4, #32]
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	d030      	beq.n	80072c2 <__sflush_r+0x92>
 8007260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	0759      	lsls	r1, r3, #29
 8007266:	d505      	bpl.n	8007274 <__sflush_r+0x44>
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800726e:	b10b      	cbz	r3, 8007274 <__sflush_r+0x44>
 8007270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007278:	6a21      	ldr	r1, [r4, #32]
 800727a:	4628      	mov	r0, r5
 800727c:	47b0      	blx	r6
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	d106      	bne.n	8007292 <__sflush_r+0x62>
 8007284:	6829      	ldr	r1, [r5, #0]
 8007286:	291d      	cmp	r1, #29
 8007288:	d82b      	bhi.n	80072e2 <__sflush_r+0xb2>
 800728a:	4a2a      	ldr	r2, [pc, #168]	@ (8007334 <__sflush_r+0x104>)
 800728c:	410a      	asrs	r2, r1
 800728e:	07d6      	lsls	r6, r2, #31
 8007290:	d427      	bmi.n	80072e2 <__sflush_r+0xb2>
 8007292:	2200      	movs	r2, #0
 8007294:	6062      	str	r2, [r4, #4]
 8007296:	04d9      	lsls	r1, r3, #19
 8007298:	6922      	ldr	r2, [r4, #16]
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	d504      	bpl.n	80072a8 <__sflush_r+0x78>
 800729e:	1c42      	adds	r2, r0, #1
 80072a0:	d101      	bne.n	80072a6 <__sflush_r+0x76>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	b903      	cbnz	r3, 80072a8 <__sflush_r+0x78>
 80072a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80072a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072aa:	602f      	str	r7, [r5, #0]
 80072ac:	b1b9      	cbz	r1, 80072de <__sflush_r+0xae>
 80072ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d002      	beq.n	80072bc <__sflush_r+0x8c>
 80072b6:	4628      	mov	r0, r5
 80072b8:	f7ff feba 	bl	8007030 <_free_r>
 80072bc:	2300      	movs	r3, #0
 80072be:	6363      	str	r3, [r4, #52]	@ 0x34
 80072c0:	e00d      	b.n	80072de <__sflush_r+0xae>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b0      	blx	r6
 80072c8:	4602      	mov	r2, r0
 80072ca:	1c50      	adds	r0, r2, #1
 80072cc:	d1c9      	bne.n	8007262 <__sflush_r+0x32>
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0c6      	beq.n	8007262 <__sflush_r+0x32>
 80072d4:	2b1d      	cmp	r3, #29
 80072d6:	d001      	beq.n	80072dc <__sflush_r+0xac>
 80072d8:	2b16      	cmp	r3, #22
 80072da:	d11e      	bne.n	800731a <__sflush_r+0xea>
 80072dc:	602f      	str	r7, [r5, #0]
 80072de:	2000      	movs	r0, #0
 80072e0:	e022      	b.n	8007328 <__sflush_r+0xf8>
 80072e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	e01b      	b.n	8007322 <__sflush_r+0xf2>
 80072ea:	690f      	ldr	r7, [r1, #16]
 80072ec:	2f00      	cmp	r7, #0
 80072ee:	d0f6      	beq.n	80072de <__sflush_r+0xae>
 80072f0:	0793      	lsls	r3, r2, #30
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	bf08      	it	eq
 80072f6:	694b      	ldreq	r3, [r1, #20]
 80072f8:	600f      	str	r7, [r1, #0]
 80072fa:	bf18      	it	ne
 80072fc:	2300      	movne	r3, #0
 80072fe:	eba6 0807 	sub.w	r8, r6, r7
 8007302:	608b      	str	r3, [r1, #8]
 8007304:	f1b8 0f00 	cmp.w	r8, #0
 8007308:	dde9      	ble.n	80072de <__sflush_r+0xae>
 800730a:	6a21      	ldr	r1, [r4, #32]
 800730c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800730e:	4643      	mov	r3, r8
 8007310:	463a      	mov	r2, r7
 8007312:	4628      	mov	r0, r5
 8007314:	47b0      	blx	r6
 8007316:	2800      	cmp	r0, #0
 8007318:	dc08      	bgt.n	800732c <__sflush_r+0xfc>
 800731a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	4407      	add	r7, r0
 800732e:	eba8 0800 	sub.w	r8, r8, r0
 8007332:	e7e7      	b.n	8007304 <__sflush_r+0xd4>
 8007334:	dfbffffe 	.word	0xdfbffffe

08007338 <_fflush_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	690b      	ldr	r3, [r1, #16]
 800733c:	4605      	mov	r5, r0
 800733e:	460c      	mov	r4, r1
 8007340:	b913      	cbnz	r3, 8007348 <_fflush_r+0x10>
 8007342:	2500      	movs	r5, #0
 8007344:	4628      	mov	r0, r5
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	b118      	cbz	r0, 8007352 <_fflush_r+0x1a>
 800734a:	6a03      	ldr	r3, [r0, #32]
 800734c:	b90b      	cbnz	r3, 8007352 <_fflush_r+0x1a>
 800734e:	f7ff fd5b 	bl	8006e08 <__sinit>
 8007352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f3      	beq.n	8007342 <_fflush_r+0xa>
 800735a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d404      	bmi.n	800736a <_fflush_r+0x32>
 8007360:	0599      	lsls	r1, r3, #22
 8007362:	d402      	bmi.n	800736a <_fflush_r+0x32>
 8007364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007366:	f7ff fe42 	bl	8006fee <__retarget_lock_acquire_recursive>
 800736a:	4628      	mov	r0, r5
 800736c:	4621      	mov	r1, r4
 800736e:	f7ff ff5f 	bl	8007230 <__sflush_r>
 8007372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007374:	07da      	lsls	r2, r3, #31
 8007376:	4605      	mov	r5, r0
 8007378:	d4e4      	bmi.n	8007344 <_fflush_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	059b      	lsls	r3, r3, #22
 800737e:	d4e1      	bmi.n	8007344 <_fflush_r+0xc>
 8007380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007382:	f7ff fe35 	bl	8006ff0 <__retarget_lock_release_recursive>
 8007386:	e7dd      	b.n	8007344 <_fflush_r+0xc>

08007388 <fiprintf>:
 8007388:	b40e      	push	{r1, r2, r3}
 800738a:	b503      	push	{r0, r1, lr}
 800738c:	4601      	mov	r1, r0
 800738e:	ab03      	add	r3, sp, #12
 8007390:	4805      	ldr	r0, [pc, #20]	@ (80073a8 <fiprintf+0x20>)
 8007392:	f853 2b04 	ldr.w	r2, [r3], #4
 8007396:	6800      	ldr	r0, [r0, #0]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	f000 f847 	bl	800742c <_vfiprintf_r>
 800739e:	b002      	add	sp, #8
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr
 80073a8:	20000058 	.word	0x20000058

080073ac <_sbrk_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d06      	ldr	r5, [pc, #24]	@ (80073c8 <_sbrk_r+0x1c>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7fa f9f4 	bl	80017a4 <_sbrk>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_sbrk_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_sbrk_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000614 	.word	0x20000614

080073cc <abort>:
 80073cc:	b508      	push	{r3, lr}
 80073ce:	2006      	movs	r0, #6
 80073d0:	f000 fb8e 	bl	8007af0 <raise>
 80073d4:	2001      	movs	r0, #1
 80073d6:	f7fa f96d 	bl	80016b4 <_exit>

080073da <__sfputc_r>:
 80073da:	6893      	ldr	r3, [r2, #8]
 80073dc:	3b01      	subs	r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	b410      	push	{r4}
 80073e2:	6093      	str	r3, [r2, #8]
 80073e4:	da08      	bge.n	80073f8 <__sfputc_r+0x1e>
 80073e6:	6994      	ldr	r4, [r2, #24]
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	db01      	blt.n	80073f0 <__sfputc_r+0x16>
 80073ec:	290a      	cmp	r1, #10
 80073ee:	d103      	bne.n	80073f8 <__sfputc_r+0x1e>
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f4:	f000 bac0 	b.w	8007978 <__swbuf_r>
 80073f8:	6813      	ldr	r3, [r2, #0]
 80073fa:	1c58      	adds	r0, r3, #1
 80073fc:	6010      	str	r0, [r2, #0]
 80073fe:	7019      	strb	r1, [r3, #0]
 8007400:	4608      	mov	r0, r1
 8007402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007406:	4770      	bx	lr

08007408 <__sfputs_r>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	4614      	mov	r4, r2
 8007410:	18d5      	adds	r5, r2, r3
 8007412:	42ac      	cmp	r4, r5
 8007414:	d101      	bne.n	800741a <__sfputs_r+0x12>
 8007416:	2000      	movs	r0, #0
 8007418:	e007      	b.n	800742a <__sfputs_r+0x22>
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	463a      	mov	r2, r7
 8007420:	4630      	mov	r0, r6
 8007422:	f7ff ffda 	bl	80073da <__sfputc_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d1f3      	bne.n	8007412 <__sfputs_r+0xa>
 800742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800742c <_vfiprintf_r>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	460d      	mov	r5, r1
 8007432:	b09d      	sub	sp, #116	@ 0x74
 8007434:	4614      	mov	r4, r2
 8007436:	4698      	mov	r8, r3
 8007438:	4606      	mov	r6, r0
 800743a:	b118      	cbz	r0, 8007444 <_vfiprintf_r+0x18>
 800743c:	6a03      	ldr	r3, [r0, #32]
 800743e:	b90b      	cbnz	r3, 8007444 <_vfiprintf_r+0x18>
 8007440:	f7ff fce2 	bl	8006e08 <__sinit>
 8007444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	d405      	bmi.n	8007456 <_vfiprintf_r+0x2a>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	059a      	lsls	r2, r3, #22
 800744e:	d402      	bmi.n	8007456 <_vfiprintf_r+0x2a>
 8007450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007452:	f7ff fdcc 	bl	8006fee <__retarget_lock_acquire_recursive>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	071b      	lsls	r3, r3, #28
 800745a:	d501      	bpl.n	8007460 <_vfiprintf_r+0x34>
 800745c:	692b      	ldr	r3, [r5, #16]
 800745e:	b99b      	cbnz	r3, 8007488 <_vfiprintf_r+0x5c>
 8007460:	4629      	mov	r1, r5
 8007462:	4630      	mov	r0, r6
 8007464:	f000 fac6 	bl	80079f4 <__swsetup_r>
 8007468:	b170      	cbz	r0, 8007488 <_vfiprintf_r+0x5c>
 800746a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800746c:	07dc      	lsls	r4, r3, #31
 800746e:	d504      	bpl.n	800747a <_vfiprintf_r+0x4e>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	b01d      	add	sp, #116	@ 0x74
 8007476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	0598      	lsls	r0, r3, #22
 800747e:	d4f7      	bmi.n	8007470 <_vfiprintf_r+0x44>
 8007480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007482:	f7ff fdb5 	bl	8006ff0 <__retarget_lock_release_recursive>
 8007486:	e7f3      	b.n	8007470 <_vfiprintf_r+0x44>
 8007488:	2300      	movs	r3, #0
 800748a:	9309      	str	r3, [sp, #36]	@ 0x24
 800748c:	2320      	movs	r3, #32
 800748e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007492:	f8cd 800c 	str.w	r8, [sp, #12]
 8007496:	2330      	movs	r3, #48	@ 0x30
 8007498:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007648 <_vfiprintf_r+0x21c>
 800749c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a0:	f04f 0901 	mov.w	r9, #1
 80074a4:	4623      	mov	r3, r4
 80074a6:	469a      	mov	sl, r3
 80074a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ac:	b10a      	cbz	r2, 80074b2 <_vfiprintf_r+0x86>
 80074ae:	2a25      	cmp	r2, #37	@ 0x25
 80074b0:	d1f9      	bne.n	80074a6 <_vfiprintf_r+0x7a>
 80074b2:	ebba 0b04 	subs.w	fp, sl, r4
 80074b6:	d00b      	beq.n	80074d0 <_vfiprintf_r+0xa4>
 80074b8:	465b      	mov	r3, fp
 80074ba:	4622      	mov	r2, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff ffa2 	bl	8007408 <__sfputs_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	f000 80a7 	beq.w	8007618 <_vfiprintf_r+0x1ec>
 80074ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074cc:	445a      	add	r2, fp
 80074ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d0:	f89a 3000 	ldrb.w	r3, [sl]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 809f 	beq.w	8007618 <_vfiprintf_r+0x1ec>
 80074da:	2300      	movs	r3, #0
 80074dc:	f04f 32ff 	mov.w	r2, #4294967295
 80074e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e4:	f10a 0a01 	add.w	sl, sl, #1
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	9307      	str	r3, [sp, #28]
 80074ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f2:	4654      	mov	r4, sl
 80074f4:	2205      	movs	r2, #5
 80074f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fa:	4853      	ldr	r0, [pc, #332]	@ (8007648 <_vfiprintf_r+0x21c>)
 80074fc:	f7f8 fe90 	bl	8000220 <memchr>
 8007500:	9a04      	ldr	r2, [sp, #16]
 8007502:	b9d8      	cbnz	r0, 800753c <_vfiprintf_r+0x110>
 8007504:	06d1      	lsls	r1, r2, #27
 8007506:	bf44      	itt	mi
 8007508:	2320      	movmi	r3, #32
 800750a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800750e:	0713      	lsls	r3, r2, #28
 8007510:	bf44      	itt	mi
 8007512:	232b      	movmi	r3, #43	@ 0x2b
 8007514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007518:	f89a 3000 	ldrb.w	r3, [sl]
 800751c:	2b2a      	cmp	r3, #42	@ 0x2a
 800751e:	d015      	beq.n	800754c <_vfiprintf_r+0x120>
 8007520:	9a07      	ldr	r2, [sp, #28]
 8007522:	4654      	mov	r4, sl
 8007524:	2000      	movs	r0, #0
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	4621      	mov	r1, r4
 800752c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007530:	3b30      	subs	r3, #48	@ 0x30
 8007532:	2b09      	cmp	r3, #9
 8007534:	d94b      	bls.n	80075ce <_vfiprintf_r+0x1a2>
 8007536:	b1b0      	cbz	r0, 8007566 <_vfiprintf_r+0x13a>
 8007538:	9207      	str	r2, [sp, #28]
 800753a:	e014      	b.n	8007566 <_vfiprintf_r+0x13a>
 800753c:	eba0 0308 	sub.w	r3, r0, r8
 8007540:	fa09 f303 	lsl.w	r3, r9, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	46a2      	mov	sl, r4
 800754a:	e7d2      	b.n	80074f2 <_vfiprintf_r+0xc6>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	1d19      	adds	r1, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	9103      	str	r1, [sp, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	bfbb      	ittet	lt
 8007558:	425b      	neglt	r3, r3
 800755a:	f042 0202 	orrlt.w	r2, r2, #2
 800755e:	9307      	strge	r3, [sp, #28]
 8007560:	9307      	strlt	r3, [sp, #28]
 8007562:	bfb8      	it	lt
 8007564:	9204      	strlt	r2, [sp, #16]
 8007566:	7823      	ldrb	r3, [r4, #0]
 8007568:	2b2e      	cmp	r3, #46	@ 0x2e
 800756a:	d10a      	bne.n	8007582 <_vfiprintf_r+0x156>
 800756c:	7863      	ldrb	r3, [r4, #1]
 800756e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007570:	d132      	bne.n	80075d8 <_vfiprintf_r+0x1ac>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	1d1a      	adds	r2, r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	9203      	str	r2, [sp, #12]
 800757a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800757e:	3402      	adds	r4, #2
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007658 <_vfiprintf_r+0x22c>
 8007586:	7821      	ldrb	r1, [r4, #0]
 8007588:	2203      	movs	r2, #3
 800758a:	4650      	mov	r0, sl
 800758c:	f7f8 fe48 	bl	8000220 <memchr>
 8007590:	b138      	cbz	r0, 80075a2 <_vfiprintf_r+0x176>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	eba0 000a 	sub.w	r0, r0, sl
 8007598:	2240      	movs	r2, #64	@ 0x40
 800759a:	4082      	lsls	r2, r0
 800759c:	4313      	orrs	r3, r2
 800759e:	3401      	adds	r4, #1
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	4829      	ldr	r0, [pc, #164]	@ (800764c <_vfiprintf_r+0x220>)
 80075a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075ac:	2206      	movs	r2, #6
 80075ae:	f7f8 fe37 	bl	8000220 <memchr>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d03f      	beq.n	8007636 <_vfiprintf_r+0x20a>
 80075b6:	4b26      	ldr	r3, [pc, #152]	@ (8007650 <_vfiprintf_r+0x224>)
 80075b8:	bb1b      	cbnz	r3, 8007602 <_vfiprintf_r+0x1d6>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	3308      	adds	r3, #8
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075c8:	443b      	add	r3, r7
 80075ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80075cc:	e76a      	b.n	80074a4 <_vfiprintf_r+0x78>
 80075ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d2:	460c      	mov	r4, r1
 80075d4:	2001      	movs	r0, #1
 80075d6:	e7a8      	b.n	800752a <_vfiprintf_r+0xfe>
 80075d8:	2300      	movs	r3, #0
 80075da:	3401      	adds	r4, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4619      	mov	r1, r3
 80075e0:	f04f 0c0a 	mov.w	ip, #10
 80075e4:	4620      	mov	r0, r4
 80075e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ea:	3a30      	subs	r2, #48	@ 0x30
 80075ec:	2a09      	cmp	r2, #9
 80075ee:	d903      	bls.n	80075f8 <_vfiprintf_r+0x1cc>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0c6      	beq.n	8007582 <_vfiprintf_r+0x156>
 80075f4:	9105      	str	r1, [sp, #20]
 80075f6:	e7c4      	b.n	8007582 <_vfiprintf_r+0x156>
 80075f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80075fc:	4604      	mov	r4, r0
 80075fe:	2301      	movs	r3, #1
 8007600:	e7f0      	b.n	80075e4 <_vfiprintf_r+0x1b8>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <_vfiprintf_r+0x228>)
 800760a:	a904      	add	r1, sp, #16
 800760c:	4630      	mov	r0, r6
 800760e:	f3af 8000 	nop.w
 8007612:	4607      	mov	r7, r0
 8007614:	1c78      	adds	r0, r7, #1
 8007616:	d1d6      	bne.n	80075c6 <_vfiprintf_r+0x19a>
 8007618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761a:	07d9      	lsls	r1, r3, #31
 800761c:	d405      	bmi.n	800762a <_vfiprintf_r+0x1fe>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d402      	bmi.n	800762a <_vfiprintf_r+0x1fe>
 8007624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007626:	f7ff fce3 	bl	8006ff0 <__retarget_lock_release_recursive>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	065b      	lsls	r3, r3, #25
 800762e:	f53f af1f 	bmi.w	8007470 <_vfiprintf_r+0x44>
 8007632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007634:	e71e      	b.n	8007474 <_vfiprintf_r+0x48>
 8007636:	ab03      	add	r3, sp, #12
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	462a      	mov	r2, r5
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <_vfiprintf_r+0x228>)
 800763e:	a904      	add	r1, sp, #16
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f879 	bl	8007738 <_printf_i>
 8007646:	e7e4      	b.n	8007612 <_vfiprintf_r+0x1e6>
 8007648:	08007d63 	.word	0x08007d63
 800764c:	08007d6d 	.word	0x08007d6d
 8007650:	00000000 	.word	0x00000000
 8007654:	08007409 	.word	0x08007409
 8007658:	08007d69 	.word	0x08007d69

0800765c <_printf_common>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	4616      	mov	r6, r2
 8007662:	4698      	mov	r8, r3
 8007664:	688a      	ldr	r2, [r1, #8]
 8007666:	690b      	ldr	r3, [r1, #16]
 8007668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800766c:	4293      	cmp	r3, r2
 800766e:	bfb8      	it	lt
 8007670:	4613      	movlt	r3, r2
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007678:	4607      	mov	r7, r0
 800767a:	460c      	mov	r4, r1
 800767c:	b10a      	cbz	r2, 8007682 <_printf_common+0x26>
 800767e:	3301      	adds	r3, #1
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	0699      	lsls	r1, r3, #26
 8007686:	bf42      	ittt	mi
 8007688:	6833      	ldrmi	r3, [r6, #0]
 800768a:	3302      	addmi	r3, #2
 800768c:	6033      	strmi	r3, [r6, #0]
 800768e:	6825      	ldr	r5, [r4, #0]
 8007690:	f015 0506 	ands.w	r5, r5, #6
 8007694:	d106      	bne.n	80076a4 <_printf_common+0x48>
 8007696:	f104 0a19 	add.w	sl, r4, #25
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	6832      	ldr	r2, [r6, #0]
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc26      	bgt.n	80076f2 <_printf_common+0x96>
 80076a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	3b00      	subs	r3, #0
 80076ac:	bf18      	it	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	0692      	lsls	r2, r2, #26
 80076b2:	d42b      	bmi.n	800770c <_printf_common+0xb0>
 80076b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076b8:	4641      	mov	r1, r8
 80076ba:	4638      	mov	r0, r7
 80076bc:	47c8      	blx	r9
 80076be:	3001      	adds	r0, #1
 80076c0:	d01e      	beq.n	8007700 <_printf_common+0xa4>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	6922      	ldr	r2, [r4, #16]
 80076c6:	f003 0306 	and.w	r3, r3, #6
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	bf02      	ittt	eq
 80076ce:	68e5      	ldreq	r5, [r4, #12]
 80076d0:	6833      	ldreq	r3, [r6, #0]
 80076d2:	1aed      	subeq	r5, r5, r3
 80076d4:	68a3      	ldr	r3, [r4, #8]
 80076d6:	bf0c      	ite	eq
 80076d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076dc:	2500      	movne	r5, #0
 80076de:	4293      	cmp	r3, r2
 80076e0:	bfc4      	itt	gt
 80076e2:	1a9b      	subgt	r3, r3, r2
 80076e4:	18ed      	addgt	r5, r5, r3
 80076e6:	2600      	movs	r6, #0
 80076e8:	341a      	adds	r4, #26
 80076ea:	42b5      	cmp	r5, r6
 80076ec:	d11a      	bne.n	8007724 <_printf_common+0xc8>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e008      	b.n	8007704 <_printf_common+0xa8>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4652      	mov	r2, sl
 80076f6:	4641      	mov	r1, r8
 80076f8:	4638      	mov	r0, r7
 80076fa:	47c8      	blx	r9
 80076fc:	3001      	adds	r0, #1
 80076fe:	d103      	bne.n	8007708 <_printf_common+0xac>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007708:	3501      	adds	r5, #1
 800770a:	e7c6      	b.n	800769a <_printf_common+0x3e>
 800770c:	18e1      	adds	r1, r4, r3
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	2030      	movs	r0, #48	@ 0x30
 8007712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007716:	4422      	add	r2, r4
 8007718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800771c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007720:	3302      	adds	r3, #2
 8007722:	e7c7      	b.n	80076b4 <_printf_common+0x58>
 8007724:	2301      	movs	r3, #1
 8007726:	4622      	mov	r2, r4
 8007728:	4641      	mov	r1, r8
 800772a:	4638      	mov	r0, r7
 800772c:	47c8      	blx	r9
 800772e:	3001      	adds	r0, #1
 8007730:	d0e6      	beq.n	8007700 <_printf_common+0xa4>
 8007732:	3601      	adds	r6, #1
 8007734:	e7d9      	b.n	80076ea <_printf_common+0x8e>
	...

08007738 <_printf_i>:
 8007738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	7e0f      	ldrb	r7, [r1, #24]
 800773e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007740:	2f78      	cmp	r7, #120	@ 0x78
 8007742:	4691      	mov	r9, r2
 8007744:	4680      	mov	r8, r0
 8007746:	460c      	mov	r4, r1
 8007748:	469a      	mov	sl, r3
 800774a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800774e:	d807      	bhi.n	8007760 <_printf_i+0x28>
 8007750:	2f62      	cmp	r7, #98	@ 0x62
 8007752:	d80a      	bhi.n	800776a <_printf_i+0x32>
 8007754:	2f00      	cmp	r7, #0
 8007756:	f000 80d2 	beq.w	80078fe <_printf_i+0x1c6>
 800775a:	2f58      	cmp	r7, #88	@ 0x58
 800775c:	f000 80b9 	beq.w	80078d2 <_printf_i+0x19a>
 8007760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007768:	e03a      	b.n	80077e0 <_printf_i+0xa8>
 800776a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800776e:	2b15      	cmp	r3, #21
 8007770:	d8f6      	bhi.n	8007760 <_printf_i+0x28>
 8007772:	a101      	add	r1, pc, #4	@ (adr r1, 8007778 <_printf_i+0x40>)
 8007774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077e5 	.word	0x080077e5
 8007780:	08007761 	.word	0x08007761
 8007784:	08007761 	.word	0x08007761
 8007788:	08007761 	.word	0x08007761
 800778c:	08007761 	.word	0x08007761
 8007790:	080077e5 	.word	0x080077e5
 8007794:	08007761 	.word	0x08007761
 8007798:	08007761 	.word	0x08007761
 800779c:	08007761 	.word	0x08007761
 80077a0:	08007761 	.word	0x08007761
 80077a4:	080078e5 	.word	0x080078e5
 80077a8:	0800780f 	.word	0x0800780f
 80077ac:	0800789f 	.word	0x0800789f
 80077b0:	08007761 	.word	0x08007761
 80077b4:	08007761 	.word	0x08007761
 80077b8:	08007907 	.word	0x08007907
 80077bc:	08007761 	.word	0x08007761
 80077c0:	0800780f 	.word	0x0800780f
 80077c4:	08007761 	.word	0x08007761
 80077c8:	08007761 	.word	0x08007761
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	1d1a      	adds	r2, r3, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6032      	str	r2, [r6, #0]
 80077d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077e0:	2301      	movs	r3, #1
 80077e2:	e09d      	b.n	8007920 <_printf_i+0x1e8>
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	6031      	str	r1, [r6, #0]
 80077ec:	0606      	lsls	r6, r0, #24
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0xbc>
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	e003      	b.n	80077fc <_printf_i+0xc4>
 80077f4:	0645      	lsls	r5, r0, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0xb8>
 80077f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	da03      	bge.n	8007808 <_printf_i+0xd0>
 8007800:	232d      	movs	r3, #45	@ 0x2d
 8007802:	426d      	negs	r5, r5
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007808:	4859      	ldr	r0, [pc, #356]	@ (8007970 <_printf_i+0x238>)
 800780a:	230a      	movs	r3, #10
 800780c:	e011      	b.n	8007832 <_printf_i+0xfa>
 800780e:	6821      	ldr	r1, [r4, #0]
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	0608      	lsls	r0, r1, #24
 8007814:	f853 5b04 	ldr.w	r5, [r3], #4
 8007818:	d402      	bmi.n	8007820 <_printf_i+0xe8>
 800781a:	0649      	lsls	r1, r1, #25
 800781c:	bf48      	it	mi
 800781e:	b2ad      	uxthmi	r5, r5
 8007820:	2f6f      	cmp	r7, #111	@ 0x6f
 8007822:	4853      	ldr	r0, [pc, #332]	@ (8007970 <_printf_i+0x238>)
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	bf14      	ite	ne
 8007828:	230a      	movne	r3, #10
 800782a:	2308      	moveq	r3, #8
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007832:	6866      	ldr	r6, [r4, #4]
 8007834:	60a6      	str	r6, [r4, #8]
 8007836:	2e00      	cmp	r6, #0
 8007838:	bfa2      	ittt	ge
 800783a:	6821      	ldrge	r1, [r4, #0]
 800783c:	f021 0104 	bicge.w	r1, r1, #4
 8007840:	6021      	strge	r1, [r4, #0]
 8007842:	b90d      	cbnz	r5, 8007848 <_printf_i+0x110>
 8007844:	2e00      	cmp	r6, #0
 8007846:	d04b      	beq.n	80078e0 <_printf_i+0x1a8>
 8007848:	4616      	mov	r6, r2
 800784a:	fbb5 f1f3 	udiv	r1, r5, r3
 800784e:	fb03 5711 	mls	r7, r3, r1, r5
 8007852:	5dc7      	ldrb	r7, [r0, r7]
 8007854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007858:	462f      	mov	r7, r5
 800785a:	42bb      	cmp	r3, r7
 800785c:	460d      	mov	r5, r1
 800785e:	d9f4      	bls.n	800784a <_printf_i+0x112>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10b      	bne.n	800787c <_printf_i+0x144>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07df      	lsls	r7, r3, #31
 8007868:	d508      	bpl.n	800787c <_printf_i+0x144>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4299      	cmp	r1, r3
 8007870:	bfde      	ittt	le
 8007872:	2330      	movle	r3, #48	@ 0x30
 8007874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800787c:	1b92      	subs	r2, r2, r6
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	464b      	mov	r3, r9
 8007886:	aa03      	add	r2, sp, #12
 8007888:	4621      	mov	r1, r4
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fee6 	bl	800765c <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	d14a      	bne.n	800792a <_printf_i+0x1f2>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b004      	add	sp, #16
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	f043 0320 	orr.w	r3, r3, #32
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	4833      	ldr	r0, [pc, #204]	@ (8007974 <_printf_i+0x23c>)
 80078a8:	2778      	movs	r7, #120	@ 0x78
 80078aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	6831      	ldr	r1, [r6, #0]
 80078b2:	061f      	lsls	r7, r3, #24
 80078b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80078b8:	d402      	bmi.n	80078c0 <_printf_i+0x188>
 80078ba:	065f      	lsls	r7, r3, #25
 80078bc:	bf48      	it	mi
 80078be:	b2ad      	uxthmi	r5, r5
 80078c0:	6031      	str	r1, [r6, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	bf44      	itt	mi
 80078c6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ca:	6023      	strmi	r3, [r4, #0]
 80078cc:	b11d      	cbz	r5, 80078d6 <_printf_i+0x19e>
 80078ce:	2310      	movs	r3, #16
 80078d0:	e7ac      	b.n	800782c <_printf_i+0xf4>
 80078d2:	4827      	ldr	r0, [pc, #156]	@ (8007970 <_printf_i+0x238>)
 80078d4:	e7e9      	b.n	80078aa <_printf_i+0x172>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f023 0320 	bic.w	r3, r3, #32
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	e7f6      	b.n	80078ce <_printf_i+0x196>
 80078e0:	4616      	mov	r6, r2
 80078e2:	e7bd      	b.n	8007860 <_printf_i+0x128>
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	6961      	ldr	r1, [r4, #20]
 80078ea:	1d18      	adds	r0, r3, #4
 80078ec:	6030      	str	r0, [r6, #0]
 80078ee:	062e      	lsls	r6, r5, #24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0x1c0>
 80078f4:	6019      	str	r1, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0x1c6>
 80078f8:	0668      	lsls	r0, r5, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0x1bc>
 80078fc:	8019      	strh	r1, [r3, #0]
 80078fe:	2300      	movs	r3, #0
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	4616      	mov	r6, r2
 8007904:	e7bc      	b.n	8007880 <_printf_i+0x148>
 8007906:	6833      	ldr	r3, [r6, #0]
 8007908:	1d1a      	adds	r2, r3, #4
 800790a:	6032      	str	r2, [r6, #0]
 800790c:	681e      	ldr	r6, [r3, #0]
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	2100      	movs	r1, #0
 8007912:	4630      	mov	r0, r6
 8007914:	f7f8 fc84 	bl	8000220 <memchr>
 8007918:	b108      	cbz	r0, 800791e <_printf_i+0x1e6>
 800791a:	1b80      	subs	r0, r0, r6
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	2300      	movs	r3, #0
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007928:	e7aa      	b.n	8007880 <_printf_i+0x148>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	4632      	mov	r2, r6
 800792e:	4649      	mov	r1, r9
 8007930:	4640      	mov	r0, r8
 8007932:	47d0      	blx	sl
 8007934:	3001      	adds	r0, #1
 8007936:	d0ad      	beq.n	8007894 <_printf_i+0x15c>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	079b      	lsls	r3, r3, #30
 800793c:	d413      	bmi.n	8007966 <_printf_i+0x22e>
 800793e:	68e0      	ldr	r0, [r4, #12]
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	4298      	cmp	r0, r3
 8007944:	bfb8      	it	lt
 8007946:	4618      	movlt	r0, r3
 8007948:	e7a6      	b.n	8007898 <_printf_i+0x160>
 800794a:	2301      	movs	r3, #1
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d09d      	beq.n	8007894 <_printf_i+0x15c>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9903      	ldr	r1, [sp, #12]
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcf2      	bgt.n	800794a <_printf_i+0x212>
 8007964:	e7eb      	b.n	800793e <_printf_i+0x206>
 8007966:	2500      	movs	r5, #0
 8007968:	f104 0619 	add.w	r6, r4, #25
 800796c:	e7f5      	b.n	800795a <_printf_i+0x222>
 800796e:	bf00      	nop
 8007970:	08007d74 	.word	0x08007d74
 8007974:	08007d85 	.word	0x08007d85

08007978 <__swbuf_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	460e      	mov	r6, r1
 800797c:	4614      	mov	r4, r2
 800797e:	4605      	mov	r5, r0
 8007980:	b118      	cbz	r0, 800798a <__swbuf_r+0x12>
 8007982:	6a03      	ldr	r3, [r0, #32]
 8007984:	b90b      	cbnz	r3, 800798a <__swbuf_r+0x12>
 8007986:	f7ff fa3f 	bl	8006e08 <__sinit>
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	071a      	lsls	r2, r3, #28
 8007992:	d501      	bpl.n	8007998 <__swbuf_r+0x20>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b943      	cbnz	r3, 80079aa <__swbuf_r+0x32>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f82a 	bl	80079f4 <__swsetup_r>
 80079a0:	b118      	cbz	r0, 80079aa <__swbuf_r+0x32>
 80079a2:	f04f 37ff 	mov.w	r7, #4294967295
 80079a6:	4638      	mov	r0, r7
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	6922      	ldr	r2, [r4, #16]
 80079ae:	1a98      	subs	r0, r3, r2
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	b2f6      	uxtb	r6, r6
 80079b4:	4283      	cmp	r3, r0
 80079b6:	4637      	mov	r7, r6
 80079b8:	dc05      	bgt.n	80079c6 <__swbuf_r+0x4e>
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f7ff fcbb 	bl	8007338 <_fflush_r>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1ed      	bne.n	80079a2 <__swbuf_r+0x2a>
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	701e      	strb	r6, [r3, #0]
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	429a      	cmp	r2, r3
 80079da:	d004      	beq.n	80079e6 <__swbuf_r+0x6e>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d5e1      	bpl.n	80079a6 <__swbuf_r+0x2e>
 80079e2:	2e0a      	cmp	r6, #10
 80079e4:	d1df      	bne.n	80079a6 <__swbuf_r+0x2e>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f7ff fca5 	bl	8007338 <_fflush_r>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d0d9      	beq.n	80079a6 <__swbuf_r+0x2e>
 80079f2:	e7d6      	b.n	80079a2 <__swbuf_r+0x2a>

080079f4 <__swsetup_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4b29      	ldr	r3, [pc, #164]	@ (8007a9c <__swsetup_r+0xa8>)
 80079f8:	4605      	mov	r5, r0
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	460c      	mov	r4, r1
 80079fe:	b118      	cbz	r0, 8007a08 <__swsetup_r+0x14>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <__swsetup_r+0x14>
 8007a04:	f7ff fa00 	bl	8006e08 <__sinit>
 8007a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0c:	0719      	lsls	r1, r3, #28
 8007a0e:	d422      	bmi.n	8007a56 <__swsetup_r+0x62>
 8007a10:	06da      	lsls	r2, r3, #27
 8007a12:	d407      	bmi.n	8007a24 <__swsetup_r+0x30>
 8007a14:	2209      	movs	r2, #9
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	e033      	b.n	8007a8c <__swsetup_r+0x98>
 8007a24:	0758      	lsls	r0, r3, #29
 8007a26:	d512      	bpl.n	8007a4e <__swsetup_r+0x5a>
 8007a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a2a:	b141      	cbz	r1, 8007a3e <__swsetup_r+0x4a>
 8007a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d002      	beq.n	8007a3a <__swsetup_r+0x46>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7ff fafb 	bl	8007030 <_free_r>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	b94b      	cbnz	r3, 8007a6e <__swsetup_r+0x7a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a64:	d003      	beq.n	8007a6e <__swsetup_r+0x7a>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f883 	bl	8007b74 <__smakebuf_r>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	f013 0201 	ands.w	r2, r3, #1
 8007a76:	d00a      	beq.n	8007a8e <__swsetup_r+0x9a>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60a2      	str	r2, [r4, #8]
 8007a7c:	6962      	ldr	r2, [r4, #20]
 8007a7e:	4252      	negs	r2, r2
 8007a80:	61a2      	str	r2, [r4, #24]
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	b942      	cbnz	r2, 8007a98 <__swsetup_r+0xa4>
 8007a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a8a:	d1c5      	bne.n	8007a18 <__swsetup_r+0x24>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	0799      	lsls	r1, r3, #30
 8007a90:	bf58      	it	pl
 8007a92:	6962      	ldrpl	r2, [r4, #20]
 8007a94:	60a2      	str	r2, [r4, #8]
 8007a96:	e7f4      	b.n	8007a82 <__swsetup_r+0x8e>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7f7      	b.n	8007a8c <__swsetup_r+0x98>
 8007a9c:	20000058 	.word	0x20000058

08007aa0 <_raise_r>:
 8007aa0:	291f      	cmp	r1, #31
 8007aa2:	b538      	push	{r3, r4, r5, lr}
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d904      	bls.n	8007ab4 <_raise_r+0x14>
 8007aaa:	2316      	movs	r3, #22
 8007aac:	6003      	str	r3, [r0, #0]
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ab6:	b112      	cbz	r2, 8007abe <_raise_r+0x1e>
 8007ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007abc:	b94b      	cbnz	r3, 8007ad2 <_raise_r+0x32>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f830 	bl	8007b24 <_getpid_r>
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ace:	f000 b817 	b.w	8007b00 <_kill_r>
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d00a      	beq.n	8007aec <_raise_r+0x4c>
 8007ad6:	1c59      	adds	r1, r3, #1
 8007ad8:	d103      	bne.n	8007ae2 <_raise_r+0x42>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7e7      	b.n	8007ab2 <_raise_r+0x12>
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4798      	blx	r3
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7e0      	b.n	8007ab2 <_raise_r+0x12>

08007af0 <raise>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	@ (8007afc <raise+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f7ff bfd3 	b.w	8007aa0 <_raise_r>
 8007afa:	bf00      	nop
 8007afc:	20000058 	.word	0x20000058

08007b00 <_kill_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	@ (8007b20 <_kill_r+0x20>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f7f9 fdc1 	bl	8001694 <_kill>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_kill_r+0x1c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_kill_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000614 	.word	0x20000614

08007b24 <_getpid_r>:
 8007b24:	f7f9 bdae 	b.w	8001684 <_getpid>

08007b28 <__swhatbuf_r>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2900      	cmp	r1, #0
 8007b32:	b096      	sub	sp, #88	@ 0x58
 8007b34:	4615      	mov	r5, r2
 8007b36:	461e      	mov	r6, r3
 8007b38:	da0d      	bge.n	8007b56 <__swhatbuf_r+0x2e>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b40:	f04f 0100 	mov.w	r1, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2340      	movne	r3, #64	@ 0x40
 8007b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	6031      	str	r1, [r6, #0]
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	b016      	add	sp, #88	@ 0x58
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	466a      	mov	r2, sp
 8007b58:	f000 f848 	bl	8007bec <_fstat_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dbec      	blt.n	8007b3a <__swhatbuf_r+0x12>
 8007b60:	9901      	ldr	r1, [sp, #4]
 8007b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b6a:	4259      	negs	r1, r3
 8007b6c:	4159      	adcs	r1, r3
 8007b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b72:	e7eb      	b.n	8007b4c <__swhatbuf_r+0x24>

08007b74 <__smakebuf_r>:
 8007b74:	898b      	ldrh	r3, [r1, #12]
 8007b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b78:	079d      	lsls	r5, r3, #30
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	d507      	bpl.n	8007b90 <__smakebuf_r+0x1c>
 8007b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	6163      	str	r3, [r4, #20]
 8007b8c:	b003      	add	sp, #12
 8007b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b90:	ab01      	add	r3, sp, #4
 8007b92:	466a      	mov	r2, sp
 8007b94:	f7ff ffc8 	bl	8007b28 <__swhatbuf_r>
 8007b98:	9f00      	ldr	r7, [sp, #0]
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff faba 	bl	8007118 <_malloc_r>
 8007ba4:	b948      	cbnz	r0, 8007bba <__smakebuf_r+0x46>
 8007ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007baa:	059a      	lsls	r2, r3, #22
 8007bac:	d4ee      	bmi.n	8007b8c <__smakebuf_r+0x18>
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	f043 0302 	orr.w	r3, r3, #2
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	e7e2      	b.n	8007b80 <__smakebuf_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	6020      	str	r0, [r4, #0]
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bca:	b15b      	cbz	r3, 8007be4 <__smakebuf_r+0x70>
 8007bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 f81d 	bl	8007c10 <_isatty_r>
 8007bd6:	b128      	cbz	r0, 8007be4 <__smakebuf_r+0x70>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	431d      	orrs	r5, r3
 8007be8:	81a5      	strh	r5, [r4, #12]
 8007bea:	e7cf      	b.n	8007b8c <__smakebuf_r+0x18>

08007bec <_fstat_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	@ (8007c0c <_fstat_r+0x20>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	f7f9 fdab 	bl	8001754 <_fstat>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d102      	bne.n	8007c08 <_fstat_r+0x1c>
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	b103      	cbz	r3, 8007c08 <_fstat_r+0x1c>
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000614 	.word	0x20000614

08007c10 <_isatty_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	@ (8007c2c <_isatty_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7f9 fdaa 	bl	8001774 <_isatty>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_isatty_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_isatty_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000614 	.word	0x20000614

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
